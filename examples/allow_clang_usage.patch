diff --git a/CMakeLists.txt b/CMakeLists.txt
index f1bc2dde..6213a4e3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,7 +8,6 @@ set(CXX_STANDARD_REQUIRED true)
 
 if (${CMAKE_PROJECT_NAME} STREQUAL nitro)
     # we are the top-level project and are responsible for configuration
-
     # set up warnings
     if (MSVC)
         # set warning level to /W4
@@ -21,7 +20,7 @@ if (${CMAKE_PROJECT_NAME} STREQUAL nitro)
             # https://docs.microsoft.com/en-us/cpp/sanitizers/asan?view=msvc-160
             add_compile_options(/fsanitize=address)
         endif()
-    elseif (UNIX)
+    elseif ((CMAKE_CXX_COMPILER_ID MATCHES "GNU") AND UNIX)
         add_compile_options(
             -Wall
             -Wno-deprecated
@@ -32,6 +31,15 @@ if (${CMAKE_PROJECT_NAME} STREQUAL nitro)
             # https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
             add_compile_options(-fsanitize=address)
         endif()
+    elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+        add_compile_options(
+           -Wall
+           -Wno-deprecated
+           -Wno-unused-value
+        )
+        if (ENABLE_ASAN)
+            add_compile_options(-fsanitize=address)
+        endif()
     endif()
 
     if (EXISTS "${CMAKE_BINARY_DIR}/conan_paths.cmake")
diff --git a/externals/coda-oss/cmake/CodaBuild.cmake b/externals/coda-oss/cmake/CodaBuild.cmake
index 69a143c1..d3dd67f0 100644
--- a/externals/coda-oss/cmake/CodaBuild.cmake
+++ b/externals/coda-oss/cmake/CodaBuild.cmake
@@ -307,25 +307,31 @@ endfunction()
 #                     automated running.
 #
 function(coda_add_tests)
-    if (CODA_BUILD_TESTS)
-        cmake_parse_arguments(
-            ARG                         # prefix
-            "UNITTEST"                  # options
-            "MODULE_NAME;DIRECTORY"     # single args
-            "DEPS;SOURCES;ARGS;FILTER_LIST"  # multi args
-            "${ARGN}"
-        )
-        if (ARG_UNPARSED_ARGUMENTS)
-            message(FATAL_ERROR "received unexpected argument(s): ${ARG_UNPARSED_ARGUMENTS}")
-        endif()
+    cmake_parse_arguments(
+        ARG                         # prefix
+        "UNITTEST"                  # options
+        "MODULE_NAME;DIRECTORY"     # single args
+        "DEPS;SOURCES;ARGS;FILTER_LIST"  # multi args
+        "${ARGN}"
+    )
+    if (ARG_UNPARSED_ARGUMENTS)
+        message(FATAL_ERROR "received unexpected argument(s): ${ARG_UNPARSED_ARGUMENTS}")
+    endif()
 
-        if (NOT ARG_DIRECTORY)
-            message(FATAL_ERROR "Must give a test directory")
-        endif()
-        if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${ARG_DIRECTORY}")
-            message(FATAL_ERROR "Directory ${CMAKE_CURRENT_SOURCE_DIR}/${ARG_DIRECTORY} does not exist")
-        endif()
+    if (NOT ARG_DIRECTORY)
+        message(FATAL_ERROR "Must give a test directory")
+    endif()
+    if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${ARG_DIRECTORY}")
+        message(FATAL_ERROR "Directory ${CMAKE_CURRENT_SOURCE_DIR}/${ARG_DIRECTORY} does not exist")
+    endif()
+
+    # make a group target for the test directory, which doesn't have its own CMakeLists.txt
+    set(test_group_tgt "${ARG_MODULE_NAME}_tests")
+    if (NOT TARGET ${test_group_tgt})
+        add_custom_target(${test_group_tgt})
+    endif()
 
+    if (CODA_BUILD_TESTS)
         if (ARG_SOURCES)
             foreach(src ${ARG_SOURCES})
                 list(APPEND local_tests "${ARG_DIRECTORY}/${src}")
@@ -338,12 +344,6 @@ function(coda_add_tests)
         # Filter out ignored files
         filter_files(local_tests "${local_tests}" "${ARG_FILTER_LIST}")
 
-        # make a group target to build all tests for the current module
-        set(test_group_tgt "${ARG_MODULE_NAME}_tests")
-        if (NOT TARGET ${test_group_tgt})
-            add_custom_target(${test_group_tgt})
-        endif()
-
         list(APPEND ARG_DEPS ${ARG_MODULE_NAME}-${TARGET_LANGUAGE} TestCase)
 
         # get all interface libraries and include directories from the dependencies
@@ -388,6 +388,10 @@ function(coda_add_tests)
                         RUNTIME DESTINATION "${ARG_DIRECTORY}/${ARG_MODULE_NAME}/${test_subdir}")
             endif()
         endforeach()
+    else()
+        # so that we do not build Coda test targets if they are not wanted,
+        # (since otherwise they get globbed in :/) be explicit about NOT including them
+        set_property(TARGET ${test_group_tgt} PROPERTY EXCLUDE_FROM_ALL ON)
     endif()
 endfunction()
 
diff --git a/externals/coda-oss/modules/drivers/xml/xerces/CMakeLists.txt b/externals/coda-oss/modules/drivers/xml/xerces/CMakeLists.txt
index 70065391..f1ab9750 100644
--- a/externals/coda-oss/modules/drivers/xml/xerces/CMakeLists.txt
+++ b/externals/coda-oss/modules/drivers/xml/xerces/CMakeLists.txt
@@ -21,12 +21,14 @@ if (XML_HOME)
     find_library(${TARGET_NAME}_PATH
                  ${TARGET_NAME}
                  PATHS ${XML_HOME}
-                 PATH_SUFFIXES lib lib64
+                 PATH_SUFFIXES lib lib64 x86_64-linux-gnu
                  NO_DEFAULT_PATH)
     if ("${${TARGET_NAME}_PATH}" STREQUAL "${TARGET_NAME}_PATH-NOTFOUND")
         message(FATAL_ERROR "Xerces not found at XML_HOME ${XML_HOME}")
     else()
         message("Found Xerces at ${${TARGET_NAME}_PATH}")
+        message("Excluding Coda's local xerces from build since we don't need it")
+        set_directory_properties(PROPERTIES EXCLUDE_FROM_ALL ON)
     endif()
 
     # verify we can link this library

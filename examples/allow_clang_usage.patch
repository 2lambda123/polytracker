diff --git a/.gitignore b/.gitignore
index df928c02..50f9619c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -46,3 +46,7 @@ cmake-build*/
 # unit tests
 outputPathname.ntf
 sicd_*_nitf__*_band_*.man
+
+#Swig 
+externals/coda-oss/modules/python/*/source/generated/
+modules/python/nitf/source/*/generated/
diff --git a/CMakeLists.txt b/CMakeLists.txt
index f1bc2dde..ad8d82dd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,7 +8,6 @@ set(CXX_STANDARD_REQUIRED true)
 
 if (${CMAKE_PROJECT_NAME} STREQUAL nitro)
     # we are the top-level project and are responsible for configuration
-
     # set up warnings
     if (MSVC)
         # set warning level to /W4
@@ -21,7 +20,7 @@ if (${CMAKE_PROJECT_NAME} STREQUAL nitro)
             # https://docs.microsoft.com/en-us/cpp/sanitizers/asan?view=msvc-160
             add_compile_options(/fsanitize=address)
         endif()
-    elseif (UNIX)
+    elseif ((CMAKE_CXX_COMPILER_ID MATCHES "GNU") AND UNIX)
         add_compile_options(
             -Wall
             -Wno-deprecated
@@ -32,6 +31,15 @@ if (${CMAKE_PROJECT_NAME} STREQUAL nitro)
             # https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
             add_compile_options(-fsanitize=address)
         endif()
+    elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+        add_compile_options(
+            -Wall
+            -Wno-deprecated
+            -Wno-unused-value
+        )
+        if (ENABLE_ASAN)
+            add_compile_options(-fsanitize=address)
+        endif()
     endif()
 
     if (EXISTS "${CMAKE_BINARY_DIR}/conan_paths.cmake")
diff --git a/externals/coda-oss/CMakeLists.txt b/externals/coda-oss/CMakeLists.txt
index 43ab0ca8..731aeac4 100644
--- a/externals/coda-oss/CMakeLists.txt
+++ b/externals/coda-oss/CMakeLists.txt
@@ -25,12 +25,24 @@ if (${CMAKE_PROJECT_NAME} STREQUAL coda-oss)
         # set warning level to /W3
         string(REGEX REPLACE "/W[0-4]" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
         string(REGEX REPLACE "/W[0-4]" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
-    elseif (UNIX)
+    elseif ((CMAKE_CXX_COMPILER_ID MATCHES "GNU") AND UNIX)
         add_compile_options(
             -Wno-deprecated
             -Wno-unused-value
             -Wno-unused-but-set-variable
         )
+        if (ENABLE_ASAN)
+            # https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
+            add_compile_options(-fsanitize=address)
+        endif()
+    elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+        add_compile_options(
+            -Wno-deprecated
+            -Wno-unused-value
+        )
+        if (ENABLE_ASAN)
+            add_compile_options(-fsanitize=address)
+        endif()
     endif()
 
     list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
diff --git a/externals/coda-oss/cmake/CodaBuild.cmake b/externals/coda-oss/cmake/CodaBuild.cmake
index 69a143c1..d3dd67f0 100644
--- a/externals/coda-oss/cmake/CodaBuild.cmake
+++ b/externals/coda-oss/cmake/CodaBuild.cmake
@@ -307,25 +307,31 @@ endfunction()
 #                     automated running.
 #
 function(coda_add_tests)
-    if (CODA_BUILD_TESTS)
-        cmake_parse_arguments(
-            ARG                         # prefix
-            "UNITTEST"                  # options
-            "MODULE_NAME;DIRECTORY"     # single args
-            "DEPS;SOURCES;ARGS;FILTER_LIST"  # multi args
-            "${ARGN}"
-        )
-        if (ARG_UNPARSED_ARGUMENTS)
-            message(FATAL_ERROR "received unexpected argument(s): ${ARG_UNPARSED_ARGUMENTS}")
-        endif()
+    cmake_parse_arguments(
+        ARG                         # prefix
+        "UNITTEST"                  # options
+        "MODULE_NAME;DIRECTORY"     # single args
+        "DEPS;SOURCES;ARGS;FILTER_LIST"  # multi args
+        "${ARGN}"
+    )
+    if (ARG_UNPARSED_ARGUMENTS)
+        message(FATAL_ERROR "received unexpected argument(s): ${ARG_UNPARSED_ARGUMENTS}")
+    endif()
 
-        if (NOT ARG_DIRECTORY)
-            message(FATAL_ERROR "Must give a test directory")
-        endif()
-        if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${ARG_DIRECTORY}")
-            message(FATAL_ERROR "Directory ${CMAKE_CURRENT_SOURCE_DIR}/${ARG_DIRECTORY} does not exist")
-        endif()
+    if (NOT ARG_DIRECTORY)
+        message(FATAL_ERROR "Must give a test directory")
+    endif()
+    if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${ARG_DIRECTORY}")
+        message(FATAL_ERROR "Directory ${CMAKE_CURRENT_SOURCE_DIR}/${ARG_DIRECTORY} does not exist")
+    endif()
+
+    # make a group target for the test directory, which doesn't have its own CMakeLists.txt
+    set(test_group_tgt "${ARG_MODULE_NAME}_tests")
+    if (NOT TARGET ${test_group_tgt})
+        add_custom_target(${test_group_tgt})
+    endif()
 
+    if (CODA_BUILD_TESTS)
         if (ARG_SOURCES)
             foreach(src ${ARG_SOURCES})
                 list(APPEND local_tests "${ARG_DIRECTORY}/${src}")
@@ -338,12 +344,6 @@ function(coda_add_tests)
         # Filter out ignored files
         filter_files(local_tests "${local_tests}" "${ARG_FILTER_LIST}")
 
-        # make a group target to build all tests for the current module
-        set(test_group_tgt "${ARG_MODULE_NAME}_tests")
-        if (NOT TARGET ${test_group_tgt})
-            add_custom_target(${test_group_tgt})
-        endif()
-
         list(APPEND ARG_DEPS ${ARG_MODULE_NAME}-${TARGET_LANGUAGE} TestCase)
 
         # get all interface libraries and include directories from the dependencies
@@ -388,6 +388,10 @@ function(coda_add_tests)
                         RUNTIME DESTINATION "${ARG_DIRECTORY}/${ARG_MODULE_NAME}/${test_subdir}")
             endif()
         endforeach()
+    else()
+        # so that we do not build Coda test targets if they are not wanted,
+        # (since otherwise they get globbed in :/) be explicit about NOT including them
+        set_property(TARGET ${test_group_tgt} PROPERTY EXCLUDE_FROM_ALL ON)
     endif()
 endfunction()
 
diff --git a/externals/coda-oss/modules/c++/gsl/include/gsl/Gsl_narrow.h b/externals/coda-oss/modules/c++/gsl/include/gsl/Gsl_narrow.h
index 2992e5b8..c5980df8 100644
--- a/externals/coda-oss/modules/c++/gsl/include/gsl/Gsl_narrow.h
+++ b/externals/coda-oss/modules/c++/gsl/include/gsl/Gsl_narrow.h
@@ -54,7 +54,7 @@ namespace Gsl
         template <typename Exception>
         [[noreturn]] void throw_exception(Exception&& e)
         {
-            throw e;
+            throw std::move(e);
         }
 
         template <class T, class U>
diff --git a/externals/coda-oss/modules/c++/io/include/io/ProxyStreams.h b/externals/coda-oss/modules/c++/io/include/io/ProxyStreams.h
index 9f578f36..abece532 100644
--- a/externals/coda-oss/modules/c++/io/include/io/ProxyStreams.h
+++ b/externals/coda-oss/modules/c++/io/include/io/ProxyStreams.h
@@ -1,7 +1,7 @@
 /* =========================================================================
- * This file is part of io-c++ 
+ * This file is part of io-c++
  * =========================================================================
- * 
+ *
  * (C) Copyright 2004 - 2014, MDA Information Systems LLC
  *
  * io-c++ is free software; you can redistribute it and/or modify
@@ -14,8 +14,8 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU Lesser General Public 
- * License along with this program; If not, 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; If not,
  * see <http://www.gnu.org/licenses/>.
  *
  */
@@ -86,10 +86,10 @@ struct CODA_OSS_API ProxyOutputStream : public OutputStream
         if (!mOwnPtr)
             mProxy.release();
     }
-    ProxyOutputStream(const ProxyOutputStream&) = delete;
-    ProxyOutputStream& operator=(const ProxyOutputStream&) = delete;
-    ProxyOutputStream(ProxyOutputStream&&) = default;
-    ProxyOutputStream& operator=(ProxyOutputStream&&) = default;
+    ProxyOutputStream(ProxyOutputStream&) = delete;
+    ProxyOutputStream& operator=(ProxyOutputStream&) = delete;
+    ProxyOutputStream(ProxyOutputStream&&) = delete;
+    ProxyOutputStream& operator=(ProxyOutputStream&&) = delete;
 
     using OutputStream::write;
 
@@ -138,8 +138,8 @@ struct CODA_OSS_API ToggleOutputStream : public io::ProxyOutputStream
     }
     ToggleOutputStream(const ToggleOutputStream&) = delete;
     ToggleOutputStream& operator=(const ToggleOutputStream&) = delete;
-    ToggleOutputStream(ToggleOutputStream&&) = default;
-    ToggleOutputStream& operator=(ToggleOutputStream&&) = default;
+    ToggleOutputStream(ToggleOutputStream&&) = delete;
+    ToggleOutputStream& operator=(ToggleOutputStream&&) = delete;
 
     void setEnabled(bool flag)
     {
diff --git a/externals/coda-oss/modules/c++/io/include/io/StringStream.h b/externals/coda-oss/modules/c++/io/include/io/StringStream.h
index d8a03ddb..611ca3fe 100644
--- a/externals/coda-oss/modules/c++/io/include/io/StringStream.h
+++ b/externals/coda-oss/modules/c++/io/include/io/StringStream.h
@@ -1,7 +1,7 @@
 /* =========================================================================
- * This file is part of io-c++ 
+ * This file is part of io-c++
  * =========================================================================
- * 
+ *
  * (C) Copyright 2004 - 2014, MDA Information Systems LLC
  *
  * io-c++ is free software; you can redistribute it and/or modify
@@ -14,8 +14,8 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU Lesser General Public 
- * License along with this program; If not, 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; If not,
  * see <http://www.gnu.org/licenses/>.
  *
  */
@@ -25,9 +25,9 @@
 #pragma once
 
 /*! \file StringStream.h
- *  \brief  A stream interface to the std::stringstream from C++ STL.
+ *  \brief  A stream interface to the std::basic_stringstream<T> from C++ STL.
  *
- *  String streams are very useful.  They are even more useful with cafe 
+ *  String streams are very useful.  They are even more useful with cafe
  *  streaming capabilities.  The capabilities are added by making the class
  *  inherit from a stream -- a class that can pipe information back and
  *  forth to other streams.
@@ -52,23 +52,21 @@ struct StringStreamT final : public SeekableBidirectionalStream
     StringStreamT(const StringStreamT&) = delete;
     StringStreamT& operator=(const StringStreamT&) = delete;
 
-    using stringstream = std::basic_stringstream<CharT>;
-
     /*!
      *  Returns the stringstream associated with this StringStream
      *  \return the stringstream
      */
-    const stringstream& stream() const
+    const std::basic_stringstream<CharT>& stream() const
     {
         return mData;
     }
 
-    sys::Off_T tell()
+    sys::Off_T tell() override
     {
         return mData.tellg();
     }
 
-    sys::Off_T seek(sys::Off_T offset, Whence whence)
+    sys::Off_T seek(sys::Off_T offset, Whence whence) override
     {
         std::ios::seekdir flags = std::ios::cur;
         switch (whence)
@@ -94,7 +92,7 @@ struct StringStreamT final : public SeekableBidirectionalStream
      *  Returns the available bytes to read from the stream
      *  \return the available bytes to read
      */
-    sys::Off_T available()
+    sys::Off_T available() override
     {
         const auto where = tell();
 
@@ -112,14 +110,14 @@ struct StringStreamT final : public SeekableBidirectionalStream
      *  \param buffer the data to write to the stream
      *  \param size the number of bytes to write to the stream
      */
-    void write(const void* buffer, sys::Size_T size)
+    void write(const void* buffer, sys::Size_T size) override
     {
         auto buffer_ = static_cast<const CharT*>(buffer);
         mData.write(buffer_, gsl::narrow<std::streamsize>(size));
     }
 
-    //! Returns the internal std::stringstream
-    stringstream& stream()
+    //! Returns the internal std::basic_stringstream<CharT>
+    std::basic_stringstream<CharT>& stream()
     {
         return mData;
     }
@@ -145,23 +143,23 @@ private:
         const auto maxSize = available();
         if (maxSize <= 0)
             return ::io::InputStream::IS_END;
-            
+
         auto len = gsl::narrow<sys::Off_T>(len_);
         if (maxSize < len)
             len = maxSize;
-            
+
         if (len <= 0)
             return 0;
-            
+
         auto buffer_ = static_cast<CharT*>(buffer);
         mData.read(buffer_, gsl::narrow<std::streamsize>(len));
-            
+
         // Could be problem if streams are broken alternately could
         // return gcount in else case above
         return gsl::narrow<sys::SSize_T>(len);
     }
 
-    stringstream mData{stringstream::in | stringstream::out | stringstream::binary};
+    std::basic_stringstream<CharT> mData{std::basic_stringstream<CharT>::in | std::basic_stringstream<CharT>::out | std::basic_stringstream<CharT>::binary};
 };
 
 using StringStream = StringStreamT<std::string::value_type>;
diff --git a/externals/coda-oss/modules/c++/logging/include/logging/MemoryHandler.h b/externals/coda-oss/modules/c++/logging/include/logging/MemoryHandler.h
index 479696d6..8721ef64 100644
--- a/externals/coda-oss/modules/c++/logging/include/logging/MemoryHandler.h
+++ b/externals/coda-oss/modules/c++/logging/include/logging/MemoryHandler.h
@@ -1,7 +1,7 @@
 /* =========================================================================
- * This file is part of logging-c++ 
+ * This file is part of logging-c++
  * =========================================================================
- * 
+ *
  * (C) Copyright 2004 - 2014, MDA Information Systems LLC
  *
  * logging-c++ is free software; you can redistribute it and/or modify
@@ -14,8 +14,8 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU Lesser General Public 
- * License along with this program; If not, 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; If not,
  * see <http://www.gnu.org/licenses/>.
  *
  */
@@ -49,7 +49,7 @@ struct MemoryHandler : public Handler
     getLogs(LogLevel level = LogLevel::LOG_NOTSET) const;
 
 protected:
-    virtual void write(const std::string& str);
+    virtual void write(const std::string& str) override;
 
     void emitRecord(const LogRecord* record) override;
 
diff --git a/externals/coda-oss/modules/c++/logging/include/logging/StreamHandler.h b/externals/coda-oss/modules/c++/logging/include/logging/StreamHandler.h
index d6786d76..bc230c65 100644
--- a/externals/coda-oss/modules/c++/logging/include/logging/StreamHandler.h
+++ b/externals/coda-oss/modules/c++/logging/include/logging/StreamHandler.h
@@ -57,10 +57,10 @@ struct CODA_OSS_API StreamHandler : public Handler
 
     //! adds the need to write epilogue before deleting formatter
     //  and then writing the prologue with the new formatter
-    virtual void setFormatter(Formatter* formatter);
-    virtual void setFormatter(std::unique_ptr<Formatter>&&);
+    virtual void setFormatter(Formatter* formatter) override;
+    virtual void setFormatter(std::unique_ptr<Formatter>&&) override;
 
-    virtual void close();
+    virtual void close() override;
 
 protected:
     // This is necessary so this class and an inherited class can call a
@@ -68,7 +68,7 @@ protected:
     void closeImpl();
 
     //! for general string write
-    virtual void write(const std::string&);
+    virtual void write(const std::string&) override;
 
     //! for writing directly to stream,
     // used for the bulk of the logging for speed
diff --git a/externals/coda-oss/modules/c++/mt/include/mt/CPUAffinityInitializerLinux.h b/externals/coda-oss/modules/c++/mt/include/mt/CPUAffinityInitializerLinux.h
index e8f428fa..cfe2bf41 100644
--- a/externals/coda-oss/modules/c++/mt/include/mt/CPUAffinityInitializerLinux.h
+++ b/externals/coda-oss/modules/c++/mt/include/mt/CPUAffinityInitializerLinux.h
@@ -40,6 +40,10 @@ namespace mt
 struct AbstractNextCPUProviderLinux
 {
     virtual mem::auto_ptr<const sys::ScopedCPUMaskUnix> nextCPU() = 0;
+
+    virtual ~AbstractNextCPUProviderLinux()
+    {
+    }
 };
 
 /*!
@@ -75,6 +79,10 @@ public:
                 newThreadInitializerImpl());
     }
 
+    ~CPUAffinityInitializerLinux()
+    {
+        mCPUProvider.release();
+    }
 private:
     CPUAffinityThreadInitializerLinux* newThreadInitializerImpl() override
     {
diff --git a/externals/coda-oss/modules/c++/mt/include/mt/CPUAffinityThreadInitializerLinux.h b/externals/coda-oss/modules/c++/mt/include/mt/CPUAffinityThreadInitializerLinux.h
index d60862db..f7cefaae 100644
--- a/externals/coda-oss/modules/c++/mt/include/mt/CPUAffinityThreadInitializerLinux.h
+++ b/externals/coda-oss/modules/c++/mt/include/mt/CPUAffinityThreadInitializerLinux.h
@@ -52,6 +52,9 @@ public:
      */
     CPUAffinityThreadInitializerLinux(
             std::unique_ptr<const sys::ScopedCPUMaskUnix>&& cpu);
+
+    virtual ~CPUAffinityThreadInitializerLinux();
+
 #if CODA_OSS_autoptr_is_std // std::auto_ptr removed in C++17
     CPUAffinityThreadInitializerLinux(
             mem::auto_ptr<const sys::ScopedCPUMaskUnix> cpu);
diff --git a/externals/coda-oss/modules/c++/std/include/std/type_traits b/externals/coda-oss/modules/c++/std/include/std/type_traits
index 519877b6..7e14c8ce 100644
--- a/externals/coda-oss/modules/c++/std/include/std/type_traits
+++ b/externals/coda-oss/modules/c++/std/include/std/type_traits
@@ -28,7 +28,9 @@
 #ifndef CODA_OSS_NO_is_trivially_copyable
 	// https://stackoverflow.com/a/31798726/8877
 	// workaround missing "is_trivially_copyable" in g++ < 5.0
-	#if defined(__GNUC__) && (__GNUC__ < 5)
+	// later note: non-GNU C and C++ compilers like Clang may also define __GNUC__ < 5.
+	// c.f. https://stackoverflow.com/questions/38499462/how-to-tell-clang-to-stop-pretending-to-be-other-compilers
+	#if defined(__GNUC__) && (__GNUC__ < 5) && !defined(__clang__)
 		#include "coda_oss/type_traits.h"
 		#define CODA_OSS_NO_is_trivially_copyable 0  // *need* our own
 	#else
diff --git a/externals/coda-oss/modules/c++/str/include/str/Convert.h b/externals/coda-oss/modules/c++/str/include/str/Convert.h
index 90d0c87d..52066aaa 100644
--- a/externals/coda-oss/modules/c++/str/include/str/Convert.h
+++ b/externals/coda-oss/modules/c++/str/include/str/Convert.h
@@ -101,7 +101,7 @@ T toType(const std::string& s)
                                 std::string(""),
                                 std::string("Empty string")));
 
-    T value;
+    T value = 0;
 
     std::stringstream buf(s);
     buf.precision(str::getPrecision(value));
diff --git a/externals/coda-oss/modules/c++/sys/include/sys/Conf.h b/externals/coda-oss/modules/c++/sys/include/sys/Conf.h
index 5537b1b3..844457d0 100644
--- a/externals/coda-oss/modules/c++/sys/include/sys/Conf.h
+++ b/externals/coda-oss/modules/c++/sys/include/sys/Conf.h
@@ -28,11 +28,25 @@
 // POSIX is more-or-less "Unix"
 // https://linux.die.net/man/7/feature_test_macros
 // "If no feature test macros are explicitly defined, then the following feature test macros
-// are defined by default: ... _POSIX_SOURCE, and _POSIX_C_SOURCE=200809L. [...] 
+// are defined by default: ... _POSIX_SOURCE, and _POSIX_C_SOURCE=200809L. [...]
 // _POSIX_SOURCE Defining this obsolete macro ... is equivalent to defining _POSIX_C_SOURCE ..."
-#define CODA_OSS_POSIX_SOURCE (defined(_POSIX_C_SOURCE) && (_POSIX_C_SOURCE >= 1))
-#define CODA_OSS_POSIX2001_SOURCE CODA_OSS_POSIX_SOURCE && (_POSIX_C_SOURCE >= 200112L)
-#define CODA_OSS_POSIX2008_SOURCE CODA_OSS_POSIX2001_SOURCE && (_POSIX_C_SOURCE >= 200809L)
+#if (defined(_POSIX_C_SOURCE) && (_POSIX_C_SOURCE >= 1))
+    #define CODA_OSS_POSIX_SOURCE 1
+#else
+    #define CODA_OSS_POSIX_SOURCE 0
+#endif
+
+#if (defined(CODA_OSS_POSIX_SOURCE) && ((_POSIX_C_SOURCE >= 200112L) || (_XOPEN_SOURCE >= 600)))
+    #define CODA_OSS_POSIX2001_SOURCE 1
+#else
+    #define CODA_OSS_POSIX2001_SOURCE 0
+#endif
+
+#if (defined(CODA_OSS_POSIX2001_SOURCE) && (_POSIX_C_SOURCE >= 200809L))
+    #define CODA_OSS_POSIX2008_SOURCE 1
+#else
+    #define CODA_OSS_POSIX2008_SOURCE 0
+#endif
 
 #include <config/Version.h>
 #include <config/Exports.h>
@@ -340,9 +354,8 @@ namespace sys
         // "The functions memalign(), ... have been available in all Linux libc libraries."
         p = memalign(alignment, size);
 #else
-        //! this is a basic unaligned allocation
+        // OSX always allocates on 16 byte boundaries
         p = malloc(size);
-        #error "Don't know how to implement alignedAlloc()."
 #endif
         if (!p)
             throw except::Exception(Ctxt(
diff --git a/externals/coda-oss/modules/c++/sys/source/DateTime.cpp b/externals/coda-oss/modules/c++/sys/source/DateTime.cpp
index 2b701af9..5404d1a3 100644
--- a/externals/coda-oss/modules/c++/sys/source/DateTime.cpp
+++ b/externals/coda-oss/modules/c++/sys/source/DateTime.cpp
@@ -122,7 +122,7 @@ char* strptime(const char *buf, const char *fmt, struct tm& tm, double& millis)
             bc = *bp++;
             if (bc != '%')
                 throw except::Exception(Ctxt(
-                        "Value does not match format (%%):  " + bc));
+                        "Value does not match format (%%):  " + str::toString(bc)));
             break;
 
         /*
@@ -344,7 +344,7 @@ char* strptime(const char *buf, const char *fmt, struct tm& tm, double& millis)
 
         default:               // Unknown/unsupported conversion.
             throw except::Exception(Ctxt(
-                    "Unknown/unsupported format type:  %" + fc));
+                    "Unknown/unsupported format type:  %" + str::toString(fc)));
         }
     }
 
diff --git a/externals/coda-oss/modules/c++/tiff/source/IFDEntry.cpp b/externals/coda-oss/modules/c++/tiff/source/IFDEntry.cpp
index 07697da8..b96d7f7b 100644
--- a/externals/coda-oss/modules/c++/tiff/source/IFDEntry.cpp
+++ b/externals/coda-oss/modules/c++/tiff/source/IFDEntry.cpp
@@ -1,7 +1,7 @@
 /* =========================================================================
- * This file is part of tiff-c++ 
+ * This file is part of tiff-c++
  * =========================================================================
- * 
+ *
  * (C) Copyright 2004 - 2014, MDA Information Systems LLC
  *
  * tiff-c++ is free software; you can redistribute it and/or modify
@@ -14,8 +14,8 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU Lesser General Public 
- * License along with this program; If not, 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; If not,
  * see <http://www.gnu.org/licenses/>.
  *
  */
@@ -120,7 +120,7 @@ void tiff::IFDEntry::deserialize(io::InputStream& input, const bool reverseBytes
         {
             auto elementSize = tiff::Const::sizeOf(mType);
             sys::Uint32_T numElements = mCount;
-            if (mType == tiff::Const::Type::RATIONAL && mType
+            if (mType == tiff::Const::Type::RATIONAL || mType
                     == tiff::Const::Type::SRATIONAL)
             {
                 elementSize = tiff::Const::sizeOf(mType) / 2;
diff --git a/externals/coda-oss/modules/c++/xml.lite/include/xml/lite/XMLReaderXerces.h b/externals/coda-oss/modules/c++/xml.lite/include/xml/lite/XMLReaderXerces.h
index beca1fa5..5a0007a0 100644
--- a/externals/coda-oss/modules/c++/xml.lite/include/xml/lite/XMLReaderXerces.h
+++ b/externals/coda-oss/modules/c++/xml.lite/include/xml/lite/XMLReaderXerces.h
@@ -82,7 +82,7 @@ public:
      *  This method returns a reference to the content handler.
      *  \return content handler
      */
-    xml::lite::ContentHandler *getContentHandler()
+    xml::lite::ContentHandler *getContentHandler() override
     {
         return mDriverContentHandler->retrieveXMLLiteContentHandler();
     }
@@ -92,7 +92,7 @@ public:
      *  It will set this internally.
      *  \param handler  The content handler to pass
      */
-    void setContentHandler(xml::lite::ContentHandler* handler)
+    void setContentHandler(xml::lite::ContentHandler* handler) override
     {
         mDriverContentHandler->setXMLLiteContentHandler(handler);
     }
@@ -102,14 +102,14 @@ public:
     void parse(bool storeEncoding, io::InputStream& is, int size = io::InputStream::IS_END);
     void parse(io::InputStream& is, const void*pInitialEncoding, const void* pFallbackEncoding,
         int size = io::InputStream::IS_END);
-    
+
     //! Method to create an xml reader
-    void create();
+    void create() override;
 
     //! Method to destroy an xml reader
-    void destroy();
+    void destroy() override;
 
-    std::string getDriverName() const { return "xerces"; }
+    std::string getDriverName() const override { return "xerces"; }
 
     static const void* getWindows1252Encoding();
 
diff --git a/externals/coda-oss/modules/c++/xml.lite/source/ValidatorInterface.cpp b/externals/coda-oss/modules/c++/xml.lite/source/ValidatorInterface.cpp
index d639655c..de6fd9b0 100644
--- a/externals/coda-oss/modules/c++/xml.lite/source/ValidatorInterface.cpp
+++ b/externals/coda-oss/modules/c++/xml.lite/source/ValidatorInterface.cpp
@@ -1,7 +1,7 @@
 /* =========================================================================
- * This file is part of xml.lite-c++ 
+ * This file is part of xml.lite-c++
  * =========================================================================
- * 
+ *
  * (C) Copyright 2004 - 2014, MDA Information Systems LLC
  * (C) Copyright 2022, Maxar Technologies, Inc.
  *
@@ -15,8 +15,8 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU Lesser General Public 
- * License along with this program; If not, 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; If not,
  * see <http://www.gnu.org/licenses/>.
  *
  */
@@ -27,5 +27,6 @@
 #include <std/filesystem>
 #include <std/memory>
 
+#include <coda_oss/string.h>
 #include <xml/lite/xml_lite_config.h>
 
diff --git a/externals/coda-oss/modules/c++/xml.lite/source/ValidatorXerces.cpp b/externals/coda-oss/modules/c++/xml.lite/source/ValidatorXerces.cpp
index 41968be2..d09ad398 100644
--- a/externals/coda-oss/modules/c++/xml.lite/source/ValidatorXerces.cpp
+++ b/externals/coda-oss/modules/c++/xml.lite/source/ValidatorXerces.cpp
@@ -1,7 +1,7 @@
 /* =========================================================================
- * This file is part of xml.lite-c++ 
+ * This file is part of xml.lite-c++
  * =========================================================================
- * 
+ *
  * (C) Copyright 2004 - 2014, MDA Information Systems LLC
  *
  * xml.lite-c++ is free software; you can redistribute it and/or modify
@@ -14,8 +14,8 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
- * You should have received a copy of the GNU Lesser General Public 
- * License along with this program; If not, 
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; If not,
  * see <http://www.gnu.org/licenses/>.
  *
  */
@@ -27,6 +27,7 @@
 #include <std/string>
 #include <regex>
 
+#include <coda_oss/string.h>
 #include <sys/OS.h>
 #include <io/StringStream.h>
 #include <mem/ScopedArray.h>
@@ -43,7 +44,7 @@ namespace xml
 {
 namespace lite
 {
-std::ostream& operator<< (std::ostream& out, 
+std::ostream& operator<< (std::ostream& out,
                           const ValidationErrorHandler& errorHandler)
 {
     out << errorHandler.toString() << std::endl;
@@ -56,17 +57,17 @@ bool ValidationErrorHandler::handleError(
     std::string level;
     switch(err.getSeverity())
     {
-    case xercesc::DOMError::DOM_SEVERITY_WARNING : 
-        level = "WARNING"; 
+    case xercesc::DOMError::DOM_SEVERITY_WARNING :
+        level = "WARNING";
         break;
-    case xercesc::DOMError::DOM_SEVERITY_ERROR : 
-        level = "ERROR"; 
+    case xercesc::DOMError::DOM_SEVERITY_ERROR :
+        level = "ERROR";
         break;
-    case xercesc::DOMError::DOM_SEVERITY_FATAL_ERROR : 
-        level = "FATAL"; 
+    case xercesc::DOMError::DOM_SEVERITY_FATAL_ERROR :
+        level = "FATAL";
         break;
     default :
-        level = "WARNING"; 
+        level = "WARNING";
         break;
     }
 
@@ -75,7 +76,7 @@ bool ValidationErrorHandler::handleError(
 
     // create o
     ValidationInfo info (
-        message.str(), level, mID, 
+        message.str(), level, mID,
         (size_t)err.getLocation()->getLineNumber());
     mErrorLog.push_back(info);
 
@@ -97,7 +98,7 @@ ValidatorXerces::ValidatorXerces(
 {
 }
 ValidatorXerces::ValidatorXerces(
-    const std::vector<std::string>& schemaPaths, 
+    const std::vector<std::string>& schemaPaths,
     logging::Logger* log,
     bool recursive) :
     ValidatorInterface(schemaPaths, log, recursive)
@@ -108,8 +109,8 @@ ValidatorXerces::ValidatorXerces(
         new xercesc::XMLGrammarPoolImpl(
             xercesc::XMLPlatformUtils::fgMemoryManager));
 
-    const XMLCh ls_id [] = {xercesc::chLatin_L, 
-                            xercesc::chLatin_S, 
+    const XMLCh ls_id [] = {xercesc::chLatin_L,
+                            xercesc::chLatin_S,
                             xercesc::chNull};
 
     // create the validator
@@ -117,7 +118,7 @@ ValidatorXerces::ValidatorXerces(
         xercesc::DOMImplementationRegistry::
             getDOMImplementation (ls_id)->createLSParser(
                 xercesc::DOMImplementationLS::MODE_SYNCHRONOUS,
-                0, 
+                0,
                 xercesc::XMLPlatformUtils::fgMemoryManager,
                 mSchemaPool.get()));
 
@@ -149,19 +150,19 @@ ValidatorXerces::ValidatorXerces(
     // add a error handler we still have control over
     mErrorHandler.reset(
             new ValidationErrorHandler());
-    config->setParameter(xercesc::XMLUni::fgDOMErrorHandler, 
+    config->setParameter(xercesc::XMLUni::fgDOMErrorHandler,
                          mErrorHandler.get());
 
     // load our schemas --
     // search each directory for schemas
     sys::OS os;
-    std::vector<std::string> schemas = 
+    std::vector<std::string> schemas =
         os.search(schemaPaths, "", ".xsd", recursive);
 
     //  add the schema to the validator
     for (size_t i = 0; i < schemas.size(); ++i)
     {
-        if (!mValidator->loadGrammar(schemas[i].c_str(), 
+        if (!mValidator->loadGrammar(schemas[i].c_str(),
                                      xercesc::Grammar::SchemaGrammarType,
                                      true))
         {
@@ -216,16 +217,16 @@ static std::unique_ptr<XMLCh_string> setStringData(xercesc::DOMLSInputImpl& inpu
     return retval;
 }
 
-bool ValidatorXerces::validate_(const std::u8string& xml, 
+bool ValidatorXerces::validate_(const std::u8string& xml,
                                const std::string& xmlID,
                                std::vector<ValidationInfo>& errors) const
 {
-    // clear the log before its use -- 
-    // however we do not clear the users 'errors' because 
+    // clear the log before its use --
+    // however we do not clear the users 'errors' because
     // they might want an accumulation of errors
     mErrorHandler->clearErrorLog();
 
-    // set the id so all errors coming from this session 
+    // set the id so all errors coming from this session
     // get a matching id
     mErrorHandler->setID(xmlID);
 
@@ -239,9 +240,9 @@ bool ValidatorXerces::validate_(const std::u8string& xml,
     // validate the document
     mValidator->parse(&input)->release();
 
-    // add the new errors to the vector 
-    errors.insert(errors.end(), 
-                  mErrorHandler->getErrorLog().begin(), 
+    // add the new errors to the vector
+    errors.insert(errors.end(),
+                  mErrorHandler->getErrorLog().begin(),
                   mErrorHandler->getErrorLog().end());
 
     // reset the id
@@ -270,7 +271,7 @@ static str::EncodedStringView encodeXml(const std::string& xml)
         return str::EncodedStringView::fromWindows1252(xml);
     }
 
-    // No "... encoding= ..."; let EncodedStringView deal with it   
+    // No "... encoding= ..."; let EncodedStringView deal with it
     return str::EncodedStringView(xml);
 }
 
diff --git a/externals/coda-oss/modules/drivers/gsl/GSL-4.0.0/tests/CMakeLists.txt b/externals/coda-oss/modules/drivers/gsl/GSL-4.0.0/tests/CMakeLists.txt
index cab4e56a..7661c68e 100644
--- a/externals/coda-oss/modules/drivers/gsl/GSL-4.0.0/tests/CMakeLists.txt
+++ b/externals/coda-oss/modules/drivers/gsl/GSL-4.0.0/tests/CMakeLists.txt
@@ -1,7 +1,9 @@
 cmake_minimum_required(VERSION 3.0.2)
 
 project(GSLTests CXX)
-enable_testing()  # again, for support standalone testing
+if (GSL_TEST)
+  enable_testing()  # again, for support standalone testing
+endif()
 
 include(FindPkgConfig)
 include(ExternalProject)
diff --git a/externals/coda-oss/modules/drivers/xml/xerces/CMakeLists.txt b/externals/coda-oss/modules/drivers/xml/xerces/CMakeLists.txt
index 0204349a..a331ffb4 100644
--- a/externals/coda-oss/modules/drivers/xml/xerces/CMakeLists.txt
+++ b/externals/coda-oss/modules/drivers/xml/xerces/CMakeLists.txt
@@ -21,12 +21,14 @@ if (XML_HOME)
     find_library(${TARGET_NAME}_PATH
                  ${TARGET_NAME}
                  PATHS ${XML_HOME}
-                 PATH_SUFFIXES lib lib64
+                 PATH_SUFFIXES lib lib64 x86_64-linux-gnu
                  NO_DEFAULT_PATH)
     if ("${${TARGET_NAME}_PATH}" STREQUAL "${TARGET_NAME}_PATH-NOTFOUND")
         message(FATAL_ERROR "Xerces not found at XML_HOME ${XML_HOME}")
     else()
         message("Found Xerces at ${${TARGET_NAME}_PATH}")
+        message("Excluding Coda's local xerces from build since we don't need it")
+        set_directory_properties(PROPERTIES EXCLUDE_FROM_ALL ON)
     endif()
 
     # verify we can link this library
diff --git a/externals/coda-oss/modules/python/config/source/generated/coda_config.py b/externals/coda-oss/modules/python/config/source/generated/coda_config.py
index 66260e39..df09b261 100644
--- a/externals/coda-oss/modules/python/config/source/generated/coda_config.py
+++ b/externals/coda-oss/modules/python/config/source/generated/coda_config.py
@@ -1,100 +1,65 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_coda_config')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_coda_config')
-    _coda_config = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_coda_config', [dirname(__file__)])
-        except ImportError:
-            import _coda_config
-            return _coda_config
-        try:
-            _mod = imp.load_module('_coda_config', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _coda_config = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _coda_config
 else:
     import _coda_config
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
+
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
-
-# This file is compatible with both classic and new-style classes.
 
 
diff --git a/externals/coda-oss/modules/python/except/source/generated/coda_except.py b/externals/coda-oss/modules/python/except/source/generated/coda_except.py
index 0359773f..fd3b6968 100644
--- a/externals/coda-oss/modules/python/except/source/generated/coda_except.py
+++ b/externals/coda-oss/modules/python/except/source/generated/coda_except.py
@@ -1,1343 +1,926 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_coda_except')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_coda_except')
-    _coda_except = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_coda_except', [dirname(__file__)])
-        except ImportError:
-            import _coda_except
-            return _coda_except
-        try:
-            _mod = imp.load_module('_coda_except', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _coda_except = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _coda_except
 else:
     import _coda_except
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
-
-class Context(_object):
-    """Proxy of C++ except::Context class."""
-
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
+
+class Context(object):
+    r"""Proxy of C++ except::Context class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_Context
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(Context self, char const * file, int line, std::string const & func, std::string const & time, std::string const & message="") -> Context
+        __init__(Context self, std::string const & message, char const * file, int line, std::string const & func="", std::string const & time="") -> Context
+        __init__(Context self, std::string const & file, int line, std::string const & func, std::string const & time, std::string const & message) -> Context
+        __init__(Context self, Context arg2) -> Context
+        __init__(Context self, Context arg2) -> Context
         """
-        __init__(except::Context self, char const * file, int line, std::string const & func, std::string const & time, std::string const & message) -> Context
-        __init__(except::Context self, char const * file, int line, std::string const & func, std::string const & time) -> Context
-        __init__(except::Context self, std::string const & message, char const * file, int line, std::string const & func, std::string const & time) -> Context
-        __init__(except::Context self, std::string const & message, char const * file, int line, std::string const & func) -> Context
-        __init__(except::Context self, std::string const & message, char const * file, int line) -> Context
-        __init__(except::Context self, std::string const & file, int line, std::string const & func, std::string const & time, std::string const & message) -> Context
-        __init__(except::Context self, Context arg2) -> Context
-        __init__(except::Context self, Context arg2) -> Context
-        """
-        this = _coda_except.new_Context(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.Context_swiginit(self, _coda_except.new_Context(*args))
 
     def getMessage(self) -> "std::string const &":
-        """getMessage(Context self) -> std::string const &"""
+        r"""getMessage(Context self) -> std::string const &"""
         return _coda_except.Context_getMessage(self)
 
-
     def getTime(self) -> "std::string const &":
-        """getTime(Context self) -> std::string const &"""
+        r"""getTime(Context self) -> std::string const &"""
         return _coda_except.Context_getTime(self)
 
-
     def getFunction(self) -> "std::string const &":
-        """getFunction(Context self) -> std::string const &"""
+        r"""getFunction(Context self) -> std::string const &"""
         return _coda_except.Context_getFunction(self)
 
-
     def getFile(self) -> "std::string const &":
-        """getFile(Context self) -> std::string const &"""
+        r"""getFile(Context self) -> std::string const &"""
         return _coda_except.Context_getFile(self)
 
-
     def getLine(self) -> "int":
-        """getLine(Context self) -> int"""
+        r"""getLine(Context self) -> int"""
         return _coda_except.Context_getLine(self)
+    mMessage = property(_coda_except.Context_mMessage_get, _coda_except.Context_mMessage_set, doc=r"""mMessage : std::string""")
+    mTime = property(_coda_except.Context_mTime_get, _coda_except.Context_mTime_set, doc=r"""mTime : std::string""")
+    mFunc = property(_coda_except.Context_mFunc_get, _coda_except.Context_mFunc_set, doc=r"""mFunc : std::string""")
+    mFile = property(_coda_except.Context_mFile_get, _coda_except.Context_mFile_set, doc=r"""mFile : std::string""")
+    mLine = property(_coda_except.Context_mLine_get, _coda_except.Context_mLine_set, doc=r"""mLine : int""")
 
-    __swig_setmethods__["mMessage"] = _coda_except.Context_mMessage_set
-    __swig_getmethods__["mMessage"] = _coda_except.Context_mMessage_get
-    if _newclass:
-        mMessage = _swig_property(_coda_except.Context_mMessage_get, _coda_except.Context_mMessage_set)
-    __swig_setmethods__["mTime"] = _coda_except.Context_mTime_set
-    __swig_getmethods__["mTime"] = _coda_except.Context_mTime_get
-    if _newclass:
-        mTime = _swig_property(_coda_except.Context_mTime_get, _coda_except.Context_mTime_set)
-    __swig_setmethods__["mFunc"] = _coda_except.Context_mFunc_set
-    __swig_getmethods__["mFunc"] = _coda_except.Context_mFunc_get
-    if _newclass:
-        mFunc = _swig_property(_coda_except.Context_mFunc_get, _coda_except.Context_mFunc_set)
-    __swig_setmethods__["mFile"] = _coda_except.Context_mFile_set
-    __swig_getmethods__["mFile"] = _coda_except.Context_mFile_get
-    if _newclass:
-        mFile = _swig_property(_coda_except.Context_mFile_get, _coda_except.Context_mFile_set)
-    __swig_setmethods__["mLine"] = _coda_except.Context_mLine_set
-    __swig_getmethods__["mLine"] = _coda_except.Context_mLine_get
-    if _newclass:
-        mLine = _swig_property(_coda_except.Context_mLine_get, _coda_except.Context_mLine_set)
-Context_swigregister = _coda_except.Context_swigregister
-Context_swigregister(Context)
-
-
-def __lshift__(os: 'std::ostream &', c: 'Context') -> "std::ostream &":
-    """__lshift__(std::ostream & os, Context c) -> std::ostream &"""
+# Register Context in _coda_except:
+_coda_except.Context_swigregister(Context)
+
+
+def __lshift__(os: "std::ostream &", c: "Context") -> "std::ostream &":
+    r"""__lshift__(std::ostream & os, Context c) -> std::ostream &"""
     return _coda_except.__lshift__(os, c)
-class Throwable(_object):
-    """Proxy of C++ except::Throwable class."""
+class Throwable(object):
+    r"""Proxy of C++ except::Throwable class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Throwable, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Throwable, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(except::Throwable self) -> Throwable
-        __init__(except::Throwable self, Throwable arg2) -> Throwable
-        __init__(except::Throwable self, Throwable arg2) -> Throwable
-        __init__(except::Throwable self, Throwable11 arg2) -> Throwable
-        __init__(except::Throwable self, std::string const & message) -> Throwable
-        __init__(except::Throwable self, Context arg2) -> Throwable
-        __init__(except::Throwable self, Throwable arg2, Context arg3) -> Throwable
-        __init__(except::Throwable self, Throwable11 arg2, Context arg3) -> Throwable
-        """
-        this = _coda_except.new_Throwable(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Throwable self) -> Throwable
+        __init__(Throwable self, Throwable arg2) -> Throwable
+        __init__(Throwable self, Throwable arg2) -> Throwable
+        __init__(Throwable self, Throwable11 arg2) -> Throwable
+        __init__(Throwable self, std::string const & message) -> Throwable
+        __init__(Throwable self, Context arg2) -> Throwable
+        __init__(Throwable self, Throwable arg2, Context arg3) -> Throwable
+        __init__(Throwable self, Throwable11 arg2, Context arg3) -> Throwable
+        """
+        _coda_except.Throwable_swiginit(self, _coda_except.new_Throwable(*args))
     __swig_destroy__ = _coda_except.delete_Throwable
-    __del__ = lambda self: None
 
     def getMessage(self) -> "std::string":
-        """getMessage(Throwable self) -> std::string"""
+        r"""getMessage(Throwable self) -> std::string"""
         return _coda_except.Throwable_getMessage(self)
 
-
     def getTrace(self, *args) -> "Trace &":
-        """
+        r"""
         getTrace(Throwable self) -> Trace const
         getTrace(Throwable self) -> Trace &
         """
         return _coda_except.Throwable_getTrace(self, *args)
 
-
     def getType(self) -> "std::string":
-        """getType(Throwable self) -> std::string"""
+        r"""getType(Throwable self) -> std::string"""
         return _coda_except.Throwable_getType(self)
 
-
     def getBacktrace(self) -> "std::vector< std::string > const &":
-        """getBacktrace(Throwable self) -> std::vector< std::string > const &"""
+        r"""getBacktrace(Throwable self) -> std::vector< std::string > const &"""
         return _coda_except.Throwable_getBacktrace(self)
 
-
     def backtrace(self) -> "except::Throwable &":
-        """backtrace(Throwable self) -> Throwable"""
+        r"""backtrace(Throwable self) -> Throwable"""
         return _coda_except.Throwable_backtrace(self)
 
-
     def toString(self, *args) -> "std::string":
-        """
+        r"""
         toString(Throwable self) -> std::string
         toString(Throwable self, bool includeBacktrace) -> std::string
         """
         return _coda_except.Throwable_toString(self, *args)
 
-
     def what(self) -> "char const *":
-        """what(Throwable self) -> char const *"""
+        r"""what(Throwable self) -> char const *"""
         return _coda_except.Throwable_what(self)
 
-Throwable_swigregister = _coda_except.Throwable_swigregister
-Throwable_swigregister(Throwable)
+# Register Throwable in _coda_except:
+_coda_except.Throwable_swigregister(Throwable)
 
-class Throwable11(_object):
-    """Proxy of C++ except::Throwable11 class."""
+class Throwable11(object):
+    r"""Proxy of C++ except::Throwable11 class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Throwable11, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Throwable11, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_Throwable11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
-        """
-        __init__(except::Throwable11 self) -> Throwable11
-        __init__(except::Throwable11 self, Throwable11 arg2) -> Throwable11
-        __init__(except::Throwable11 self, Throwable11 arg2) -> Throwable11
-        __init__(except::Throwable11 self, Throwable arg2) -> Throwable11
-        __init__(except::Throwable11 self, std::string const & message) -> Throwable11
-        __init__(except::Throwable11 self, Context arg2) -> Throwable11
-        __init__(except::Throwable11 self, Throwable11 arg2, Context arg3) -> Throwable11
-        __init__(except::Throwable11 self, Throwable arg2, Context arg3) -> Throwable11
-        """
-        this = _coda_except.new_Throwable11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Throwable11 self) -> Throwable11
+        __init__(Throwable11 self, Throwable11 arg2) -> Throwable11
+        __init__(Throwable11 self, Throwable11 arg2) -> Throwable11
+        __init__(Throwable11 self, Throwable arg2) -> Throwable11
+        __init__(Throwable11 self, std::string const & message) -> Throwable11
+        __init__(Throwable11 self, Context arg2) -> Throwable11
+        __init__(Throwable11 self, Throwable11 arg2, Context arg3) -> Throwable11
+        __init__(Throwable11 self, Throwable arg2, Context arg3) -> Throwable11
+        """
+        _coda_except.Throwable11_swiginit(self, _coda_except.new_Throwable11(*args))
 
     def getMessage(self) -> "std::string":
-        """getMessage(Throwable11 self) -> std::string"""
+        r"""getMessage(Throwable11 self) -> std::string"""
         return _coda_except.Throwable11_getMessage(self)
 
-
     def getTrace(self, *args) -> "Trace &":
-        """
+        r"""
         getTrace(Throwable11 self) -> Trace const
         getTrace(Throwable11 self) -> Trace &
         """
         return _coda_except.Throwable11_getTrace(self, *args)
 
-
     def getType(self) -> "std::string":
-        """getType(Throwable11 self) -> std::string"""
+        r"""getType(Throwable11 self) -> std::string"""
         return _coda_except.Throwable11_getType(self)
 
-
     def getBacktrace(self) -> "std::vector< std::string > const &":
-        """getBacktrace(Throwable11 self) -> std::vector< std::string > const &"""
+        r"""getBacktrace(Throwable11 self) -> std::vector< std::string > const &"""
         return _coda_except.Throwable11_getBacktrace(self)
 
-
     def backtrace(self) -> "except::Throwable11 &":
-        """backtrace(Throwable11 self) -> Throwable11"""
+        r"""backtrace(Throwable11 self) -> Throwable11"""
         return _coda_except.Throwable11_backtrace(self)
 
-
     def toString(self, *args) -> "std::string":
-        """
+        r"""
         toString(Throwable11 self) -> std::string
         toString(Throwable11 self, bool includeBacktrace) -> std::string
         """
         return _coda_except.Throwable11_toString(self, *args)
 
-
     def what(self) -> "char const *":
-        """what(Throwable11 self) -> char const *"""
+        r"""what(Throwable11 self) -> char const *"""
         return _coda_except.Throwable11_what(self)
 
-Throwable11_swigregister = _coda_except.Throwable11_swigregister
-Throwable11_swigregister(Throwable11)
+# Register Throwable11 in _coda_except:
+_coda_except.Throwable11_swigregister(Throwable11)
 
 class Exception(Throwable):
-    """Proxy of C++ except::Exception class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Throwable]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Throwable]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
+    r"""Proxy of C++ except::Exception class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_Exception
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(Exception self) -> Exception
+        __init__(Exception self, Context c) -> Exception
+        __init__(Exception self, Throwable t, Context c) -> Exception
+        __init__(Exception self, Throwable11 t, Context c) -> Exception
+        __init__(Exception self, std::string const & message) -> Exception
         """
-        __init__(except::Exception self) -> Exception
-        __init__(except::Exception self, Context c) -> Exception
-        __init__(except::Exception self, Throwable t, Context c) -> Exception
-        __init__(except::Exception self, Throwable11 t, Context c) -> Exception
-        __init__(except::Exception self, std::string const & message) -> Exception
-        """
-        this = _coda_except.new_Exception(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.Exception_swiginit(self, _coda_except.new_Exception(*args))
 
     def getType(self) -> "std::string":
-        """getType(Exception self) -> std::string"""
+        r"""getType(Exception self) -> std::string"""
         return _coda_except.Exception_getType(self)
 
-Exception_swigregister = _coda_except.Exception_swigregister
-Exception_swigregister(Exception)
+# Register Exception in _coda_except:
+_coda_except.Exception_swigregister(Exception)
 
 class Exception11(Throwable11):
-    """Proxy of C++ except::Exception11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Throwable11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Throwable11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, Exception11, name)
+    r"""Proxy of C++ except::Exception11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_Exception11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(Exception11 self) -> Exception11
+        __init__(Exception11 self, Context c) -> Exception11
+        __init__(Exception11 self, Throwable11 t, Context c) -> Exception11
+        __init__(Exception11 self, Throwable t, Context c) -> Exception11
+        __init__(Exception11 self, std::string const & message) -> Exception11
         """
-        __init__(except::Exception11 self) -> Exception11
-        __init__(except::Exception11 self, Context c) -> Exception11
-        __init__(except::Exception11 self, Throwable11 t, Context c) -> Exception11
-        __init__(except::Exception11 self, Throwable t, Context c) -> Exception11
-        __init__(except::Exception11 self, std::string const & message) -> Exception11
-        """
-        this = _coda_except.new_Exception11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.Exception11_swiginit(self, _coda_except.new_Exception11(*args))
 
     def getType(self) -> "std::string":
-        """getType(Exception11 self) -> std::string"""
+        r"""getType(Exception11 self) -> std::string"""
         return _coda_except.Exception11_getType(self)
 
-Exception11_swigregister = _coda_except.Exception11_swigregister
-Exception11_swigregister(Exception11)
+# Register Exception11 in _coda_except:
+_coda_except.Exception11_swigregister(Exception11)
 
 class IOException(Exception):
-    """Proxy of C++ except::IOException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, IOException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, IOException, name)
+    r"""Proxy of C++ except::IOException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_IOException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(IOException self) -> IOException
+        __init__(IOException self, IOException arg2) -> IOException
+        __init__(IOException self, IOException arg2) -> IOException
+        __init__(IOException self, Context c) -> IOException
+        __init__(IOException self, std::string const & msg) -> IOException
+        __init__(IOException self, Throwable t, Context c) -> IOException
+        __init__(IOException self, Throwable11 t, Context c) -> IOException
         """
-        __init__(except::IOException self) -> IOException
-        __init__(except::IOException self, IOException arg2) -> IOException
-        __init__(except::IOException self, IOException arg2) -> IOException
-        __init__(except::IOException self, Context c) -> IOException
-        __init__(except::IOException self, std::string const & msg) -> IOException
-        __init__(except::IOException self, Throwable t, Context c) -> IOException
-        __init__(except::IOException self, Throwable11 t, Context c) -> IOException
-        """
-        this = _coda_except.new_IOException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.IOException_swiginit(self, _coda_except.new_IOException(*args))
 
     def getType(self) -> "std::string":
-        """getType(IOException self) -> std::string"""
+        r"""getType(IOException self) -> std::string"""
         return _coda_except.IOException_getType(self)
 
-IOException_swigregister = _coda_except.IOException_swigregister
-IOException_swigregister(IOException)
+# Register IOException in _coda_except:
+_coda_except.IOException_swigregister(IOException)
 
 class IOException11(Exception11):
-    """Proxy of C++ except::IOException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, IOException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, IOException11, name)
+    r"""Proxy of C++ except::IOException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_IOException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(IOException11 self) -> IOException11
+        __init__(IOException11 self, IOException11 arg2) -> IOException11
+        __init__(IOException11 self, IOException11 arg2) -> IOException11
+        __init__(IOException11 self, Context c) -> IOException11
+        __init__(IOException11 self, std::string const & msg) -> IOException11
+        __init__(IOException11 self, Throwable t, Context c) -> IOException11
+        __init__(IOException11 self, Throwable11 t, Context c) -> IOException11
         """
-        __init__(except::IOException11 self) -> IOException11
-        __init__(except::IOException11 self, IOException11 arg2) -> IOException11
-        __init__(except::IOException11 self, IOException11 arg2) -> IOException11
-        __init__(except::IOException11 self, Context c) -> IOException11
-        __init__(except::IOException11 self, std::string const & msg) -> IOException11
-        __init__(except::IOException11 self, Throwable t, Context c) -> IOException11
-        __init__(except::IOException11 self, Throwable11 t, Context c) -> IOException11
-        """
-        this = _coda_except.new_IOException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.IOException11_swiginit(self, _coda_except.new_IOException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(IOException11 self) -> std::string"""
+        r"""getType(IOException11 self) -> std::string"""
         return _coda_except.IOException11_getType(self)
 
-IOException11_swigregister = _coda_except.IOException11_swigregister
-IOException11_swigregister(IOException11)
+# Register IOException11 in _coda_except:
+_coda_except.IOException11_swigregister(IOException11)
 
 class FileNotFoundException(IOException):
-    """Proxy of C++ except::FileNotFoundException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [IOException]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, FileNotFoundException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [IOException]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, FileNotFoundException, name)
+    r"""Proxy of C++ except::FileNotFoundException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_FileNotFoundException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(FileNotFoundException self) -> FileNotFoundException
+        __init__(FileNotFoundException self, FileNotFoundException arg2) -> FileNotFoundException
+        __init__(FileNotFoundException self, FileNotFoundException arg2) -> FileNotFoundException
+        __init__(FileNotFoundException self, Context c) -> FileNotFoundException
+        __init__(FileNotFoundException self, std::string const & msg) -> FileNotFoundException
+        __init__(FileNotFoundException self, Throwable t, Context c) -> FileNotFoundException
+        __init__(FileNotFoundException self, Throwable11 t, Context c) -> FileNotFoundException
         """
-        __init__(except::FileNotFoundException self) -> FileNotFoundException
-        __init__(except::FileNotFoundException self, FileNotFoundException arg2) -> FileNotFoundException
-        __init__(except::FileNotFoundException self, FileNotFoundException arg2) -> FileNotFoundException
-        __init__(except::FileNotFoundException self, Context c) -> FileNotFoundException
-        __init__(except::FileNotFoundException self, std::string const & msg) -> FileNotFoundException
-        __init__(except::FileNotFoundException self, Throwable t, Context c) -> FileNotFoundException
-        __init__(except::FileNotFoundException self, Throwable11 t, Context c) -> FileNotFoundException
-        """
-        this = _coda_except.new_FileNotFoundException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.FileNotFoundException_swiginit(self, _coda_except.new_FileNotFoundException(*args))
 
     def getType(self) -> "std::string":
-        """getType(FileNotFoundException self) -> std::string"""
+        r"""getType(FileNotFoundException self) -> std::string"""
         return _coda_except.FileNotFoundException_getType(self)
 
-FileNotFoundException_swigregister = _coda_except.FileNotFoundException_swigregister
-FileNotFoundException_swigregister(FileNotFoundException)
+# Register FileNotFoundException in _coda_except:
+_coda_except.FileNotFoundException_swigregister(FileNotFoundException)
 
 class BadCastException(Exception):
-    """Proxy of C++ except::BadCastException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, BadCastException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, BadCastException, name)
+    r"""Proxy of C++ except::BadCastException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_BadCastException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(BadCastException self) -> BadCastException
+        __init__(BadCastException self, BadCastException arg2) -> BadCastException
+        __init__(BadCastException self, BadCastException arg2) -> BadCastException
+        __init__(BadCastException self, Context c) -> BadCastException
+        __init__(BadCastException self, std::string const & msg) -> BadCastException
+        __init__(BadCastException self, Throwable t, Context c) -> BadCastException
+        __init__(BadCastException self, Throwable11 t, Context c) -> BadCastException
         """
-        __init__(except::BadCastException self) -> BadCastException
-        __init__(except::BadCastException self, BadCastException arg2) -> BadCastException
-        __init__(except::BadCastException self, BadCastException arg2) -> BadCastException
-        __init__(except::BadCastException self, Context c) -> BadCastException
-        __init__(except::BadCastException self, std::string const & msg) -> BadCastException
-        __init__(except::BadCastException self, Throwable t, Context c) -> BadCastException
-        __init__(except::BadCastException self, Throwable11 t, Context c) -> BadCastException
-        """
-        this = _coda_except.new_BadCastException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.BadCastException_swiginit(self, _coda_except.new_BadCastException(*args))
 
     def getType(self) -> "std::string":
-        """getType(BadCastException self) -> std::string"""
+        r"""getType(BadCastException self) -> std::string"""
         return _coda_except.BadCastException_getType(self)
 
-BadCastException_swigregister = _coda_except.BadCastException_swigregister
-BadCastException_swigregister(BadCastException)
+# Register BadCastException in _coda_except:
+_coda_except.BadCastException_swigregister(BadCastException)
 
 class BadCastException11(Exception11):
-    """Proxy of C++ except::BadCastException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, BadCastException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, BadCastException11, name)
+    r"""Proxy of C++ except::BadCastException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_BadCastException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(BadCastException11 self) -> BadCastException11
+        __init__(BadCastException11 self, BadCastException11 arg2) -> BadCastException11
+        __init__(BadCastException11 self, BadCastException11 arg2) -> BadCastException11
+        __init__(BadCastException11 self, Context c) -> BadCastException11
+        __init__(BadCastException11 self, std::string const & msg) -> BadCastException11
+        __init__(BadCastException11 self, Throwable t, Context c) -> BadCastException11
+        __init__(BadCastException11 self, Throwable11 t, Context c) -> BadCastException11
         """
-        __init__(except::BadCastException11 self) -> BadCastException11
-        __init__(except::BadCastException11 self, BadCastException11 arg2) -> BadCastException11
-        __init__(except::BadCastException11 self, BadCastException11 arg2) -> BadCastException11
-        __init__(except::BadCastException11 self, Context c) -> BadCastException11
-        __init__(except::BadCastException11 self, std::string const & msg) -> BadCastException11
-        __init__(except::BadCastException11 self, Throwable t, Context c) -> BadCastException11
-        __init__(except::BadCastException11 self, Throwable11 t, Context c) -> BadCastException11
-        """
-        this = _coda_except.new_BadCastException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.BadCastException11_swiginit(self, _coda_except.new_BadCastException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(BadCastException11 self) -> std::string"""
+        r"""getType(BadCastException11 self) -> std::string"""
         return _coda_except.BadCastException11_getType(self)
 
-BadCastException11_swigregister = _coda_except.BadCastException11_swigregister
-BadCastException11_swigregister(BadCastException11)
+# Register BadCastException11 in _coda_except:
+_coda_except.BadCastException11_swigregister(BadCastException11)
 
 class InvalidFormatException(Exception):
-    """Proxy of C++ except::InvalidFormatException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFormatException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFormatException, name)
+    r"""Proxy of C++ except::InvalidFormatException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_InvalidFormatException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(InvalidFormatException self) -> InvalidFormatException
+        __init__(InvalidFormatException self, InvalidFormatException arg2) -> InvalidFormatException
+        __init__(InvalidFormatException self, InvalidFormatException arg2) -> InvalidFormatException
+        __init__(InvalidFormatException self, Context c) -> InvalidFormatException
+        __init__(InvalidFormatException self, std::string const & msg) -> InvalidFormatException
+        __init__(InvalidFormatException self, Throwable t, Context c) -> InvalidFormatException
+        __init__(InvalidFormatException self, Throwable11 t, Context c) -> InvalidFormatException
         """
-        __init__(except::InvalidFormatException self) -> InvalidFormatException
-        __init__(except::InvalidFormatException self, InvalidFormatException arg2) -> InvalidFormatException
-        __init__(except::InvalidFormatException self, InvalidFormatException arg2) -> InvalidFormatException
-        __init__(except::InvalidFormatException self, Context c) -> InvalidFormatException
-        __init__(except::InvalidFormatException self, std::string const & msg) -> InvalidFormatException
-        __init__(except::InvalidFormatException self, Throwable t, Context c) -> InvalidFormatException
-        __init__(except::InvalidFormatException self, Throwable11 t, Context c) -> InvalidFormatException
-        """
-        this = _coda_except.new_InvalidFormatException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.InvalidFormatException_swiginit(self, _coda_except.new_InvalidFormatException(*args))
 
     def getType(self) -> "std::string":
-        """getType(InvalidFormatException self) -> std::string"""
+        r"""getType(InvalidFormatException self) -> std::string"""
         return _coda_except.InvalidFormatException_getType(self)
 
-InvalidFormatException_swigregister = _coda_except.InvalidFormatException_swigregister
-InvalidFormatException_swigregister(InvalidFormatException)
+# Register InvalidFormatException in _coda_except:
+_coda_except.InvalidFormatException_swigregister(InvalidFormatException)
 
 class InvalidFormatException11(Exception11):
-    """Proxy of C++ except::InvalidFormatException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFormatException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFormatException11, name)
+    r"""Proxy of C++ except::InvalidFormatException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_InvalidFormatException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(InvalidFormatException11 self) -> InvalidFormatException11
+        __init__(InvalidFormatException11 self, InvalidFormatException11 arg2) -> InvalidFormatException11
+        __init__(InvalidFormatException11 self, InvalidFormatException11 arg2) -> InvalidFormatException11
+        __init__(InvalidFormatException11 self, Context c) -> InvalidFormatException11
+        __init__(InvalidFormatException11 self, std::string const & msg) -> InvalidFormatException11
+        __init__(InvalidFormatException11 self, Throwable t, Context c) -> InvalidFormatException11
+        __init__(InvalidFormatException11 self, Throwable11 t, Context c) -> InvalidFormatException11
         """
-        __init__(except::InvalidFormatException11 self) -> InvalidFormatException11
-        __init__(except::InvalidFormatException11 self, InvalidFormatException11 arg2) -> InvalidFormatException11
-        __init__(except::InvalidFormatException11 self, InvalidFormatException11 arg2) -> InvalidFormatException11
-        __init__(except::InvalidFormatException11 self, Context c) -> InvalidFormatException11
-        __init__(except::InvalidFormatException11 self, std::string const & msg) -> InvalidFormatException11
-        __init__(except::InvalidFormatException11 self, Throwable t, Context c) -> InvalidFormatException11
-        __init__(except::InvalidFormatException11 self, Throwable11 t, Context c) -> InvalidFormatException11
-        """
-        this = _coda_except.new_InvalidFormatException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.InvalidFormatException11_swiginit(self, _coda_except.new_InvalidFormatException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(InvalidFormatException11 self) -> std::string"""
+        r"""getType(InvalidFormatException11 self) -> std::string"""
         return _coda_except.InvalidFormatException11_getType(self)
 
-InvalidFormatException11_swigregister = _coda_except.InvalidFormatException11_swigregister
-InvalidFormatException11_swigregister(InvalidFormatException11)
+# Register InvalidFormatException11 in _coda_except:
+_coda_except.InvalidFormatException11_swigregister(InvalidFormatException11)
 
 class IndexOutOfRangeException(Exception):
-    """Proxy of C++ except::IndexOutOfRangeException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOutOfRangeException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, IndexOutOfRangeException, name)
+    r"""Proxy of C++ except::IndexOutOfRangeException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_IndexOutOfRangeException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(IndexOutOfRangeException self) -> IndexOutOfRangeException
+        __init__(IndexOutOfRangeException self, IndexOutOfRangeException arg2) -> IndexOutOfRangeException
+        __init__(IndexOutOfRangeException self, IndexOutOfRangeException arg2) -> IndexOutOfRangeException
+        __init__(IndexOutOfRangeException self, Context c) -> IndexOutOfRangeException
+        __init__(IndexOutOfRangeException self, std::string const & msg) -> IndexOutOfRangeException
+        __init__(IndexOutOfRangeException self, Throwable t, Context c) -> IndexOutOfRangeException
+        __init__(IndexOutOfRangeException self, Throwable11 t, Context c) -> IndexOutOfRangeException
         """
-        __init__(except::IndexOutOfRangeException self) -> IndexOutOfRangeException
-        __init__(except::IndexOutOfRangeException self, IndexOutOfRangeException arg2) -> IndexOutOfRangeException
-        __init__(except::IndexOutOfRangeException self, IndexOutOfRangeException arg2) -> IndexOutOfRangeException
-        __init__(except::IndexOutOfRangeException self, Context c) -> IndexOutOfRangeException
-        __init__(except::IndexOutOfRangeException self, std::string const & msg) -> IndexOutOfRangeException
-        __init__(except::IndexOutOfRangeException self, Throwable t, Context c) -> IndexOutOfRangeException
-        __init__(except::IndexOutOfRangeException self, Throwable11 t, Context c) -> IndexOutOfRangeException
-        """
-        this = _coda_except.new_IndexOutOfRangeException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.IndexOutOfRangeException_swiginit(self, _coda_except.new_IndexOutOfRangeException(*args))
 
     def getType(self) -> "std::string":
-        """getType(IndexOutOfRangeException self) -> std::string"""
+        r"""getType(IndexOutOfRangeException self) -> std::string"""
         return _coda_except.IndexOutOfRangeException_getType(self)
 
-IndexOutOfRangeException_swigregister = _coda_except.IndexOutOfRangeException_swigregister
-IndexOutOfRangeException_swigregister(IndexOutOfRangeException)
+# Register IndexOutOfRangeException in _coda_except:
+_coda_except.IndexOutOfRangeException_swigregister(IndexOutOfRangeException)
 
 class IndexOutOfRangeException11(Exception11):
-    """Proxy of C++ except::IndexOutOfRangeException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOutOfRangeException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, IndexOutOfRangeException11, name)
+    r"""Proxy of C++ except::IndexOutOfRangeException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_IndexOutOfRangeException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(IndexOutOfRangeException11 self) -> IndexOutOfRangeException11
+        __init__(IndexOutOfRangeException11 self, IndexOutOfRangeException11 arg2) -> IndexOutOfRangeException11
+        __init__(IndexOutOfRangeException11 self, IndexOutOfRangeException11 arg2) -> IndexOutOfRangeException11
+        __init__(IndexOutOfRangeException11 self, Context c) -> IndexOutOfRangeException11
+        __init__(IndexOutOfRangeException11 self, std::string const & msg) -> IndexOutOfRangeException11
+        __init__(IndexOutOfRangeException11 self, Throwable t, Context c) -> IndexOutOfRangeException11
+        __init__(IndexOutOfRangeException11 self, Throwable11 t, Context c) -> IndexOutOfRangeException11
         """
-        __init__(except::IndexOutOfRangeException11 self) -> IndexOutOfRangeException11
-        __init__(except::IndexOutOfRangeException11 self, IndexOutOfRangeException11 arg2) -> IndexOutOfRangeException11
-        __init__(except::IndexOutOfRangeException11 self, IndexOutOfRangeException11 arg2) -> IndexOutOfRangeException11
-        __init__(except::IndexOutOfRangeException11 self, Context c) -> IndexOutOfRangeException11
-        __init__(except::IndexOutOfRangeException11 self, std::string const & msg) -> IndexOutOfRangeException11
-        __init__(except::IndexOutOfRangeException11 self, Throwable t, Context c) -> IndexOutOfRangeException11
-        __init__(except::IndexOutOfRangeException11 self, Throwable11 t, Context c) -> IndexOutOfRangeException11
-        """
-        this = _coda_except.new_IndexOutOfRangeException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.IndexOutOfRangeException11_swiginit(self, _coda_except.new_IndexOutOfRangeException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(IndexOutOfRangeException11 self) -> std::string"""
+        r"""getType(IndexOutOfRangeException11 self) -> std::string"""
         return _coda_except.IndexOutOfRangeException11_getType(self)
 
-IndexOutOfRangeException11_swigregister = _coda_except.IndexOutOfRangeException11_swigregister
-IndexOutOfRangeException11_swigregister(IndexOutOfRangeException11)
+# Register IndexOutOfRangeException11 in _coda_except:
+_coda_except.IndexOutOfRangeException11_swigregister(IndexOutOfRangeException11)
 
 class OutOfMemoryException(Exception):
-    """Proxy of C++ except::OutOfMemoryException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfMemoryException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, OutOfMemoryException, name)
+    r"""Proxy of C++ except::OutOfMemoryException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_OutOfMemoryException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(OutOfMemoryException self) -> OutOfMemoryException
+        __init__(OutOfMemoryException self, OutOfMemoryException arg2) -> OutOfMemoryException
+        __init__(OutOfMemoryException self, OutOfMemoryException arg2) -> OutOfMemoryException
+        __init__(OutOfMemoryException self, Context c) -> OutOfMemoryException
+        __init__(OutOfMemoryException self, std::string const & msg) -> OutOfMemoryException
+        __init__(OutOfMemoryException self, Throwable t, Context c) -> OutOfMemoryException
+        __init__(OutOfMemoryException self, Throwable11 t, Context c) -> OutOfMemoryException
         """
-        __init__(except::OutOfMemoryException self) -> OutOfMemoryException
-        __init__(except::OutOfMemoryException self, OutOfMemoryException arg2) -> OutOfMemoryException
-        __init__(except::OutOfMemoryException self, OutOfMemoryException arg2) -> OutOfMemoryException
-        __init__(except::OutOfMemoryException self, Context c) -> OutOfMemoryException
-        __init__(except::OutOfMemoryException self, std::string const & msg) -> OutOfMemoryException
-        __init__(except::OutOfMemoryException self, Throwable t, Context c) -> OutOfMemoryException
-        __init__(except::OutOfMemoryException self, Throwable11 t, Context c) -> OutOfMemoryException
-        """
-        this = _coda_except.new_OutOfMemoryException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.OutOfMemoryException_swiginit(self, _coda_except.new_OutOfMemoryException(*args))
 
     def getType(self) -> "std::string":
-        """getType(OutOfMemoryException self) -> std::string"""
+        r"""getType(OutOfMemoryException self) -> std::string"""
         return _coda_except.OutOfMemoryException_getType(self)
 
-OutOfMemoryException_swigregister = _coda_except.OutOfMemoryException_swigregister
-OutOfMemoryException_swigregister(OutOfMemoryException)
+# Register OutOfMemoryException in _coda_except:
+_coda_except.OutOfMemoryException_swigregister(OutOfMemoryException)
 
 class OutOfMemoryException11(Exception11):
-    """Proxy of C++ except::OutOfMemoryException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfMemoryException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, OutOfMemoryException11, name)
+    r"""Proxy of C++ except::OutOfMemoryException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_OutOfMemoryException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(OutOfMemoryException11 self) -> OutOfMemoryException11
+        __init__(OutOfMemoryException11 self, OutOfMemoryException11 arg2) -> OutOfMemoryException11
+        __init__(OutOfMemoryException11 self, OutOfMemoryException11 arg2) -> OutOfMemoryException11
+        __init__(OutOfMemoryException11 self, Context c) -> OutOfMemoryException11
+        __init__(OutOfMemoryException11 self, std::string const & msg) -> OutOfMemoryException11
+        __init__(OutOfMemoryException11 self, Throwable t, Context c) -> OutOfMemoryException11
+        __init__(OutOfMemoryException11 self, Throwable11 t, Context c) -> OutOfMemoryException11
         """
-        __init__(except::OutOfMemoryException11 self) -> OutOfMemoryException11
-        __init__(except::OutOfMemoryException11 self, OutOfMemoryException11 arg2) -> OutOfMemoryException11
-        __init__(except::OutOfMemoryException11 self, OutOfMemoryException11 arg2) -> OutOfMemoryException11
-        __init__(except::OutOfMemoryException11 self, Context c) -> OutOfMemoryException11
-        __init__(except::OutOfMemoryException11 self, std::string const & msg) -> OutOfMemoryException11
-        __init__(except::OutOfMemoryException11 self, Throwable t, Context c) -> OutOfMemoryException11
-        __init__(except::OutOfMemoryException11 self, Throwable11 t, Context c) -> OutOfMemoryException11
-        """
-        this = _coda_except.new_OutOfMemoryException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.OutOfMemoryException11_swiginit(self, _coda_except.new_OutOfMemoryException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(OutOfMemoryException11 self) -> std::string"""
+        r"""getType(OutOfMemoryException11 self) -> std::string"""
         return _coda_except.OutOfMemoryException11_getType(self)
 
-OutOfMemoryException11_swigregister = _coda_except.OutOfMemoryException11_swigregister
-OutOfMemoryException11_swigregister(OutOfMemoryException11)
+# Register OutOfMemoryException11 in _coda_except:
+_coda_except.OutOfMemoryException11_swigregister(OutOfMemoryException11)
 
 class NullPointerReferenceException(Exception):
-    """Proxy of C++ except::NullPointerReferenceException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NullPointerReferenceException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NullPointerReferenceException, name)
+    r"""Proxy of C++ except::NullPointerReferenceException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_NullPointerReferenceException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(NullPointerReferenceException self) -> NullPointerReferenceException
+        __init__(NullPointerReferenceException self, NullPointerReferenceException arg2) -> NullPointerReferenceException
+        __init__(NullPointerReferenceException self, NullPointerReferenceException arg2) -> NullPointerReferenceException
+        __init__(NullPointerReferenceException self, Context c) -> NullPointerReferenceException
+        __init__(NullPointerReferenceException self, std::string const & msg) -> NullPointerReferenceException
+        __init__(NullPointerReferenceException self, Throwable t, Context c) -> NullPointerReferenceException
+        __init__(NullPointerReferenceException self, Throwable11 t, Context c) -> NullPointerReferenceException
         """
-        __init__(except::NullPointerReferenceException self) -> NullPointerReferenceException
-        __init__(except::NullPointerReferenceException self, NullPointerReferenceException arg2) -> NullPointerReferenceException
-        __init__(except::NullPointerReferenceException self, NullPointerReferenceException arg2) -> NullPointerReferenceException
-        __init__(except::NullPointerReferenceException self, Context c) -> NullPointerReferenceException
-        __init__(except::NullPointerReferenceException self, std::string const & msg) -> NullPointerReferenceException
-        __init__(except::NullPointerReferenceException self, Throwable t, Context c) -> NullPointerReferenceException
-        __init__(except::NullPointerReferenceException self, Throwable11 t, Context c) -> NullPointerReferenceException
-        """
-        this = _coda_except.new_NullPointerReferenceException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.NullPointerReferenceException_swiginit(self, _coda_except.new_NullPointerReferenceException(*args))
 
     def getType(self) -> "std::string":
-        """getType(NullPointerReferenceException self) -> std::string"""
+        r"""getType(NullPointerReferenceException self) -> std::string"""
         return _coda_except.NullPointerReferenceException_getType(self)
 
-NullPointerReferenceException_swigregister = _coda_except.NullPointerReferenceException_swigregister
-NullPointerReferenceException_swigregister(NullPointerReferenceException)
+# Register NullPointerReferenceException in _coda_except:
+_coda_except.NullPointerReferenceException_swigregister(NullPointerReferenceException)
 
 class NullPointerReferenceException11(Exception11):
-    """Proxy of C++ except::NullPointerReferenceException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NullPointerReferenceException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NullPointerReferenceException11, name)
+    r"""Proxy of C++ except::NullPointerReferenceException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_NullPointerReferenceException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(NullPointerReferenceException11 self) -> NullPointerReferenceException11
+        __init__(NullPointerReferenceException11 self, NullPointerReferenceException11 arg2) -> NullPointerReferenceException11
+        __init__(NullPointerReferenceException11 self, NullPointerReferenceException11 arg2) -> NullPointerReferenceException11
+        __init__(NullPointerReferenceException11 self, Context c) -> NullPointerReferenceException11
+        __init__(NullPointerReferenceException11 self, std::string const & msg) -> NullPointerReferenceException11
+        __init__(NullPointerReferenceException11 self, Throwable t, Context c) -> NullPointerReferenceException11
+        __init__(NullPointerReferenceException11 self, Throwable11 t, Context c) -> NullPointerReferenceException11
         """
-        __init__(except::NullPointerReferenceException11 self) -> NullPointerReferenceException11
-        __init__(except::NullPointerReferenceException11 self, NullPointerReferenceException11 arg2) -> NullPointerReferenceException11
-        __init__(except::NullPointerReferenceException11 self, NullPointerReferenceException11 arg2) -> NullPointerReferenceException11
-        __init__(except::NullPointerReferenceException11 self, Context c) -> NullPointerReferenceException11
-        __init__(except::NullPointerReferenceException11 self, std::string const & msg) -> NullPointerReferenceException11
-        __init__(except::NullPointerReferenceException11 self, Throwable t, Context c) -> NullPointerReferenceException11
-        __init__(except::NullPointerReferenceException11 self, Throwable11 t, Context c) -> NullPointerReferenceException11
-        """
-        this = _coda_except.new_NullPointerReferenceException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.NullPointerReferenceException11_swiginit(self, _coda_except.new_NullPointerReferenceException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(NullPointerReferenceException11 self) -> std::string"""
+        r"""getType(NullPointerReferenceException11 self) -> std::string"""
         return _coda_except.NullPointerReferenceException11_getType(self)
 
-NullPointerReferenceException11_swigregister = _coda_except.NullPointerReferenceException11_swigregister
-NullPointerReferenceException11_swigregister(NullPointerReferenceException11)
+# Register NullPointerReferenceException11 in _coda_except:
+_coda_except.NullPointerReferenceException11_swigregister(NullPointerReferenceException11)
 
 class NoSuchKeyException(Exception):
-    """Proxy of C++ except::NoSuchKeyException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchKeyException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchKeyException, name)
+    r"""Proxy of C++ except::NoSuchKeyException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_NoSuchKeyException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(NoSuchKeyException self) -> NoSuchKeyException
+        __init__(NoSuchKeyException self, NoSuchKeyException arg2) -> NoSuchKeyException
+        __init__(NoSuchKeyException self, NoSuchKeyException arg2) -> NoSuchKeyException
+        __init__(NoSuchKeyException self, Context c) -> NoSuchKeyException
+        __init__(NoSuchKeyException self, std::string const & msg) -> NoSuchKeyException
+        __init__(NoSuchKeyException self, Throwable t, Context c) -> NoSuchKeyException
+        __init__(NoSuchKeyException self, Throwable11 t, Context c) -> NoSuchKeyException
         """
-        __init__(except::NoSuchKeyException self) -> NoSuchKeyException
-        __init__(except::NoSuchKeyException self, NoSuchKeyException arg2) -> NoSuchKeyException
-        __init__(except::NoSuchKeyException self, NoSuchKeyException arg2) -> NoSuchKeyException
-        __init__(except::NoSuchKeyException self, Context c) -> NoSuchKeyException
-        __init__(except::NoSuchKeyException self, std::string const & msg) -> NoSuchKeyException
-        __init__(except::NoSuchKeyException self, Throwable t, Context c) -> NoSuchKeyException
-        __init__(except::NoSuchKeyException self, Throwable11 t, Context c) -> NoSuchKeyException
-        """
-        this = _coda_except.new_NoSuchKeyException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.NoSuchKeyException_swiginit(self, _coda_except.new_NoSuchKeyException(*args))
 
     def getType(self) -> "std::string":
-        """getType(NoSuchKeyException self) -> std::string"""
+        r"""getType(NoSuchKeyException self) -> std::string"""
         return _coda_except.NoSuchKeyException_getType(self)
 
-NoSuchKeyException_swigregister = _coda_except.NoSuchKeyException_swigregister
-NoSuchKeyException_swigregister(NoSuchKeyException)
+# Register NoSuchKeyException in _coda_except:
+_coda_except.NoSuchKeyException_swigregister(NoSuchKeyException)
 
 class NoSuchKeyException11(Exception11):
-    """Proxy of C++ except::NoSuchKeyException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchKeyException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchKeyException11, name)
+    r"""Proxy of C++ except::NoSuchKeyException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_NoSuchKeyException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(NoSuchKeyException11 self) -> NoSuchKeyException11
+        __init__(NoSuchKeyException11 self, NoSuchKeyException11 arg2) -> NoSuchKeyException11
+        __init__(NoSuchKeyException11 self, NoSuchKeyException11 arg2) -> NoSuchKeyException11
+        __init__(NoSuchKeyException11 self, Context c) -> NoSuchKeyException11
+        __init__(NoSuchKeyException11 self, std::string const & msg) -> NoSuchKeyException11
+        __init__(NoSuchKeyException11 self, Throwable t, Context c) -> NoSuchKeyException11
+        __init__(NoSuchKeyException11 self, Throwable11 t, Context c) -> NoSuchKeyException11
         """
-        __init__(except::NoSuchKeyException11 self) -> NoSuchKeyException11
-        __init__(except::NoSuchKeyException11 self, NoSuchKeyException11 arg2) -> NoSuchKeyException11
-        __init__(except::NoSuchKeyException11 self, NoSuchKeyException11 arg2) -> NoSuchKeyException11
-        __init__(except::NoSuchKeyException11 self, Context c) -> NoSuchKeyException11
-        __init__(except::NoSuchKeyException11 self, std::string const & msg) -> NoSuchKeyException11
-        __init__(except::NoSuchKeyException11 self, Throwable t, Context c) -> NoSuchKeyException11
-        __init__(except::NoSuchKeyException11 self, Throwable11 t, Context c) -> NoSuchKeyException11
-        """
-        this = _coda_except.new_NoSuchKeyException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.NoSuchKeyException11_swiginit(self, _coda_except.new_NoSuchKeyException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(NoSuchKeyException11 self) -> std::string"""
+        r"""getType(NoSuchKeyException11 self) -> std::string"""
         return _coda_except.NoSuchKeyException11_getType(self)
 
-NoSuchKeyException11_swigregister = _coda_except.NoSuchKeyException11_swigregister
-NoSuchKeyException11_swigregister(NoSuchKeyException11)
+# Register NoSuchKeyException11 in _coda_except:
+_coda_except.NoSuchKeyException11_swigregister(NoSuchKeyException11)
 
 class NoSuchReferenceException(Exception):
-    """Proxy of C++ except::NoSuchReferenceException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchReferenceException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchReferenceException, name)
+    r"""Proxy of C++ except::NoSuchReferenceException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_NoSuchReferenceException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(NoSuchReferenceException self) -> NoSuchReferenceException
+        __init__(NoSuchReferenceException self, NoSuchReferenceException arg2) -> NoSuchReferenceException
+        __init__(NoSuchReferenceException self, NoSuchReferenceException arg2) -> NoSuchReferenceException
+        __init__(NoSuchReferenceException self, Context c) -> NoSuchReferenceException
+        __init__(NoSuchReferenceException self, std::string const & msg) -> NoSuchReferenceException
+        __init__(NoSuchReferenceException self, Throwable t, Context c) -> NoSuchReferenceException
+        __init__(NoSuchReferenceException self, Throwable11 t, Context c) -> NoSuchReferenceException
         """
-        __init__(except::NoSuchReferenceException self) -> NoSuchReferenceException
-        __init__(except::NoSuchReferenceException self, NoSuchReferenceException arg2) -> NoSuchReferenceException
-        __init__(except::NoSuchReferenceException self, NoSuchReferenceException arg2) -> NoSuchReferenceException
-        __init__(except::NoSuchReferenceException self, Context c) -> NoSuchReferenceException
-        __init__(except::NoSuchReferenceException self, std::string const & msg) -> NoSuchReferenceException
-        __init__(except::NoSuchReferenceException self, Throwable t, Context c) -> NoSuchReferenceException
-        __init__(except::NoSuchReferenceException self, Throwable11 t, Context c) -> NoSuchReferenceException
-        """
-        this = _coda_except.new_NoSuchReferenceException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.NoSuchReferenceException_swiginit(self, _coda_except.new_NoSuchReferenceException(*args))
 
     def getType(self) -> "std::string":
-        """getType(NoSuchReferenceException self) -> std::string"""
+        r"""getType(NoSuchReferenceException self) -> std::string"""
         return _coda_except.NoSuchReferenceException_getType(self)
 
-NoSuchReferenceException_swigregister = _coda_except.NoSuchReferenceException_swigregister
-NoSuchReferenceException_swigregister(NoSuchReferenceException)
+# Register NoSuchReferenceException in _coda_except:
+_coda_except.NoSuchReferenceException_swigregister(NoSuchReferenceException)
 
 class NoSuchReferenceException11(Exception11):
-    """Proxy of C++ except::NoSuchReferenceException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchReferenceException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchReferenceException11, name)
+    r"""Proxy of C++ except::NoSuchReferenceException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_NoSuchReferenceException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(NoSuchReferenceException11 self) -> NoSuchReferenceException11
+        __init__(NoSuchReferenceException11 self, NoSuchReferenceException11 arg2) -> NoSuchReferenceException11
+        __init__(NoSuchReferenceException11 self, NoSuchReferenceException11 arg2) -> NoSuchReferenceException11
+        __init__(NoSuchReferenceException11 self, Context c) -> NoSuchReferenceException11
+        __init__(NoSuchReferenceException11 self, std::string const & msg) -> NoSuchReferenceException11
+        __init__(NoSuchReferenceException11 self, Throwable t, Context c) -> NoSuchReferenceException11
+        __init__(NoSuchReferenceException11 self, Throwable11 t, Context c) -> NoSuchReferenceException11
         """
-        __init__(except::NoSuchReferenceException11 self) -> NoSuchReferenceException11
-        __init__(except::NoSuchReferenceException11 self, NoSuchReferenceException11 arg2) -> NoSuchReferenceException11
-        __init__(except::NoSuchReferenceException11 self, NoSuchReferenceException11 arg2) -> NoSuchReferenceException11
-        __init__(except::NoSuchReferenceException11 self, Context c) -> NoSuchReferenceException11
-        __init__(except::NoSuchReferenceException11 self, std::string const & msg) -> NoSuchReferenceException11
-        __init__(except::NoSuchReferenceException11 self, Throwable t, Context c) -> NoSuchReferenceException11
-        __init__(except::NoSuchReferenceException11 self, Throwable11 t, Context c) -> NoSuchReferenceException11
-        """
-        this = _coda_except.new_NoSuchReferenceException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.NoSuchReferenceException11_swiginit(self, _coda_except.new_NoSuchReferenceException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(NoSuchReferenceException11 self) -> std::string"""
+        r"""getType(NoSuchReferenceException11 self) -> std::string"""
         return _coda_except.NoSuchReferenceException11_getType(self)
 
-NoSuchReferenceException11_swigregister = _coda_except.NoSuchReferenceException11_swigregister
-NoSuchReferenceException11_swigregister(NoSuchReferenceException11)
+# Register NoSuchReferenceException11 in _coda_except:
+_coda_except.NoSuchReferenceException11_swigregister(NoSuchReferenceException11)
 
 class KeyAlreadyExistsException(Exception):
-    """Proxy of C++ except::KeyAlreadyExistsException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyAlreadyExistsException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, KeyAlreadyExistsException, name)
+    r"""Proxy of C++ except::KeyAlreadyExistsException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_KeyAlreadyExistsException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(KeyAlreadyExistsException self) -> KeyAlreadyExistsException
+        __init__(KeyAlreadyExistsException self, KeyAlreadyExistsException arg2) -> KeyAlreadyExistsException
+        __init__(KeyAlreadyExistsException self, KeyAlreadyExistsException arg2) -> KeyAlreadyExistsException
+        __init__(KeyAlreadyExistsException self, Context c) -> KeyAlreadyExistsException
+        __init__(KeyAlreadyExistsException self, std::string const & msg) -> KeyAlreadyExistsException
+        __init__(KeyAlreadyExistsException self, Throwable t, Context c) -> KeyAlreadyExistsException
+        __init__(KeyAlreadyExistsException self, Throwable11 t, Context c) -> KeyAlreadyExistsException
         """
-        __init__(except::KeyAlreadyExistsException self) -> KeyAlreadyExistsException
-        __init__(except::KeyAlreadyExistsException self, KeyAlreadyExistsException arg2) -> KeyAlreadyExistsException
-        __init__(except::KeyAlreadyExistsException self, KeyAlreadyExistsException arg2) -> KeyAlreadyExistsException
-        __init__(except::KeyAlreadyExistsException self, Context c) -> KeyAlreadyExistsException
-        __init__(except::KeyAlreadyExistsException self, std::string const & msg) -> KeyAlreadyExistsException
-        __init__(except::KeyAlreadyExistsException self, Throwable t, Context c) -> KeyAlreadyExistsException
-        __init__(except::KeyAlreadyExistsException self, Throwable11 t, Context c) -> KeyAlreadyExistsException
-        """
-        this = _coda_except.new_KeyAlreadyExistsException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.KeyAlreadyExistsException_swiginit(self, _coda_except.new_KeyAlreadyExistsException(*args))
 
     def getType(self) -> "std::string":
-        """getType(KeyAlreadyExistsException self) -> std::string"""
+        r"""getType(KeyAlreadyExistsException self) -> std::string"""
         return _coda_except.KeyAlreadyExistsException_getType(self)
 
-KeyAlreadyExistsException_swigregister = _coda_except.KeyAlreadyExistsException_swigregister
-KeyAlreadyExistsException_swigregister(KeyAlreadyExistsException)
+# Register KeyAlreadyExistsException in _coda_except:
+_coda_except.KeyAlreadyExistsException_swigregister(KeyAlreadyExistsException)
 
 class KeyAlreadyExistsException11(Exception11):
-    """Proxy of C++ except::KeyAlreadyExistsException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyAlreadyExistsException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, KeyAlreadyExistsException11, name)
+    r"""Proxy of C++ except::KeyAlreadyExistsException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_KeyAlreadyExistsException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(KeyAlreadyExistsException11 self) -> KeyAlreadyExistsException11
+        __init__(KeyAlreadyExistsException11 self, KeyAlreadyExistsException11 arg2) -> KeyAlreadyExistsException11
+        __init__(KeyAlreadyExistsException11 self, KeyAlreadyExistsException11 arg2) -> KeyAlreadyExistsException11
+        __init__(KeyAlreadyExistsException11 self, Context c) -> KeyAlreadyExistsException11
+        __init__(KeyAlreadyExistsException11 self, std::string const & msg) -> KeyAlreadyExistsException11
+        __init__(KeyAlreadyExistsException11 self, Throwable t, Context c) -> KeyAlreadyExistsException11
+        __init__(KeyAlreadyExistsException11 self, Throwable11 t, Context c) -> KeyAlreadyExistsException11
         """
-        __init__(except::KeyAlreadyExistsException11 self) -> KeyAlreadyExistsException11
-        __init__(except::KeyAlreadyExistsException11 self, KeyAlreadyExistsException11 arg2) -> KeyAlreadyExistsException11
-        __init__(except::KeyAlreadyExistsException11 self, KeyAlreadyExistsException11 arg2) -> KeyAlreadyExistsException11
-        __init__(except::KeyAlreadyExistsException11 self, Context c) -> KeyAlreadyExistsException11
-        __init__(except::KeyAlreadyExistsException11 self, std::string const & msg) -> KeyAlreadyExistsException11
-        __init__(except::KeyAlreadyExistsException11 self, Throwable t, Context c) -> KeyAlreadyExistsException11
-        __init__(except::KeyAlreadyExistsException11 self, Throwable11 t, Context c) -> KeyAlreadyExistsException11
-        """
-        this = _coda_except.new_KeyAlreadyExistsException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.KeyAlreadyExistsException11_swiginit(self, _coda_except.new_KeyAlreadyExistsException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(KeyAlreadyExistsException11 self) -> std::string"""
+        r"""getType(KeyAlreadyExistsException11 self) -> std::string"""
         return _coda_except.KeyAlreadyExistsException11_getType(self)
 
-KeyAlreadyExistsException11_swigregister = _coda_except.KeyAlreadyExistsException11_swigregister
-KeyAlreadyExistsException11_swigregister(KeyAlreadyExistsException11)
+# Register KeyAlreadyExistsException11 in _coda_except:
+_coda_except.KeyAlreadyExistsException11_swigregister(KeyAlreadyExistsException11)
 
 class NotImplementedException(Exception):
-    """Proxy of C++ except::NotImplementedException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NotImplementedException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NotImplementedException, name)
+    r"""Proxy of C++ except::NotImplementedException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_NotImplementedException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(NotImplementedException self) -> NotImplementedException
+        __init__(NotImplementedException self, NotImplementedException arg2) -> NotImplementedException
+        __init__(NotImplementedException self, NotImplementedException arg2) -> NotImplementedException
+        __init__(NotImplementedException self, Context c) -> NotImplementedException
+        __init__(NotImplementedException self, std::string const & msg) -> NotImplementedException
+        __init__(NotImplementedException self, Throwable t, Context c) -> NotImplementedException
+        __init__(NotImplementedException self, Throwable11 t, Context c) -> NotImplementedException
         """
-        __init__(except::NotImplementedException self) -> NotImplementedException
-        __init__(except::NotImplementedException self, NotImplementedException arg2) -> NotImplementedException
-        __init__(except::NotImplementedException self, NotImplementedException arg2) -> NotImplementedException
-        __init__(except::NotImplementedException self, Context c) -> NotImplementedException
-        __init__(except::NotImplementedException self, std::string const & msg) -> NotImplementedException
-        __init__(except::NotImplementedException self, Throwable t, Context c) -> NotImplementedException
-        __init__(except::NotImplementedException self, Throwable11 t, Context c) -> NotImplementedException
-        """
-        this = _coda_except.new_NotImplementedException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.NotImplementedException_swiginit(self, _coda_except.new_NotImplementedException(*args))
 
     def getType(self) -> "std::string":
-        """getType(NotImplementedException self) -> std::string"""
+        r"""getType(NotImplementedException self) -> std::string"""
         return _coda_except.NotImplementedException_getType(self)
 
-NotImplementedException_swigregister = _coda_except.NotImplementedException_swigregister
-NotImplementedException_swigregister(NotImplementedException)
+# Register NotImplementedException in _coda_except:
+_coda_except.NotImplementedException_swigregister(NotImplementedException)
 
 class NotImplementedException11(Exception11):
-    """Proxy of C++ except::NotImplementedException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NotImplementedException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NotImplementedException11, name)
+    r"""Proxy of C++ except::NotImplementedException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_NotImplementedException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(NotImplementedException11 self) -> NotImplementedException11
+        __init__(NotImplementedException11 self, NotImplementedException11 arg2) -> NotImplementedException11
+        __init__(NotImplementedException11 self, NotImplementedException11 arg2) -> NotImplementedException11
+        __init__(NotImplementedException11 self, Context c) -> NotImplementedException11
+        __init__(NotImplementedException11 self, std::string const & msg) -> NotImplementedException11
+        __init__(NotImplementedException11 self, Throwable t, Context c) -> NotImplementedException11
+        __init__(NotImplementedException11 self, Throwable11 t, Context c) -> NotImplementedException11
         """
-        __init__(except::NotImplementedException11 self) -> NotImplementedException11
-        __init__(except::NotImplementedException11 self, NotImplementedException11 arg2) -> NotImplementedException11
-        __init__(except::NotImplementedException11 self, NotImplementedException11 arg2) -> NotImplementedException11
-        __init__(except::NotImplementedException11 self, Context c) -> NotImplementedException11
-        __init__(except::NotImplementedException11 self, std::string const & msg) -> NotImplementedException11
-        __init__(except::NotImplementedException11 self, Throwable t, Context c) -> NotImplementedException11
-        __init__(except::NotImplementedException11 self, Throwable11 t, Context c) -> NotImplementedException11
-        """
-        this = _coda_except.new_NotImplementedException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.NotImplementedException11_swiginit(self, _coda_except.new_NotImplementedException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(NotImplementedException11 self) -> std::string"""
+        r"""getType(NotImplementedException11 self) -> std::string"""
         return _coda_except.NotImplementedException11_getType(self)
 
-NotImplementedException11_swigregister = _coda_except.NotImplementedException11_swigregister
-NotImplementedException11_swigregister(NotImplementedException11)
+# Register NotImplementedException11 in _coda_except:
+_coda_except.NotImplementedException11_swigregister(NotImplementedException11)
 
 class InvalidArgumentException(Exception):
-    """Proxy of C++ except::InvalidArgumentException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidArgumentException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, InvalidArgumentException, name)
+    r"""Proxy of C++ except::InvalidArgumentException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_InvalidArgumentException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(InvalidArgumentException self) -> InvalidArgumentException
+        __init__(InvalidArgumentException self, InvalidArgumentException arg2) -> InvalidArgumentException
+        __init__(InvalidArgumentException self, InvalidArgumentException arg2) -> InvalidArgumentException
+        __init__(InvalidArgumentException self, Context c) -> InvalidArgumentException
+        __init__(InvalidArgumentException self, std::string const & msg) -> InvalidArgumentException
+        __init__(InvalidArgumentException self, Throwable t, Context c) -> InvalidArgumentException
+        __init__(InvalidArgumentException self, Throwable11 t, Context c) -> InvalidArgumentException
         """
-        __init__(except::InvalidArgumentException self) -> InvalidArgumentException
-        __init__(except::InvalidArgumentException self, InvalidArgumentException arg2) -> InvalidArgumentException
-        __init__(except::InvalidArgumentException self, InvalidArgumentException arg2) -> InvalidArgumentException
-        __init__(except::InvalidArgumentException self, Context c) -> InvalidArgumentException
-        __init__(except::InvalidArgumentException self, std::string const & msg) -> InvalidArgumentException
-        __init__(except::InvalidArgumentException self, Throwable t, Context c) -> InvalidArgumentException
-        __init__(except::InvalidArgumentException self, Throwable11 t, Context c) -> InvalidArgumentException
-        """
-        this = _coda_except.new_InvalidArgumentException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.InvalidArgumentException_swiginit(self, _coda_except.new_InvalidArgumentException(*args))
 
     def getType(self) -> "std::string":
-        """getType(InvalidArgumentException self) -> std::string"""
+        r"""getType(InvalidArgumentException self) -> std::string"""
         return _coda_except.InvalidArgumentException_getType(self)
 
-InvalidArgumentException_swigregister = _coda_except.InvalidArgumentException_swigregister
-InvalidArgumentException_swigregister(InvalidArgumentException)
+# Register InvalidArgumentException in _coda_except:
+_coda_except.InvalidArgumentException_swigregister(InvalidArgumentException)
 
 class InvalidArgumentException11(Exception11):
-    """Proxy of C++ except::InvalidArgumentException11 class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Exception11]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidArgumentException11, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Exception11]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, InvalidArgumentException11, name)
+    r"""Proxy of C++ except::InvalidArgumentException11 class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_InvalidArgumentException11
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(InvalidArgumentException11 self) -> InvalidArgumentException11
+        __init__(InvalidArgumentException11 self, InvalidArgumentException11 arg2) -> InvalidArgumentException11
+        __init__(InvalidArgumentException11 self, InvalidArgumentException11 arg2) -> InvalidArgumentException11
+        __init__(InvalidArgumentException11 self, Context c) -> InvalidArgumentException11
+        __init__(InvalidArgumentException11 self, std::string const & msg) -> InvalidArgumentException11
+        __init__(InvalidArgumentException11 self, Throwable t, Context c) -> InvalidArgumentException11
+        __init__(InvalidArgumentException11 self, Throwable11 t, Context c) -> InvalidArgumentException11
         """
-        __init__(except::InvalidArgumentException11 self) -> InvalidArgumentException11
-        __init__(except::InvalidArgumentException11 self, InvalidArgumentException11 arg2) -> InvalidArgumentException11
-        __init__(except::InvalidArgumentException11 self, InvalidArgumentException11 arg2) -> InvalidArgumentException11
-        __init__(except::InvalidArgumentException11 self, Context c) -> InvalidArgumentException11
-        __init__(except::InvalidArgumentException11 self, std::string const & msg) -> InvalidArgumentException11
-        __init__(except::InvalidArgumentException11 self, Throwable t, Context c) -> InvalidArgumentException11
-        __init__(except::InvalidArgumentException11 self, Throwable11 t, Context c) -> InvalidArgumentException11
-        """
-        this = _coda_except.new_InvalidArgumentException11(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.InvalidArgumentException11_swiginit(self, _coda_except.new_InvalidArgumentException11(*args))
 
     def getType(self) -> "std::string":
-        """getType(InvalidArgumentException11 self) -> std::string"""
+        r"""getType(InvalidArgumentException11 self) -> std::string"""
         return _coda_except.InvalidArgumentException11_getType(self)
 
-InvalidArgumentException11_swigregister = _coda_except.InvalidArgumentException11_swigregister
-InvalidArgumentException11_swigregister(InvalidArgumentException11)
+# Register InvalidArgumentException11 in _coda_except:
+_coda_except.InvalidArgumentException11_swigregister(InvalidArgumentException11)
 
 class SerializationException(IOException):
-    """Proxy of C++ except::SerializationException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [IOException]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, SerializationException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [IOException]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, SerializationException, name)
+    r"""Proxy of C++ except::SerializationException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_SerializationException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(SerializationException self) -> SerializationException
+        __init__(SerializationException self, SerializationException arg2) -> SerializationException
+        __init__(SerializationException self, SerializationException arg2) -> SerializationException
+        __init__(SerializationException self, Context c) -> SerializationException
+        __init__(SerializationException self, std::string const & msg) -> SerializationException
+        __init__(SerializationException self, Throwable t, Context c) -> SerializationException
+        __init__(SerializationException self, Throwable11 t, Context c) -> SerializationException
         """
-        __init__(except::SerializationException self) -> SerializationException
-        __init__(except::SerializationException self, SerializationException arg2) -> SerializationException
-        __init__(except::SerializationException self, SerializationException arg2) -> SerializationException
-        __init__(except::SerializationException self, Context c) -> SerializationException
-        __init__(except::SerializationException self, std::string const & msg) -> SerializationException
-        __init__(except::SerializationException self, Throwable t, Context c) -> SerializationException
-        __init__(except::SerializationException self, Throwable11 t, Context c) -> SerializationException
-        """
-        this = _coda_except.new_SerializationException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.SerializationException_swiginit(self, _coda_except.new_SerializationException(*args))
 
     def getType(self) -> "std::string":
-        """getType(SerializationException self) -> std::string"""
+        r"""getType(SerializationException self) -> std::string"""
         return _coda_except.SerializationException_getType(self)
 
-SerializationException_swigregister = _coda_except.SerializationException_swigregister
-SerializationException_swigregister(SerializationException)
+# Register SerializationException in _coda_except:
+_coda_except.SerializationException_swigregister(SerializationException)
 
 class ParseException(IOException):
-    """Proxy of C++ except::ParseException class."""
-
-    __swig_setmethods__ = {}
-    for _s in [IOException]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, ParseException, name, value)
-    __swig_getmethods__ = {}
-    for _s in [IOException]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, ParseException, name)
+    r"""Proxy of C++ except::ParseException class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_except.delete_ParseException
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(ParseException self) -> ParseException
+        __init__(ParseException self, ParseException arg2) -> ParseException
+        __init__(ParseException self, ParseException arg2) -> ParseException
+        __init__(ParseException self, Context c) -> ParseException
+        __init__(ParseException self, std::string const & msg) -> ParseException
+        __init__(ParseException self, Throwable t, Context c) -> ParseException
+        __init__(ParseException self, Throwable11 t, Context c) -> ParseException
         """
-        __init__(except::ParseException self) -> ParseException
-        __init__(except::ParseException self, ParseException arg2) -> ParseException
-        __init__(except::ParseException self, ParseException arg2) -> ParseException
-        __init__(except::ParseException self, Context c) -> ParseException
-        __init__(except::ParseException self, std::string const & msg) -> ParseException
-        __init__(except::ParseException self, Throwable t, Context c) -> ParseException
-        __init__(except::ParseException self, Throwable11 t, Context c) -> ParseException
-        """
-        this = _coda_except.new_ParseException(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_except.ParseException_swiginit(self, _coda_except.new_ParseException(*args))
 
     def getType(self) -> "std::string":
-        """getType(ParseException self) -> std::string"""
+        r"""getType(ParseException self) -> std::string"""
         return _coda_except.ParseException_getType(self)
 
-ParseException_swigregister = _coda_except.ParseException_swigregister
-ParseException_swigregister(ParseException)
+# Register ParseException in _coda_except:
+_coda_except.ParseException_swigregister(ParseException)
 
-# This file is compatible with both classic and new-style classes.
 
 
diff --git a/externals/coda-oss/modules/python/io/source/generated/coda_io.py b/externals/coda-oss/modules/python/io/source/generated/coda_io.py
index ae14c680..78c216f0 100644
--- a/externals/coda-oss/modules/python/io/source/generated/coda_io.py
+++ b/externals/coda-oss/modules/python/io/source/generated/coda_io.py
@@ -1,169 +1,120 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_coda_io')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_coda_io')
-    _coda_io = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_coda_io', [dirname(__file__)])
-        except ImportError:
-            import _coda_io
-            return _coda_io
-        try:
-            _mod = imp.load_module('_coda_io', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _coda_io = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _coda_io
 else:
     import _coda_io
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
 
-class InputStream(_object):
-    """Proxy of C++ io::InputStream class."""
+class InputStream(object):
+    r"""Proxy of C++ io::InputStream class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStream, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, InputStream, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     IS_EOF = _coda_io.InputStream_IS_EOF
+    
     IS_END = _coda_io.InputStream_IS_END
+    
     DEFAULT_CHUNK_SIZE = _coda_io.InputStream_DEFAULT_CHUNK_SIZE
+    
     __swig_destroy__ = _coda_io.delete_InputStream
-    __del__ = lambda self: None
 
     def available(self) -> "sys::Off_T":
-        """available(InputStream self) -> sys::Off_T"""
+        r"""available(InputStream self) -> sys::Off_T"""
         return _coda_io.InputStream_available(self)
 
-
-    def read(self, buffer: 'void *', len: 'size_t', verifyFullRead: 'bool'=False) -> "sys::SSize_T":
-        """
-        read(InputStream self, void * buffer, size_t len, bool verifyFullRead=False) -> sys::SSize_T
-        read(InputStream self, void * buffer, size_t len) -> sys::SSize_T
-        """
+    def read(self, buffer: "void *", len: "size_t", verifyFullRead: "bool"=False) -> "sys::SSize_T":
+        r"""read(InputStream self, void * buffer, size_t len, bool verifyFullRead=False) -> sys::SSize_T"""
         return _coda_io.InputStream_read(self, buffer, len, verifyFullRead)
 
-
-    def readln(self, cStr: 'sys::byte *', strLenPlusNullByte: 'sys::Size_T const') -> "sys::SSize_T":
-        """readln(InputStream self, sys::byte * cStr, sys::Size_T const strLenPlusNullByte) -> sys::SSize_T"""
+    def readln(self, cStr: "sys::byte *", strLenPlusNullByte: "sys::Size_T const") -> "sys::SSize_T":
+        r"""readln(InputStream self, sys::byte * cStr, sys::Size_T const strLenPlusNullByte) -> sys::SSize_T"""
         return _coda_io.InputStream_readln(self, cStr, strLenPlusNullByte)
 
-
     def streamTo(self, *args) -> "sys::SSize_T":
-        """
-        streamTo(InputStream self, OutputStream & soi, sys::SSize_T numBytes) -> sys::SSize_T
-        streamTo(InputStream self, OutputStream & soi) -> sys::SSize_T
-        """
+        r"""streamTo(InputStream self, OutputStream & soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T"""
         return _coda_io.InputStream_streamTo(self, *args)
 
-InputStream_swigregister = _coda_io.InputStream_swigregister
-InputStream_swigregister(InputStream)
+# Register InputStream in _coda_io:
+_coda_io.InputStream_swigregister(InputStream)
 
-class OutputStream(_object):
-    """Proxy of C++ io::OutputStream class."""
+class OutputStream(object):
+    r"""Proxy of C++ io::OutputStream class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputStream, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, OutputStream, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_io.delete_OutputStream
-    __del__ = lambda self: None
 
     def writeln(self, *args) -> "void":
-        """
+        r"""
         writeln(OutputStream self, std::string const & str)
         writeln(OutputStream self, coda_oss::u8string const & str)
         """
         return _coda_io.OutputStream_writeln(self, *args)
 
-
     def write(self, *args) -> "void":
-        """
+        r"""
         write(OutputStream self, sys::byte b)
         write(OutputStream self, coda_oss::byte b)
         write(OutputStream self, std::string const & str)
@@ -172,410 +123,293 @@ class OutputStream(_object):
         """
         return _coda_io.OutputStream_write(self, *args)
 
-
     def flush(self) -> "void":
-        """flush(OutputStream self)"""
+        r"""flush(OutputStream self)"""
         return _coda_io.OutputStream_flush(self)
 
-
     def close(self) -> "void":
-        """close(OutputStream self)"""
+        r"""close(OutputStream self)"""
         return _coda_io.OutputStream_close(self)
 
-OutputStream_swigregister = _coda_io.OutputStream_swigregister
-OutputStream_swigregister(OutputStream)
+# Register OutputStream in _coda_io:
+_coda_io.OutputStream_swigregister(OutputStream)
 
 class BidirectionalStream(InputStream, OutputStream):
-    """Proxy of C++ io::BidirectionalStream class."""
+    r"""Proxy of C++ io::BidirectionalStream class."""
 
-    __swig_setmethods__ = {}
-    for _s in [InputStream, OutputStream]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, BidirectionalStream, name, value)
-    __swig_getmethods__ = {}
-    for _s in [InputStream, OutputStream]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, BidirectionalStream, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_io.delete_BidirectionalStream
-    __del__ = lambda self: None
-BidirectionalStream_swigregister = _coda_io.BidirectionalStream_swigregister
-BidirectionalStream_swigregister(BidirectionalStream)
 
-class Seekable(_object):
-    """Proxy of C++ io::Seekable class."""
+# Register BidirectionalStream in _coda_io:
+_coda_io.BidirectionalStream_swigregister(BidirectionalStream)
+
+class Seekable(object):
+    r"""Proxy of C++ io::Seekable class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Seekable, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Seekable, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_io.delete_Seekable
-    __del__ = lambda self: None
     Whence_CURRENT = _coda_io.Seekable_Whence_CURRENT
+    
     Whence_START = _coda_io.Seekable_Whence_START
+    
     Whence_END = _coda_io.Seekable_Whence_END
+    
     CURRENT = _coda_io.Seekable_CURRENT
+    
     START = _coda_io.Seekable_START
+    
     END = _coda_io.Seekable_END
+    
 
-    def seek(self, offset: 'sys::Off_T', whence: 'io::Seekable::Whence') -> "sys::Off_T":
-        """seek(Seekable self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
+    def seek(self, offset: "sys::Off_T", whence: "io::Seekable::Whence") -> "sys::Off_T":
+        r"""seek(Seekable self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
         return _coda_io.Seekable_seek(self, offset, whence)
 
-
     def tell(self) -> "sys::Off_T":
-        """tell(Seekable self) -> sys::Off_T"""
+        r"""tell(Seekable self) -> sys::Off_T"""
         return _coda_io.Seekable_tell(self)
 
-Seekable_swigregister = _coda_io.Seekable_swigregister
-Seekable_swigregister(Seekable)
+# Register Seekable in _coda_io:
+_coda_io.Seekable_swigregister(Seekable)
 
 class SeekableInputStream(InputStream, Seekable):
-    """Proxy of C++ io::SeekableInputStream class."""
+    r"""Proxy of C++ io::SeekableInputStream class."""
 
-    __swig_setmethods__ = {}
-    for _s in [InputStream, Seekable]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableInputStream, name, value)
-    __swig_getmethods__ = {}
-    for _s in [InputStream, Seekable]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, SeekableInputStream, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_io.delete_SeekableInputStream
-    __del__ = lambda self: None
 
     def streamTo(self, *args) -> "sys::SSize_T":
-        """
-        streamTo(SeekableInputStream self, OutputStream & soi, sys::SSize_T numBytes) -> sys::SSize_T
+        r"""
+        streamTo(SeekableInputStream self, OutputStream & soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T
         streamTo(SeekableInputStream self, OutputStream & soi) -> sys::SSize_T
         """
         return _coda_io.SeekableInputStream_streamTo(self, *args)
 
-SeekableInputStream_swigregister = _coda_io.SeekableInputStream_swigregister
-SeekableInputStream_swigregister(SeekableInputStream)
+# Register SeekableInputStream in _coda_io:
+_coda_io.SeekableInputStream_swigregister(SeekableInputStream)
 
 class SeekableOutputStream(OutputStream, Seekable):
-    """Proxy of C++ io::SeekableOutputStream class."""
+    r"""Proxy of C++ io::SeekableOutputStream class."""
 
-    __swig_setmethods__ = {}
-    for _s in [OutputStream, Seekable]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableOutputStream, name, value)
-    __swig_getmethods__ = {}
-    for _s in [OutputStream, Seekable]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, SeekableOutputStream, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_io.delete_SeekableOutputStream
-    __del__ = lambda self: None
-SeekableOutputStream_swigregister = _coda_io.SeekableOutputStream_swigregister
-SeekableOutputStream_swigregister(SeekableOutputStream)
+
+# Register SeekableOutputStream in _coda_io:
+_coda_io.SeekableOutputStream_swigregister(SeekableOutputStream)
 
 class SeekableBidirectionalStream(BidirectionalStream, Seekable):
-    """Proxy of C++ io::SeekableBidirectionalStream class."""
+    r"""Proxy of C++ io::SeekableBidirectionalStream class."""
 
-    __swig_setmethods__ = {}
-    for _s in [BidirectionalStream, Seekable]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableBidirectionalStream, name, value)
-    __swig_getmethods__ = {}
-    for _s in [BidirectionalStream, Seekable]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, SeekableBidirectionalStream, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_io.delete_SeekableBidirectionalStream
-    __del__ = lambda self: None
 
     def streamTo(self, *args) -> "sys::SSize_T":
-        """
-        streamTo(SeekableBidirectionalStream self, OutputStream & soi, sys::SSize_T numBytes) -> sys::SSize_T
+        r"""
+        streamTo(SeekableBidirectionalStream self, OutputStream & soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T
         streamTo(SeekableBidirectionalStream self, OutputStream & soi) -> sys::SSize_T
         """
         return _coda_io.SeekableBidirectionalStream_streamTo(self, *args)
 
-SeekableBidirectionalStream_swigregister = _coda_io.SeekableBidirectionalStream_swigregister
-SeekableBidirectionalStream_swigregister(SeekableBidirectionalStream)
+# Register SeekableBidirectionalStream in _coda_io:
+_coda_io.SeekableBidirectionalStream_swigregister(SeekableBidirectionalStream)
 
 class NullInputStream(InputStream):
-    """Proxy of C++ io::NullInputStream class."""
-
-    __swig_setmethods__ = {}
-    for _s in [InputStream]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NullInputStream, name, value)
-    __swig_getmethods__ = {}
-    for _s in [InputStream]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NullInputStream, name)
+    r"""Proxy of C++ io::NullInputStream class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
-    def __init__(self, size: 'sys::SSize_T'):
-        """__init__(io::NullInputStream self, sys::SSize_T size) -> NullInputStream"""
-        this = _coda_io.new_NullInputStream(size)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+    def __init__(self, size: "sys::SSize_T"):
+        r"""__init__(NullInputStream self, sys::SSize_T size) -> NullInputStream"""
+        _coda_io.NullInputStream_swiginit(self, _coda_io.new_NullInputStream(size))
 
     def available(self) -> "sys::Off_T":
-        """available(NullInputStream self) -> sys::Off_T"""
+        r"""available(NullInputStream self) -> sys::Off_T"""
         return _coda_io.NullInputStream_available(self)
 
-
-    def readln(self, cStr: 'sys::byte *', strLenPlusNullByte: 'sys::Size_T const') -> "sys::SSize_T":
-        """readln(NullInputStream self, sys::byte * cStr, sys::Size_T const strLenPlusNullByte) -> sys::SSize_T"""
+    def readln(self, cStr: "sys::byte *", strLenPlusNullByte: "sys::Size_T const") -> "sys::SSize_T":
+        r"""readln(NullInputStream self, sys::byte * cStr, sys::Size_T const strLenPlusNullByte) -> sys::SSize_T"""
         return _coda_io.NullInputStream_readln(self, cStr, strLenPlusNullByte)
 
-
     def streamTo(self, *args) -> "sys::SSize_T":
-        """
-        streamTo(NullInputStream self, OutputStream soi, sys::SSize_T numBytes) -> sys::SSize_T
-        streamTo(NullInputStream self, OutputStream soi) -> sys::SSize_T
-        """
+        r"""streamTo(NullInputStream self, OutputStream soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T"""
         return _coda_io.NullInputStream_streamTo(self, *args)
-
     __swig_destroy__ = _coda_io.delete_NullInputStream
-    __del__ = lambda self: None
-NullInputStream_swigregister = _coda_io.NullInputStream_swigregister
-NullInputStream_swigregister(NullInputStream)
+
+# Register NullInputStream in _coda_io:
+_coda_io.NullInputStream_swigregister(NullInputStream)
 
 class NullOutputStream(OutputStream):
-    """Proxy of C++ io::NullOutputStream class."""
-
-    __swig_setmethods__ = {}
-    for _s in [OutputStream]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NullOutputStream, name, value)
-    __swig_getmethods__ = {}
-    for _s in [OutputStream]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NullOutputStream, name)
+    r"""Proxy of C++ io::NullOutputStream class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self):
-        """__init__(io::NullOutputStream self) -> NullOutputStream"""
-        this = _coda_io.new_NullOutputStream()
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def writeln(self, arg2: 'std::string const &') -> "void":
-        """writeln(NullOutputStream self, std::string const & arg2)"""
-        return _coda_io.NullOutputStream_writeln(self, arg2)
+        r"""__init__(NullOutputStream self) -> NullOutputStream"""
+        _coda_io.NullOutputStream_swiginit(self, _coda_io.new_NullOutputStream())
 
+    def writeln(self, arg2: "std::string const &") -> "void":
+        r"""writeln(NullOutputStream self, std::string const & arg2)"""
+        return _coda_io.NullOutputStream_writeln(self, arg2)
 
     def write(self, *args) -> "void":
-        """
+        r"""
         write(NullOutputStream self, sys::byte arg2)
         write(NullOutputStream self, std::string const & arg2)
         write(NullOutputStream self, void const * arg2, size_t arg3)
         """
         return _coda_io.NullOutputStream_write(self, *args)
 
-
     def flush(self) -> "void":
-        """flush(NullOutputStream self)"""
+        r"""flush(NullOutputStream self)"""
         return _coda_io.NullOutputStream_flush(self)
-
     __swig_destroy__ = _coda_io.delete_NullOutputStream
-    __del__ = lambda self: None
-NullOutputStream_swigregister = _coda_io.NullOutputStream_swigregister
-NullOutputStream_swigregister(NullOutputStream)
+
+# Register NullOutputStream in _coda_io:
+_coda_io.NullOutputStream_swigregister(NullOutputStream)
 
 class SeekableNullOutputStream(SeekableOutputStream):
-    """Proxy of C++ io::SeekableNullOutputStream class."""
-
-    __swig_setmethods__ = {}
-    for _s in [SeekableOutputStream]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableNullOutputStream, name, value)
-    __swig_getmethods__ = {}
-    for _s in [SeekableOutputStream]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, SeekableNullOutputStream, name)
+    r"""Proxy of C++ io::SeekableNullOutputStream class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self):
-        """__init__(io::SeekableNullOutputStream self) -> SeekableNullOutputStream"""
-        this = _coda_io.new_SeekableNullOutputStream()
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def write(self, arg2: 'void const *', numBytes: 'size_t') -> "void":
-        """write(SeekableNullOutputStream self, void const * arg2, size_t numBytes)"""
-        return _coda_io.SeekableNullOutputStream_write(self, arg2, numBytes)
+        r"""__init__(SeekableNullOutputStream self) -> SeekableNullOutputStream"""
+        _coda_io.SeekableNullOutputStream_swiginit(self, _coda_io.new_SeekableNullOutputStream())
 
+    def write(self, arg2: "void const *", numBytes: "size_t") -> "void":
+        r"""write(SeekableNullOutputStream self, void const * arg2, size_t numBytes)"""
+        return _coda_io.SeekableNullOutputStream_write(self, arg2, numBytes)
 
     def flush(self) -> "void":
-        """flush(SeekableNullOutputStream self)"""
+        r"""flush(SeekableNullOutputStream self)"""
         return _coda_io.SeekableNullOutputStream_flush(self)
 
-
-    def seek(self, offset: 'sys::Off_T', whence: 'io::Seekable::Whence') -> "sys::Off_T":
-        """seek(SeekableNullOutputStream self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
+    def seek(self, offset: "sys::Off_T", whence: "io::Seekable::Whence") -> "sys::Off_T":
+        r"""seek(SeekableNullOutputStream self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
         return _coda_io.SeekableNullOutputStream_seek(self, offset, whence)
 
-
     def tell(self) -> "sys::Off_T":
-        """tell(SeekableNullOutputStream self) -> sys::Off_T"""
+        r"""tell(SeekableNullOutputStream self) -> sys::Off_T"""
         return _coda_io.SeekableNullOutputStream_tell(self)
-
     __swig_destroy__ = _coda_io.delete_SeekableNullOutputStream
-    __del__ = lambda self: None
-SeekableNullOutputStream_swigregister = _coda_io.SeekableNullOutputStream_swigregister
-SeekableNullOutputStream_swigregister(SeekableNullOutputStream)
+
+# Register SeekableNullOutputStream in _coda_io:
+_coda_io.SeekableNullOutputStream_swigregister(SeekableNullOutputStream)
 
 class FileInputStream(SeekableInputStream):
-    """Proxy of C++ io::FileInputStreamOS class."""
-
-    __swig_setmethods__ = {}
-    for _s in [SeekableInputStream]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, FileInputStream, name, value)
-    __swig_getmethods__ = {}
-    for _s in [SeekableInputStream]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, FileInputStream, name)
+    r"""Proxy of C++ io::FileInputStreamOS class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
+        r"""
         FileInputStreamOS() -> FileInputStream
         FileInputStreamOS(std::string const & inputFile) -> FileInputStream
         FileInputStreamOS(coda_oss::filesystem::path const & inputFile) -> FileInputStream
         FileInputStreamOS(char const * inputFile) -> FileInputStream
-        __init__(io::FileInputStreamOS self, sys::File const & inputFile) -> FileInputStream
+        __init__(FileInputStream self, sys::File const & inputFile) -> FileInputStream
         """
-        this = _coda_io.new_FileInputStream(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_io.FileInputStream_swiginit(self, _coda_io.new_FileInputStream(*args))
     __swig_destroy__ = _coda_io.delete_FileInputStream
-    __del__ = lambda self: None
 
     def available(self) -> "sys::Off_T":
-        """available(FileInputStream self) -> sys::Off_T"""
+        r"""available(FileInputStream self) -> sys::Off_T"""
         return _coda_io.FileInputStream_available(self)
 
-
     def isOpen(self) -> "bool":
-        """isOpen(FileInputStream self) -> bool"""
+        r"""isOpen(FileInputStream self) -> bool"""
         return _coda_io.FileInputStream_isOpen(self)
 
-
-    def create(self, str: 'std::string const &') -> "void":
-        """create(FileInputStream self, std::string const & str)"""
+    def create(self, str: "std::string const &") -> "void":
+        r"""create(FileInputStream self, std::string const & str)"""
         return _coda_io.FileInputStream_create(self, str)
 
-
-    def seek(self, off: 'sys::Off_T', whence: 'io::Seekable::Whence') -> "sys::Off_T":
-        """seek(FileInputStream self, sys::Off_T off, io::Seekable::Whence whence) -> sys::Off_T"""
+    def seek(self, off: "sys::Off_T", whence: "io::Seekable::Whence") -> "sys::Off_T":
+        r"""seek(FileInputStream self, sys::Off_T off, io::Seekable::Whence whence) -> sys::Off_T"""
         return _coda_io.FileInputStream_seek(self, off, whence)
 
-
     def tell(self) -> "sys::Off_T":
-        """tell(FileInputStream self) -> sys::Off_T"""
+        r"""tell(FileInputStream self) -> sys::Off_T"""
         return _coda_io.FileInputStream_tell(self)
 
-
     def close(self) -> "void":
-        """close(FileInputStream self)"""
+        r"""close(FileInputStream self)"""
         return _coda_io.FileInputStream_close(self)
 
-FileInputStream_swigregister = _coda_io.FileInputStream_swigregister
-FileInputStream_swigregister(FileInputStream)
+# Register FileInputStream in _coda_io:
+_coda_io.FileInputStream_swigregister(FileInputStream)
 
 class FileOutputStream(SeekableOutputStream):
-    """Proxy of C++ io::FileOutputStreamOS class."""
-
-    __swig_setmethods__ = {}
-    for _s in [SeekableOutputStream]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, FileOutputStream, name, value)
-    __swig_getmethods__ = {}
-    for _s in [SeekableOutputStream]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, FileOutputStream, name)
+    r"""Proxy of C++ io::FileOutputStreamOS class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
+        r"""
         FileOutputStreamOS() -> FileOutputStream
-        FileOutputStreamOS(io::FileOutputStreamOS::path const & outputFile, int creationFlags) -> FileOutputStream
-        __init__(io::FileOutputStreamOS self, io::FileOutputStreamOS::path const & outputFile) -> FileOutputStream
+        FileOutputStreamOS(io::FileOutputStreamOS::path const & outputFile, int creationFlags=sys::File::CREATE|sys::File::TRUNCATE) -> FileOutputStream
         """
-        this = _coda_io.new_FileOutputStream(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_io.FileOutputStream_swiginit(self, _coda_io.new_FileOutputStream(*args))
     __swig_destroy__ = _coda_io.delete_FileOutputStream
-    __del__ = lambda self: None
 
     def isOpen(self) -> "bool":
-        """isOpen(FileOutputStream self) -> bool"""
+        r"""isOpen(FileOutputStream self) -> bool"""
         return _coda_io.FileOutputStream_isOpen(self)
 
-
     def create(self, *args) -> "void":
-        """
-        create(FileOutputStream self, io::FileOutputStreamOS::path const & str, int creationFlags)
-        create(FileOutputStream self, io::FileOutputStreamOS::path const & str)
-        """
+        r"""create(FileOutputStream self, io::FileOutputStreamOS::path const & str, int creationFlags=sys::File::CREATE|sys::File::TRUNCATE)"""
         return _coda_io.FileOutputStream_create(self, *args)
 
-
     def close(self) -> "void":
-        """close(FileOutputStream self)"""
+        r"""close(FileOutputStream self)"""
         return _coda_io.FileOutputStream_close(self)
 
-
     def flush(self) -> "void":
-        """flush(FileOutputStream self)"""
+        r"""flush(FileOutputStream self)"""
         return _coda_io.FileOutputStream_flush(self)
 
-
-    def seek(self, offset: 'sys::Off_T', whence: 'io::Seekable::Whence') -> "sys::Off_T":
-        """seek(FileOutputStream self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
+    def seek(self, offset: "sys::Off_T", whence: "io::Seekable::Whence") -> "sys::Off_T":
+        r"""seek(FileOutputStream self, sys::Off_T offset, io::Seekable::Whence whence) -> sys::Off_T"""
         return _coda_io.FileOutputStream_seek(self, offset, whence)
 
-
     def tell(self) -> "sys::Off_T":
-        """tell(FileOutputStream self) -> sys::Off_T"""
+        r"""tell(FileOutputStream self) -> sys::Off_T"""
         return _coda_io.FileOutputStream_tell(self)
 
-
     def write(self, *args) -> "void":
-        """
+        r"""
         write(FileOutputStream self)
         write(FileOutputStream self, void const * buffer, size_t len)
         """
         return _coda_io.FileOutputStream_write(self, *args)
 
-FileOutputStream_swigregister = _coda_io.FileOutputStream_swigregister
-FileOutputStream_swigregister(FileOutputStream)
+# Register FileOutputStream in _coda_io:
+_coda_io.FileOutputStream_swigregister(FileOutputStream)
 
-# This file is compatible with both classic and new-style classes.
 
 
diff --git a/externals/coda-oss/modules/python/logging/source/generated/coda_logging.py b/externals/coda-oss/modules/python/logging/source/generated/coda_logging.py
index 5e03ac30..f002f064 100644
--- a/externals/coda-oss/modules/python/logging/source/generated/coda_logging.py
+++ b/externals/coda-oss/modules/python/logging/source/generated/coda_logging.py
@@ -1,576 +1,388 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_coda_logging')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_coda_logging')
-    _coda_logging = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_coda_logging', [dirname(__file__)])
-        except ImportError:
-            import _coda_logging
-            return _coda_logging
-        try:
-            _mod = imp.load_module('_coda_logging', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _coda_logging = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _coda_logging
 else:
     import _coda_logging
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
 
-class Formatter(_object):
-    """Proxy of C++ logging::Formatter class."""
+class Formatter(object):
+    r"""Proxy of C++ logging::Formatter class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Formatter, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Formatter, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_logging.delete_Formatter
-    __del__ = lambda self: None
 
-    def format(self, record: 'LogRecord const *', os: 'io::OutputStream &') -> "void":
-        """format(Formatter self, LogRecord const * record, io::OutputStream & os)"""
+    def format(self, record: "LogRecord const *", os: "io::OutputStream &") -> "void":
+        r"""format(Formatter self, LogRecord const * record, io::OutputStream & os)"""
         return _coda_logging.Formatter_format(self, record, os)
 
-
     def getPrologue(self) -> "std::string":
-        """getPrologue(Formatter self) -> std::string"""
+        r"""getPrologue(Formatter self) -> std::string"""
         return _coda_logging.Formatter_getPrologue(self)
 
-
     def getEpilogue(self) -> "std::string":
-        """getEpilogue(Formatter self) -> std::string"""
+        r"""getEpilogue(Formatter self) -> std::string"""
         return _coda_logging.Formatter_getEpilogue(self)
 
-Formatter_swigregister = _coda_logging.Formatter_swigregister
-Formatter_swigregister(Formatter)
+# Register Formatter in _coda_logging:
+_coda_logging.Formatter_swigregister(Formatter)
 
 class StandardFormatter(Formatter):
-    """Proxy of C++ logging::StandardFormatter class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Formatter]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardFormatter, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Formatter]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, StandardFormatter, name)
+    r"""Proxy of C++ logging::StandardFormatter class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
+        r"""
+        __init__(StandardFormatter self) -> StandardFormatter
+        __init__(StandardFormatter self, std::string const & fmt, std::string const & prologue="", std::string const & epilogue="") -> StandardFormatter
         """
-        __init__(logging::StandardFormatter self) -> StandardFormatter
-        __init__(logging::StandardFormatter self, std::string const & fmt, std::string const & prologue, std::string const & epilogue) -> StandardFormatter
-        __init__(logging::StandardFormatter self, std::string const & fmt, std::string const & prologue) -> StandardFormatter
-        __init__(logging::StandardFormatter self, std::string const & fmt) -> StandardFormatter
-        """
-        this = _coda_logging.new_StandardFormatter(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_logging.StandardFormatter_swiginit(self, _coda_logging.new_StandardFormatter(*args))
     __swig_destroy__ = _coda_logging.delete_StandardFormatter
-    __del__ = lambda self: None
 
-    def format(self, record: 'LogRecord const *', os: 'io::OutputStream &') -> "void":
-        """format(StandardFormatter self, LogRecord const * record, io::OutputStream & os)"""
+    def format(self, record: "LogRecord const *", os: "io::OutputStream &") -> "void":
+        r"""format(StandardFormatter self, LogRecord const * record, io::OutputStream & os)"""
         return _coda_logging.StandardFormatter_format(self, record, os)
 
-StandardFormatter_swigregister = _coda_logging.StandardFormatter_swigregister
-StandardFormatter_swigregister(StandardFormatter)
+# Register StandardFormatter in _coda_logging:
+_coda_logging.StandardFormatter_swigregister(StandardFormatter)
 cvar = _coda_logging.cvar
 StandardFormatter.DEFAULT_FORMAT = _coda_logging.cvar.StandardFormatter_DEFAULT_FORMAT
 
-class Filterer(_object):
-    """Proxy of C++ logging::Filterer class."""
+class Filterer(object):
+    r"""Proxy of C++ logging::Filterer class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Filterer, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Filterer, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self):
-        """__init__(logging::Filterer self) -> Filterer"""
-        this = _coda_logging.new_Filterer()
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""__init__(Filterer self) -> Filterer"""
+        _coda_logging.Filterer_swiginit(self, _coda_logging.new_Filterer())
     __swig_destroy__ = _coda_logging.delete_Filterer
-    __del__ = lambda self: None
 
     def addFilter(self, *args) -> "void":
-        """
+        r"""
         addFilter(Filterer self, Filter * filter)
         addFilter(Filterer self, Filter & arg2)
         """
         return _coda_logging.Filterer_addFilter(self, *args)
 
-
     def filter(self, *args) -> "bool":
-        """
+        r"""
         filter(Filterer self, LogRecord const * record) -> bool
         filter(Filterer self, LogRecord const & record) -> bool
         """
         return _coda_logging.Filterer_filter(self, *args)
 
-
     def removeFilter(self, *args) -> "void":
-        """
+        r"""
         removeFilter(Filterer self, Filter * filter)
         removeFilter(Filterer self, Filter & arg2)
         """
         return _coda_logging.Filterer_removeFilter(self, *args)
 
-Filterer_swigregister = _coda_logging.Filterer_swigregister
-Filterer_swigregister(Filterer)
+# Register Filterer in _coda_logging:
+_coda_logging.Filterer_swigregister(Filterer)
 
 class Handler(Filterer):
-    """Proxy of C++ logging::Handler class."""
+    r"""Proxy of C++ logging::Handler class."""
 
-    __swig_setmethods__ = {}
-    for _s in [Filterer]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Handler, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Filterer]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, Handler, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_logging.delete_Handler
-    __del__ = lambda self: None
 
-    def setLevel(self, level: 'LogLevel') -> "void":
-        """setLevel(Handler self, LogLevel level)"""
+    def setLevel(self, level: "LogLevel") -> "void":
+        r"""setLevel(Handler self, LogLevel level)"""
         return _coda_logging.Handler_setLevel(self, level)
 
-
     def getLevel(self) -> "LogLevel":
-        """getLevel(Handler self) -> LogLevel"""
+        r"""getLevel(Handler self) -> LogLevel"""
         return _coda_logging.Handler_getLevel(self)
 
-
     def handle(self, *args) -> "bool":
-        """
+        r"""
         handle(Handler self, LogRecord const * record) -> bool
         handle(Handler self, LogRecord const & record) -> bool
         """
         return _coda_logging.Handler_handle(self, *args)
 
-
     def close(self) -> "void":
-        """close(Handler self)"""
+        r"""close(Handler self)"""
         return _coda_logging.Handler_close(self)
 
-
-    def setFormatter(self, formatter: 'Formatter') -> "void":
-        """setFormatter(Handler self, Formatter formatter)"""
+    def setFormatter(self, formatter: "Formatter") -> "void":
+        r"""setFormatter(Handler self, Formatter formatter)"""
         return _coda_logging.Handler_setFormatter(self, formatter)
 
-Handler_swigregister = _coda_logging.Handler_swigregister
-Handler_swigregister(Handler)
+# Register Handler in _coda_logging:
+_coda_logging.Handler_swigregister(Handler)
 
 class StreamHandler(Handler):
-    """Proxy of C++ logging::StreamHandler class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Handler]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamHandler, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Handler]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, StreamHandler, name)
+    r"""Proxy of C++ logging::StreamHandler class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
+        r"""
+        __init__(StreamHandler self, LogLevel level=LogLevel::LOG_NOTSET) -> StreamHandler
+        __init__(StreamHandler self, io::OutputStream * stream, LogLevel level=LogLevel::LOG_NOTSET) -> StreamHandler
+        __init__(StreamHandler self, std::unique_ptr< io::OutputStream > && stream, LogLevel level=LogLevel::LOG_NOTSET) -> StreamHandler
         """
-        __init__(logging::StreamHandler self, LogLevel level) -> StreamHandler
-        __init__(logging::StreamHandler self) -> StreamHandler
-        __init__(logging::StreamHandler self, io::OutputStream * stream, LogLevel level) -> StreamHandler
-        __init__(logging::StreamHandler self, io::OutputStream * stream) -> StreamHandler
-        __init__(logging::StreamHandler self, std::unique_ptr< io::OutputStream > && stream, LogLevel level) -> StreamHandler
-        __init__(logging::StreamHandler self, std::unique_ptr< io::OutputStream > && stream) -> StreamHandler
-        """
-        this = _coda_logging.new_StreamHandler(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_logging.StreamHandler_swiginit(self, _coda_logging.new_StreamHandler(*args))
     __swig_destroy__ = _coda_logging.delete_StreamHandler
-    __del__ = lambda self: None
 
     def close(self) -> "void":
-        """close(StreamHandler self)"""
+        r"""close(StreamHandler self)"""
         return _coda_logging.StreamHandler_close(self)
 
-StreamHandler_swigregister = _coda_logging.StreamHandler_swigregister
-StreamHandler_swigregister(StreamHandler)
+# Register StreamHandler in _coda_logging:
+_coda_logging.StreamHandler_swigregister(StreamHandler)
 
 class FileHandler(StreamHandler):
-    """Proxy of C++ logging::FileHandler class."""
-
-    __swig_setmethods__ = {}
-    for _s in [StreamHandler]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, FileHandler, name, value)
-    __swig_getmethods__ = {}
-    for _s in [StreamHandler]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, FileHandler, name)
+    r"""Proxy of C++ logging::FileHandler class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(logging::FileHandler self, coda_oss::filesystem::path const & fname, LogLevel level, int creationFlags) -> FileHandler
-        __init__(logging::FileHandler self, coda_oss::filesystem::path const & fname, LogLevel level) -> FileHandler
-        __init__(logging::FileHandler self, coda_oss::filesystem::path const & fname) -> FileHandler
-        """
-        this = _coda_logging.new_FileHandler(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""__init__(FileHandler self, coda_oss::filesystem::path const & fname, LogLevel level=LogLevel::LOG_NOTSET, int creationFlags=sys::File::CREATE|sys::File::TRUNCATE) -> FileHandler"""
+        _coda_logging.FileHandler_swiginit(self, _coda_logging.new_FileHandler(*args))
     __swig_destroy__ = _coda_logging.delete_FileHandler
-    __del__ = lambda self: None
-FileHandler_swigregister = _coda_logging.FileHandler_swigregister
-FileHandler_swigregister(FileHandler)
 
-class Filter(_object):
-    """Proxy of C++ logging::Filter class."""
+# Register FileHandler in _coda_logging:
+_coda_logging.FileHandler_swigregister(FileHandler)
+
+class Filter(object):
+    r"""Proxy of C++ logging::Filter class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Filter, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Filter, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(logging::Filter self, std::string name) -> Filter
-        __init__(logging::Filter self) -> Filter
-        """
-        this = _coda_logging.new_Filter(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""__init__(Filter self, std::string name="") -> Filter"""
+        _coda_logging.Filter_swiginit(self, _coda_logging.new_Filter(*args))
     __swig_destroy__ = _coda_logging.delete_Filter
-    __del__ = lambda self: None
 
     def filter(self, *args) -> "bool":
-        """
+        r"""
         filter(Filter self, LogRecord const * record) -> bool
         filter(Filter self, LogRecord const & record) -> bool
         """
         return _coda_logging.Filter_filter(self, *args)
 
-
     def getName(self) -> "std::string":
-        """getName(Filter self) -> std::string"""
+        r"""getName(Filter self) -> std::string"""
         return _coda_logging.Filter_getName(self)
 
-Filter_swigregister = _coda_logging.Filter_swigregister
-Filter_swigregister(Filter)
+# Register Filter in _coda_logging:
+_coda_logging.Filter_swigregister(Filter)
 
 class Logger(Filterer):
-    """Proxy of C++ logging::Logger class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Filterer]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Filterer]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
+    r"""Proxy of C++ logging::Logger class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(logging::Logger self, std::string const & name) -> Logger
-        __init__(logging::Logger self) -> Logger
-        """
-        this = _coda_logging.new_Logger(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""__init__(Logger self, std::string const & name="") -> Logger"""
+        _coda_logging.Logger_swiginit(self, _coda_logging.new_Logger(*args))
     __swig_destroy__ = _coda_logging.delete_Logger
-    __del__ = lambda self: None
 
     def log(self, *args) -> "void":
-        """
+        r"""
         log(Logger self, LogLevel level, std::string const & msg)
         log(Logger self, LogLevel level, except::Context const & ctxt)
         log(Logger self, LogLevel level, except::Throwable const & t)
         """
         return _coda_logging.Logger_log(self, *args)
 
-
     def debug(self, *args) -> "void":
-        """
+        r"""
         debug(Logger self, std::string const & msg)
         debug(Logger self, except::Context const & ctxt)
         debug(Logger self, except::Throwable const & t)
         """
         return _coda_logging.Logger_debug(self, *args)
 
-
     def info(self, *args) -> "void":
-        """
+        r"""
         info(Logger self, std::string const & msg)
         info(Logger self, except::Context const & ctxt)
         info(Logger self, except::Throwable const & t)
         """
         return _coda_logging.Logger_info(self, *args)
 
-
     def warn(self, *args) -> "void":
-        """
+        r"""
         warn(Logger self, std::string const & msg)
         warn(Logger self, except::Context const & ctxt)
         warn(Logger self, except::Throwable const & t)
         """
         return _coda_logging.Logger_warn(self, *args)
 
-
     def error(self, *args) -> "void":
-        """
+        r"""
         error(Logger self, std::string const & msg)
         error(Logger self, except::Context const & ctxt)
         error(Logger self, except::Throwable const & t)
         """
         return _coda_logging.Logger_error(self, *args)
 
-
     def critical(self, *args) -> "void":
-        """
+        r"""
         critical(Logger self, std::string const & msg)
         critical(Logger self, except::Context const & ctxt)
         critical(Logger self, except::Throwable const & t)
         """
         return _coda_logging.Logger_critical(self, *args)
 
-
     def addHandler(self, *args) -> "void":
-        """
+        r"""
         addHandler(Logger self, Handler handler, bool own=False)
-        addHandler(Logger self, Handler handler)
         addHandler(Logger self, std::unique_ptr< logging::Handler > && arg2)
         """
         return _coda_logging.Logger_addHandler(self, *args)
 
-
-    def removeHandler(self, handler: 'Handler') -> "void":
-        """removeHandler(Logger self, Handler handler)"""
+    def removeHandler(self, handler: "Handler") -> "void":
+        r"""removeHandler(Logger self, Handler handler)"""
         return _coda_logging.Logger_removeHandler(self, handler)
 
-
-    def setLevel(self, level: 'LogLevel') -> "void":
-        """setLevel(Logger self, LogLevel level)"""
+    def setLevel(self, level: "LogLevel") -> "void":
+        r"""setLevel(Logger self, LogLevel level)"""
         return _coda_logging.Logger_setLevel(self, level)
 
-
-    def setName(self, name: 'std::string const &') -> "void":
-        """setName(Logger self, std::string const & name)"""
+    def setName(self, name: "std::string const &") -> "void":
+        r"""setName(Logger self, std::string const & name)"""
         return _coda_logging.Logger_setName(self, name)
 
-
     def getName(self) -> "std::string":
-        """getName(Logger self) -> std::string"""
+        r"""getName(Logger self) -> std::string"""
         return _coda_logging.Logger_getName(self)
 
-
     def reset(self) -> "void":
-        """reset(Logger self)"""
+        r"""reset(Logger self)"""
         return _coda_logging.Logger_reset(self)
 
-Logger_swigregister = _coda_logging.Logger_swigregister
-Logger_swigregister(Logger)
+# Register Logger in _coda_logging:
+_coda_logging.Logger_swigregister(Logger)
 
 class NullHandler(Handler):
-    """Proxy of C++ logging::NullHandler class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Handler]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NullHandler, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Handler]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NullHandler, name)
+    r"""Proxy of C++ logging::NullHandler class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(logging::NullHandler self, LogLevel level) -> NullHandler
-        __init__(logging::NullHandler self) -> NullHandler
-        """
-        this = _coda_logging.new_NullHandler(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""__init__(NullHandler self, LogLevel level=LogLevel::LOG_NOTSET) -> NullHandler"""
+        _coda_logging.NullHandler_swiginit(self, _coda_logging.new_NullHandler(*args))
     __swig_destroy__ = _coda_logging.delete_NullHandler
-    __del__ = lambda self: None
-NullHandler_swigregister = _coda_logging.NullHandler_swigregister
-NullHandler_swigregister(NullHandler)
+
+# Register NullHandler in _coda_logging:
+_coda_logging.NullHandler_swigregister(NullHandler)
 
 class NullLogger(Logger):
-    """Proxy of C++ logging::NullLogger class."""
-
-    __swig_setmethods__ = {}
-    for _s in [Logger]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, NullLogger, name, value)
-    __swig_getmethods__ = {}
-    for _s in [Logger]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, NullLogger, name)
+    r"""Proxy of C++ logging::NullLogger class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(logging::NullLogger self, std::string const & name) -> NullLogger
-        __init__(logging::NullLogger self) -> NullLogger
-        """
-        this = _coda_logging.new_NullLogger(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""__init__(NullLogger self, std::string const & name="") -> NullLogger"""
+        _coda_logging.NullLogger_swiginit(self, _coda_logging.new_NullLogger(*args))
     __swig_destroy__ = _coda_logging.delete_NullLogger
-    __del__ = lambda self: None
-NullLogger_swigregister = _coda_logging.NullLogger_swigregister
-NullLogger_swigregister(NullLogger)
 
-class LoggerManager(_object):
-    """Proxy of C++ logging::LoggerManager class."""
+# Register NullLogger in _coda_logging:
+_coda_logging.NullLogger_swigregister(NullLogger)
+
+class LoggerManager(object):
+    r"""Proxy of C++ logging::LoggerManager class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, LoggerManager, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, LoggerManager, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self):
-        """__init__(logging::LoggerManager self) -> LoggerManager"""
-        this = _coda_logging.new_LoggerManager()
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""__init__(LoggerManager self) -> LoggerManager"""
+        _coda_logging.LoggerManager_swiginit(self, _coda_logging.new_LoggerManager())
 
     def getLoggerSharedPtr(self, *args) -> "std::shared_ptr< logging::Logger >":
-        """
-        getLoggerSharedPtr(LoggerManager self, std::string const & name) -> std::shared_ptr< logging::Logger >
-        getLoggerSharedPtr(LoggerManager self) -> std::shared_ptr< logging::Logger >
-        """
+        r"""getLoggerSharedPtr(LoggerManager self, std::string const & name="root") -> std::shared_ptr< logging::Logger >"""
         return _coda_logging.LoggerManager_getLoggerSharedPtr(self, *args)
 
-
     def getLogger(self, *args) -> "logging::Logger *":
-        """
-        getLogger(LoggerManager self, std::string const & name) -> Logger
-        getLogger(LoggerManager self) -> Logger
-        """
+        r"""getLogger(LoggerManager self, std::string const & name="root") -> Logger"""
         return _coda_logging.LoggerManager_getLogger(self, *args)
-
     __swig_destroy__ = _coda_logging.delete_LoggerManager
-    __del__ = lambda self: None
-LoggerManager_swigregister = _coda_logging.LoggerManager_swigregister
-LoggerManager_swigregister(LoggerManager)
+
+# Register LoggerManager in _coda_logging:
+_coda_logging.LoggerManager_swigregister(LoggerManager)
 
 
 def debug(*args) -> "void":
-    """
+    r"""
     debug(std::string const & msg)
     debug(except::Context const & ctxt)
     debug(except::Throwable & t)
@@ -578,7 +390,7 @@ def debug(*args) -> "void":
     return _coda_logging.debug(*args)
 
 def info(*args) -> "void":
-    """
+    r"""
     info(std::string const & msg)
     info(except::Context const & ctxt)
     info(except::Throwable & t)
@@ -586,7 +398,7 @@ def info(*args) -> "void":
     return _coda_logging.info(*args)
 
 def warn(*args) -> "void":
-    """
+    r"""
     warn(std::string const & msg)
     warn(except::Context const & ctxt)
     warn(except::Throwable & t)
@@ -594,7 +406,7 @@ def warn(*args) -> "void":
     return _coda_logging.warn(*args)
 
 def error(*args) -> "void":
-    """
+    r"""
     error(std::string const & msg)
     error(except::Context const & ctxt)
     error(except::Throwable & t)
@@ -602,7 +414,7 @@ def error(*args) -> "void":
     return _coda_logging.error(*args)
 
 def critical(*args) -> "void":
-    """
+    r"""
     critical(std::string const & msg)
     critical(except::Context const & ctxt)
     critical(except::Throwable & t)
@@ -610,12 +422,11 @@ def critical(*args) -> "void":
     return _coda_logging.critical(*args)
 
 def getLogger(*args) -> "logging::Logger *":
-    """getLogger() -> Logger"""
+    
     return _coda_logging.getLogger(*args)
 
 def getLoggerSharedPtr(*args) -> "std::shared_ptr< logging::Logger >":
-    """getLoggerSharedPtr() -> std::shared_ptr< logging::Logger >"""
+    
     return _coda_logging.getLoggerSharedPtr(*args)
-# This file is compatible with both classic and new-style classes.
 
 
diff --git a/externals/coda-oss/modules/python/math.linear/source/generated/math_linear.py b/externals/coda-oss/modules/python/math.linear/source/generated/math_linear.py
index da9b5f1f..293e0cc4 100644
--- a/externals/coda-oss/modules/python/math.linear/source/generated/math_linear.py
+++ b/externals/coda-oss/modules/python/math.linear/source/generated/math_linear.py
@@ -1,414 +1,317 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_math_linear')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_math_linear')
-    _math_linear = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_math_linear', [dirname(__file__)])
-        except ImportError:
-            import _math_linear
-            return _math_linear
-        try:
-            _mod = imp.load_module('_math_linear', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _math_linear = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _math_linear
 else:
     import _math_linear
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
 
 import coda.coda_except
-class SwigPyIterator(_object):
-    """Proxy of C++ swig::SwigPyIterator class."""
+class SwigPyIterator(object):
+    r"""Proxy of C++ swig::SwigPyIterator class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _math_linear.delete_SwigPyIterator
-    __del__ = lambda self: None
 
     def value(self) -> "PyObject *":
-        """value(SwigPyIterator self) -> PyObject *"""
+        r"""value(SwigPyIterator self) -> PyObject *"""
         return _math_linear.SwigPyIterator_value(self)
 
-
-    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
-        """
-        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
-        incr(SwigPyIterator self) -> SwigPyIterator
-        """
+    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
+        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
         return _math_linear.SwigPyIterator_incr(self, n)
 
-
-    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
-        """
-        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
-        decr(SwigPyIterator self) -> SwigPyIterator
-        """
+    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
+        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
         return _math_linear.SwigPyIterator_decr(self, n)
 
-
-    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
-        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
+    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
+        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
         return _math_linear.SwigPyIterator_distance(self, x)
 
-
-    def equal(self, x: 'SwigPyIterator') -> "bool":
-        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
+    def equal(self, x: "SwigPyIterator") -> "bool":
+        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
         return _math_linear.SwigPyIterator_equal(self, x)
 
-
     def copy(self) -> "swig::SwigPyIterator *":
-        """copy(SwigPyIterator self) -> SwigPyIterator"""
+        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
         return _math_linear.SwigPyIterator_copy(self)
 
-
     def next(self) -> "PyObject *":
-        """next(SwigPyIterator self) -> PyObject *"""
+        r"""next(SwigPyIterator self) -> PyObject *"""
         return _math_linear.SwigPyIterator_next(self)
 
-
     def __next__(self) -> "PyObject *":
-        """__next__(SwigPyIterator self) -> PyObject *"""
+        r"""__next__(SwigPyIterator self) -> PyObject *"""
         return _math_linear.SwigPyIterator___next__(self)
 
-
     def previous(self) -> "PyObject *":
-        """previous(SwigPyIterator self) -> PyObject *"""
+        r"""previous(SwigPyIterator self) -> PyObject *"""
         return _math_linear.SwigPyIterator_previous(self)
 
-
-    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
-        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
+    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
+        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
         return _math_linear.SwigPyIterator_advance(self, n)
 
-
-    def __eq__(self, x: 'SwigPyIterator') -> "bool":
-        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
+    def __eq__(self, x: "SwigPyIterator") -> "bool":
+        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
         return _math_linear.SwigPyIterator___eq__(self, x)
 
-
-    def __ne__(self, x: 'SwigPyIterator') -> "bool":
-        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
+    def __ne__(self, x: "SwigPyIterator") -> "bool":
+        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
         return _math_linear.SwigPyIterator___ne__(self, x)
 
-
-    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
-        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
+    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
+        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
         return _math_linear.SwigPyIterator___iadd__(self, n)
 
-
-    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
-        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
+    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
+        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
         return _math_linear.SwigPyIterator___isub__(self, n)
 
-
-    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
-        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
+    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
+        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
         return _math_linear.SwigPyIterator___add__(self, n)
 
-
     def __sub__(self, *args) -> "ptrdiff_t":
-        """
+        r"""
         __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
         __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
         """
         return _math_linear.SwigPyIterator___sub__(self, *args)
-
     def __iter__(self):
         return self
-SwigPyIterator_swigregister = _math_linear.SwigPyIterator_swigregister
-SwigPyIterator_swigregister(SwigPyIterator)
+
+# Register SwigPyIterator in _math_linear:
+_math_linear.SwigPyIterator_swigregister(SwigPyIterator)
 
 
 from coda.coda_types import pickle
 
 import coda.coda_types
 import coda.coda_sys
-class std_vector_double(_object):
-    """Proxy of C++ std::vector<(double)> class."""
+class std_vector_double(object):
+    r"""Proxy of C++ std::vector< double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_double, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_double, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def iterator(self) -> "swig::SwigPyIterator *":
-        """iterator(std_vector_double self) -> SwigPyIterator"""
+        r"""iterator(std_vector_double self) -> SwigPyIterator"""
         return _math_linear.std_vector_double_iterator(self)
-
     def __iter__(self):
         return self.iterator()
 
     def __nonzero__(self) -> "bool":
-        """__nonzero__(std_vector_double self) -> bool"""
+        r"""__nonzero__(std_vector_double self) -> bool"""
         return _math_linear.std_vector_double___nonzero__(self)
 
-
     def __bool__(self) -> "bool":
-        """__bool__(std_vector_double self) -> bool"""
+        r"""__bool__(std_vector_double self) -> bool"""
         return _math_linear.std_vector_double___bool__(self)
 
-
     def __len__(self) -> "std::vector< double >::size_type":
-        """__len__(std_vector_double self) -> std::vector< double >::size_type"""
+        r"""__len__(std_vector_double self) -> std::vector< double >::size_type"""
         return _math_linear.std_vector_double___len__(self)
 
-
-    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
-        """__getslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> std_vector_double"""
+    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
+        r"""__getslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> std_vector_double"""
         return _math_linear.std_vector_double___getslice__(self, i, j)
 
-
     def __setslice__(self, *args) -> "void":
-        """
+        r"""
         __setslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
         __setslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, std_vector_double v)
         """
         return _math_linear.std_vector_double___setslice__(self, *args)
 
-
-    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
-        """__delslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
+    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
+        r"""__delslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
         return _math_linear.std_vector_double___delslice__(self, i, j)
 
-
     def __delitem__(self, *args) -> "void":
-        """
+        r"""
         __delitem__(std_vector_double self, std::vector< double >::difference_type i)
         __delitem__(std_vector_double self, PySliceObject * slice)
         """
         return _math_linear.std_vector_double___delitem__(self, *args)
 
-
     def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
-        """
+        r"""
         __getitem__(std_vector_double self, PySliceObject * slice) -> std_vector_double
         __getitem__(std_vector_double self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
         """
         return _math_linear.std_vector_double___getitem__(self, *args)
 
-
     def __setitem__(self, *args) -> "void":
-        """
+        r"""
         __setitem__(std_vector_double self, PySliceObject * slice, std_vector_double v)
         __setitem__(std_vector_double self, PySliceObject * slice)
         __setitem__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
         """
         return _math_linear.std_vector_double___setitem__(self, *args)
 
-
     def pop(self) -> "std::vector< double >::value_type":
-        """pop(std_vector_double self) -> std::vector< double >::value_type"""
+        r"""pop(std_vector_double self) -> std::vector< double >::value_type"""
         return _math_linear.std_vector_double_pop(self)
 
-
-    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
-        """append(std_vector_double self, std::vector< double >::value_type const & x)"""
+    def append(self, x: "std::vector< double >::value_type const &") -> "void":
+        r"""append(std_vector_double self, std::vector< double >::value_type const & x)"""
         return _math_linear.std_vector_double_append(self, x)
 
-
     def empty(self) -> "bool":
-        """empty(std_vector_double self) -> bool"""
+        r"""empty(std_vector_double self) -> bool"""
         return _math_linear.std_vector_double_empty(self)
 
-
     def size(self) -> "std::vector< double >::size_type":
-        """size(std_vector_double self) -> std::vector< double >::size_type"""
+        r"""size(std_vector_double self) -> std::vector< double >::size_type"""
         return _math_linear.std_vector_double_size(self)
 
-
-    def swap(self, v: 'std_vector_double') -> "void":
-        """swap(std_vector_double self, std_vector_double v)"""
+    def swap(self, v: "std_vector_double") -> "void":
+        r"""swap(std_vector_double self, std_vector_double v)"""
         return _math_linear.std_vector_double_swap(self, v)
 
-
     def begin(self) -> "std::vector< double >::iterator":
-        """begin(std_vector_double self) -> std::vector< double >::iterator"""
+        r"""begin(std_vector_double self) -> std::vector< double >::iterator"""
         return _math_linear.std_vector_double_begin(self)
 
-
     def end(self) -> "std::vector< double >::iterator":
-        """end(std_vector_double self) -> std::vector< double >::iterator"""
+        r"""end(std_vector_double self) -> std::vector< double >::iterator"""
         return _math_linear.std_vector_double_end(self)
 
-
     def rbegin(self) -> "std::vector< double >::reverse_iterator":
-        """rbegin(std_vector_double self) -> std::vector< double >::reverse_iterator"""
+        r"""rbegin(std_vector_double self) -> std::vector< double >::reverse_iterator"""
         return _math_linear.std_vector_double_rbegin(self)
 
-
     def rend(self) -> "std::vector< double >::reverse_iterator":
-        """rend(std_vector_double self) -> std::vector< double >::reverse_iterator"""
+        r"""rend(std_vector_double self) -> std::vector< double >::reverse_iterator"""
         return _math_linear.std_vector_double_rend(self)
 
-
     def clear(self) -> "void":
-        """clear(std_vector_double self)"""
+        r"""clear(std_vector_double self)"""
         return _math_linear.std_vector_double_clear(self)
 
-
     def get_allocator(self) -> "std::vector< double >::allocator_type":
-        """get_allocator(std_vector_double self) -> std::vector< double >::allocator_type"""
+        r"""get_allocator(std_vector_double self) -> std::vector< double >::allocator_type"""
         return _math_linear.std_vector_double_get_allocator(self)
 
-
     def pop_back(self) -> "void":
-        """pop_back(std_vector_double self)"""
+        r"""pop_back(std_vector_double self)"""
         return _math_linear.std_vector_double_pop_back(self)
 
-
     def erase(self, *args) -> "std::vector< double >::iterator":
-        """
+        r"""
         erase(std_vector_double self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
         erase(std_vector_double self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
         """
         return _math_linear.std_vector_double_erase(self, *args)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(std_vector_double self) -> std_vector_double
+        __init__(std_vector_double self, std_vector_double other) -> std_vector_double
+        __init__(std_vector_double self, std::vector< double >::size_type size) -> std_vector_double
+        __init__(std_vector_double self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> std_vector_double
         """
-        __init__(std::vector<(double)> self) -> std_vector_double
-        __init__(std::vector<(double)> self, std_vector_double arg2) -> std_vector_double
-        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> std_vector_double
-        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> std_vector_double
-        """
-        this = _math_linear.new_std_vector_double(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
-        """push_back(std_vector_double self, std::vector< double >::value_type const & x)"""
-        return _math_linear.std_vector_double_push_back(self, x)
+        _math_linear.std_vector_double_swiginit(self, _math_linear.new_std_vector_double(*args))
 
+    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
+        r"""push_back(std_vector_double self, std::vector< double >::value_type const & x)"""
+        return _math_linear.std_vector_double_push_back(self, x)
 
     def front(self) -> "std::vector< double >::value_type const &":
-        """front(std_vector_double self) -> std::vector< double >::value_type const &"""
+        r"""front(std_vector_double self) -> std::vector< double >::value_type const &"""
         return _math_linear.std_vector_double_front(self)
 
-
     def back(self) -> "std::vector< double >::value_type const &":
-        """back(std_vector_double self) -> std::vector< double >::value_type const &"""
+        r"""back(std_vector_double self) -> std::vector< double >::value_type const &"""
         return _math_linear.std_vector_double_back(self)
 
-
-    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
-        """assign(std_vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
+    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
+        r"""assign(std_vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
         return _math_linear.std_vector_double_assign(self, n, x)
 
-
     def resize(self, *args) -> "void":
-        """
+        r"""
         resize(std_vector_double self, std::vector< double >::size_type new_size)
         resize(std_vector_double self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
         """
         return _math_linear.std_vector_double_resize(self, *args)
 
-
     def insert(self, *args) -> "void":
-        """
+        r"""
         insert(std_vector_double self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
         insert(std_vector_double self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
         """
         return _math_linear.std_vector_double_insert(self, *args)
 
-
-    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
-        """reserve(std_vector_double self, std::vector< double >::size_type n)"""
+    def reserve(self, n: "std::vector< double >::size_type") -> "void":
+        r"""reserve(std_vector_double self, std::vector< double >::size_type n)"""
         return _math_linear.std_vector_double_reserve(self, n)
 
-
     def capacity(self) -> "std::vector< double >::size_type":
-        """capacity(std_vector_double self) -> std::vector< double >::size_type"""
+        r"""capacity(std_vector_double self) -> std::vector< double >::size_type"""
         return _math_linear.std_vector_double_capacity(self)
 
-
     def __getstate__(self):
     # Return a nonempty (thus non-false) tuple with dummy value in first position
         return (-1, tuple(pickle.dumps(elem) for elem in self))
@@ -420,211 +323,173 @@ class std_vector_double(_object):
             self.push_back(pickle.loads(elem))
 
     __swig_destroy__ = _math_linear.delete_std_vector_double
-    __del__ = lambda self: None
-std_vector_double_swigregister = _math_linear.std_vector_double_swigregister
-std_vector_double_swigregister(std_vector_double)
 
-class std_vector_vector_double(_object):
-    """Proxy of C++ std::vector<(std::vector<(double)>)> class."""
+# Register std_vector_double in _math_linear:
+_math_linear.std_vector_double_swigregister(std_vector_double)
+
+class std_vector_vector_double(object):
+    r"""Proxy of C++ std::vector< std::vector< double > > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_vector_double, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_vector_double, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def iterator(self) -> "swig::SwigPyIterator *":
-        """iterator(std_vector_vector_double self) -> SwigPyIterator"""
+        r"""iterator(std_vector_vector_double self) -> SwigPyIterator"""
         return _math_linear.std_vector_vector_double_iterator(self)
-
     def __iter__(self):
         return self.iterator()
 
     def __nonzero__(self) -> "bool":
-        """__nonzero__(std_vector_vector_double self) -> bool"""
+        r"""__nonzero__(std_vector_vector_double self) -> bool"""
         return _math_linear.std_vector_vector_double___nonzero__(self)
 
-
     def __bool__(self) -> "bool":
-        """__bool__(std_vector_vector_double self) -> bool"""
+        r"""__bool__(std_vector_vector_double self) -> bool"""
         return _math_linear.std_vector_vector_double___bool__(self)
 
-
     def __len__(self) -> "std::vector< std::vector< double > >::size_type":
-        """__len__(std_vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
+        r"""__len__(std_vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
         return _math_linear.std_vector_vector_double___len__(self)
 
-
-    def __getslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
-        """__getslice__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> std_vector_vector_double"""
+    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
+        r"""__getslice__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> std_vector_vector_double"""
         return _math_linear.std_vector_vector_double___getslice__(self, i, j)
 
-
     def __setslice__(self, *args) -> "void":
-        """
+        r"""
         __setslice__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
         __setslice__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, std_vector_vector_double v)
         """
         return _math_linear.std_vector_vector_double___setslice__(self, *args)
 
-
-    def __delslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "void":
-        """__delslice__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
+    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
+        r"""__delslice__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
         return _math_linear.std_vector_vector_double___delslice__(self, i, j)
 
-
     def __delitem__(self, *args) -> "void":
-        """
+        r"""
         __delitem__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i)
         __delitem__(std_vector_vector_double self, PySliceObject * slice)
         """
         return _math_linear.std_vector_vector_double___delitem__(self, *args)
 
-
     def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
-        """
+        r"""
         __getitem__(std_vector_vector_double self, PySliceObject * slice) -> std_vector_vector_double
         __getitem__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i) -> std_vector_double
         """
         return _math_linear.std_vector_vector_double___getitem__(self, *args)
 
-
     def __setitem__(self, *args) -> "void":
-        """
+        r"""
         __setitem__(std_vector_vector_double self, PySliceObject * slice, std_vector_vector_double v)
         __setitem__(std_vector_vector_double self, PySliceObject * slice)
         __setitem__(std_vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std_vector_double x)
         """
         return _math_linear.std_vector_vector_double___setitem__(self, *args)
 
-
     def pop(self) -> "std::vector< std::vector< double > >::value_type":
-        """pop(std_vector_vector_double self) -> std_vector_double"""
+        r"""pop(std_vector_vector_double self) -> std_vector_double"""
         return _math_linear.std_vector_vector_double_pop(self)
 
-
-    def append(self, x: 'std_vector_double') -> "void":
-        """append(std_vector_vector_double self, std_vector_double x)"""
+    def append(self, x: "std_vector_double") -> "void":
+        r"""append(std_vector_vector_double self, std_vector_double x)"""
         return _math_linear.std_vector_vector_double_append(self, x)
 
-
     def empty(self) -> "bool":
-        """empty(std_vector_vector_double self) -> bool"""
+        r"""empty(std_vector_vector_double self) -> bool"""
         return _math_linear.std_vector_vector_double_empty(self)
 
-
     def size(self) -> "std::vector< std::vector< double > >::size_type":
-        """size(std_vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
+        r"""size(std_vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
         return _math_linear.std_vector_vector_double_size(self)
 
-
-    def swap(self, v: 'std_vector_vector_double') -> "void":
-        """swap(std_vector_vector_double self, std_vector_vector_double v)"""
+    def swap(self, v: "std_vector_vector_double") -> "void":
+        r"""swap(std_vector_vector_double self, std_vector_vector_double v)"""
         return _math_linear.std_vector_vector_double_swap(self, v)
 
-
     def begin(self) -> "std::vector< std::vector< double > >::iterator":
-        """begin(std_vector_vector_double self) -> std::vector< std::vector< double > >::iterator"""
+        r"""begin(std_vector_vector_double self) -> std::vector< std::vector< double > >::iterator"""
         return _math_linear.std_vector_vector_double_begin(self)
 
-
     def end(self) -> "std::vector< std::vector< double > >::iterator":
-        """end(std_vector_vector_double self) -> std::vector< std::vector< double > >::iterator"""
+        r"""end(std_vector_vector_double self) -> std::vector< std::vector< double > >::iterator"""
         return _math_linear.std_vector_vector_double_end(self)
 
-
     def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
-        """rbegin(std_vector_vector_double self) -> std::vector< std::vector< double > >::reverse_iterator"""
+        r"""rbegin(std_vector_vector_double self) -> std::vector< std::vector< double > >::reverse_iterator"""
         return _math_linear.std_vector_vector_double_rbegin(self)
 
-
     def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
-        """rend(std_vector_vector_double self) -> std::vector< std::vector< double > >::reverse_iterator"""
+        r"""rend(std_vector_vector_double self) -> std::vector< std::vector< double > >::reverse_iterator"""
         return _math_linear.std_vector_vector_double_rend(self)
 
-
     def clear(self) -> "void":
-        """clear(std_vector_vector_double self)"""
+        r"""clear(std_vector_vector_double self)"""
         return _math_linear.std_vector_vector_double_clear(self)
 
-
     def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
-        """get_allocator(std_vector_vector_double self) -> std::vector< std::vector< double > >::allocator_type"""
+        r"""get_allocator(std_vector_vector_double self) -> std::vector< std::vector< double > >::allocator_type"""
         return _math_linear.std_vector_vector_double_get_allocator(self)
 
-
     def pop_back(self) -> "void":
-        """pop_back(std_vector_vector_double self)"""
+        r"""pop_back(std_vector_vector_double self)"""
         return _math_linear.std_vector_vector_double_pop_back(self)
 
-
     def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
-        """
+        r"""
         erase(std_vector_vector_double self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
         erase(std_vector_vector_double self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
         """
         return _math_linear.std_vector_vector_double_erase(self, *args)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(std_vector_vector_double self) -> std_vector_vector_double
+        __init__(std_vector_vector_double self, std_vector_vector_double other) -> std_vector_vector_double
+        __init__(std_vector_vector_double self, std::vector< std::vector< double > >::size_type size) -> std_vector_vector_double
+        __init__(std_vector_vector_double self, std::vector< std::vector< double > >::size_type size, std_vector_double value) -> std_vector_vector_double
         """
-        __init__(std::vector<(std::vector<(double)>)> self) -> std_vector_vector_double
-        __init__(std::vector<(std::vector<(double)>)> self, std_vector_vector_double arg2) -> std_vector_vector_double
-        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size) -> std_vector_vector_double
-        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size, std_vector_double value) -> std_vector_vector_double
-        """
-        this = _math_linear.new_std_vector_vector_double(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def push_back(self, x: 'std_vector_double') -> "void":
-        """push_back(std_vector_vector_double self, std_vector_double x)"""
-        return _math_linear.std_vector_vector_double_push_back(self, x)
+        _math_linear.std_vector_vector_double_swiginit(self, _math_linear.new_std_vector_vector_double(*args))
 
+    def push_back(self, x: "std_vector_double") -> "void":
+        r"""push_back(std_vector_vector_double self, std_vector_double x)"""
+        return _math_linear.std_vector_vector_double_push_back(self, x)
 
     def front(self) -> "std::vector< std::vector< double > >::value_type const &":
-        """front(std_vector_vector_double self) -> std_vector_double"""
+        r"""front(std_vector_vector_double self) -> std_vector_double"""
         return _math_linear.std_vector_vector_double_front(self)
 
-
     def back(self) -> "std::vector< std::vector< double > >::value_type const &":
-        """back(std_vector_vector_double self) -> std_vector_double"""
+        r"""back(std_vector_vector_double self) -> std_vector_double"""
         return _math_linear.std_vector_vector_double_back(self)
 
-
-    def assign(self, n: 'std::vector< std::vector< double > >::size_type', x: 'std_vector_double') -> "void":
-        """assign(std_vector_vector_double self, std::vector< std::vector< double > >::size_type n, std_vector_double x)"""
+    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "std_vector_double") -> "void":
+        r"""assign(std_vector_vector_double self, std::vector< std::vector< double > >::size_type n, std_vector_double x)"""
         return _math_linear.std_vector_vector_double_assign(self, n, x)
 
-
     def resize(self, *args) -> "void":
-        """
+        r"""
         resize(std_vector_vector_double self, std::vector< std::vector< double > >::size_type new_size)
         resize(std_vector_vector_double self, std::vector< std::vector< double > >::size_type new_size, std_vector_double x)
         """
         return _math_linear.std_vector_vector_double_resize(self, *args)
 
-
     def insert(self, *args) -> "void":
-        """
+        r"""
         insert(std_vector_vector_double self, std::vector< std::vector< double > >::iterator pos, std_vector_double x) -> std::vector< std::vector< double > >::iterator
         insert(std_vector_vector_double self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, std_vector_double x)
         """
         return _math_linear.std_vector_vector_double_insert(self, *args)
 
-
-    def reserve(self, n: 'std::vector< std::vector< double > >::size_type') -> "void":
-        """reserve(std_vector_vector_double self, std::vector< std::vector< double > >::size_type n)"""
+    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
+        r"""reserve(std_vector_vector_double self, std::vector< std::vector< double > >::size_type n)"""
         return _math_linear.std_vector_vector_double_reserve(self, n)
 
-
     def capacity(self) -> "std::vector< std::vector< double > >::size_type":
-        """capacity(std_vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
+        r"""capacity(std_vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
         return _math_linear.std_vector_vector_double_capacity(self)
 
-
     def __getstate__(self):
     # Return a nonempty (thus non-false) tuple with dummy value in first position
         return (-1, tuple(pickle.dumps(elem) for elem in self))
@@ -636,49 +501,37 @@ class std_vector_vector_double(_object):
             self.push_back(pickle.loads(elem))
 
     __swig_destroy__ = _math_linear.delete_std_vector_vector_double
-    __del__ = lambda self: None
-std_vector_vector_double_swigregister = _math_linear.std_vector_vector_double_swigregister
-std_vector_vector_double_swigregister(std_vector_vector_double)
 
-class Matrix1x1(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(1,1,double)> class."""
+# Register std_vector_vector_double in _math_linear:
+_math_linear.std_vector_vector_double_swigregister(std_vector_vector_double)
+
+class Matrix1x1(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 1,1,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix1x1, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix1x1, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix1x1_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix1x1_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix1x1_mRaw_get, _math_linear.Matrix1x1_mRaw_set)
+    mRaw = property(_math_linear.Matrix1x1_mRaw_get, _math_linear.Matrix1x1_mRaw_set, doc=r"""mRaw : a(1).a(1).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(1,1,double)> self) -> Matrix1x1
-        __init__(math::linear::MatrixMxN<(1,1,double)> self, double cv) -> Matrix1x1
-        __init__(math::linear::MatrixMxN<(1,1,double)> self, double const * raw) -> Matrix1x1
-        __init__(math::linear::MatrixMxN<(1,1,double)> self, std_vector_double raw) -> Matrix1x1
-        __init__(math::linear::MatrixMxN<(1,1,double)> self, Matrix1x1 mx) -> Matrix1x1
-        """
-        this = _math_linear.new_Matrix1x1(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix1x1 self) -> Matrix1x1
+        __init__(Matrix1x1 self, double cv) -> Matrix1x1
+        __init__(Matrix1x1 self, double const * raw) -> Matrix1x1
+        __init__(Matrix1x1 self, std_vector_double raw) -> Matrix1x1
+        __init__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1
+        """
+        _math_linear.Matrix1x1_swiginit(self, _math_linear.new_Matrix1x1(*args))
     __swig_destroy__ = _math_linear.delete_Matrix1x1
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix1x1 self, size_t i, size_t j) -> double const
         __call__(Matrix1x1 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix1x1___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix1x1 self, size_t i) -> double const
         row(Matrix1x1 self, size_t i) -> double
         row(Matrix1x1 self, size_t i, double const * vec)
@@ -686,9 +539,8 @@ class Matrix1x1(_object):
         """
         return _math_linear.Matrix1x1_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix1x1 self, size_t j) -> std_vector_double
         col(Matrix1x1 self, size_t j, double const * vec)
         col(Matrix1x1 self, size_t j, std_vector_double vec)
@@ -696,115 +548,90 @@ class Matrix1x1(_object):
         """
         return _math_linear.Matrix1x1_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix1x1 self) -> size_t"""
+        r"""rows(Matrix1x1 self) -> size_t"""
         return _math_linear.Matrix1x1_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix1x1 self) -> size_t"""
+        r"""cols(Matrix1x1 self) -> size_t"""
         return _math_linear.Matrix1x1_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix1x1 self) -> size_t"""
+        r"""size(Matrix1x1 self) -> size_t"""
         return _math_linear.Matrix1x1_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 1,1,double > &":
-        """scale(Matrix1x1 self, double scalar) -> Matrix1x1"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 1,1,double > &":
+        r"""scale(Matrix1x1 self, double scalar) -> Matrix1x1"""
         return _math_linear.Matrix1x1_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 1,1 >":
-        """multiply(Matrix1x1 self, double scalar) -> Matrix1x1"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 1,1 >":
+        r"""multiply(Matrix1x1 self, double scalar) -> Matrix1x1"""
         return _math_linear.Matrix1x1_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 1,1,double > &":
-        """scaleDiagonal(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
+    def scaleDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double > &":
+        r"""scaleDiagonal(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
         return _math_linear.Matrix1x1_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 1,1,double >":
-        """multiplyDiagonal(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
+    def multiplyDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >":
+        r"""multiplyDiagonal(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
         return _math_linear.Matrix1x1_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 1,1,double >::Like_T &":
-        """__iadd__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
+    def __iadd__(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T &":
+        r"""__iadd__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
         return _math_linear.Matrix1x1___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 1,1,double >::Like_T &":
-        """__isub__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
+    def __isub__(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T &":
+        r"""__isub__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
         return _math_linear.Matrix1x1___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
-        """add(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
+    def add(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
+        r"""add(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
         return _math_linear.Matrix1x1_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
-        """subtract(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
+    def subtract(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
+        r"""subtract(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
         return _math_linear.Matrix1x1_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 1,1,double >":
-        """transpose(Matrix1x1 self) -> Matrix1x1"""
+        r"""transpose(Matrix1x1 self) -> Matrix1x1"""
         return _math_linear.Matrix1x1_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
-        """decomposeLU(Matrix1x1 self, VectorSizeT pivotsM) -> Matrix1x1"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
+        r"""decomposeLU(Matrix1x1 self, VectorSizeT pivotsM) -> Matrix1x1"""
         return _math_linear.Matrix1x1_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=1) -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
-        """
-        permute(Matrix1x1 self, VectorSizeT pivotsM, size_t n=1) -> Matrix1x1
-        permute(Matrix1x1 self, VectorSizeT pivotsM) -> Matrix1x1
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=1) -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
+        r"""permute(Matrix1x1 self, VectorSizeT pivotsM, size_t n=1) -> Matrix1x1"""
         return _math_linear.Matrix1x1_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix1x1 self) -> double"""
+        r"""normSq(Matrix1x1 self) -> double"""
         return _math_linear.Matrix1x1_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix1x1 self) -> double"""
+        r"""norm(Matrix1x1 self) -> double"""
         return _math_linear.Matrix1x1_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 1,1,double > &":
-        """normalize(Matrix1x1 self) -> Matrix1x1"""
+        r"""normalize(Matrix1x1 self) -> Matrix1x1"""
         return _math_linear.Matrix1x1_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
-        """unit(Matrix1x1 self) -> Matrix1x1"""
+        r"""unit(Matrix1x1 self) -> Matrix1x1"""
         return _math_linear.Matrix1x1_unit(self)
 
-
-    def __add__(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
-        """__add__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
+    def __add__(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
+        r"""__add__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
         return _math_linear.Matrix1x1___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
-        """__sub__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
+    def __sub__(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
+        r"""__sub__(Matrix1x1 self, Matrix1x1 mx) -> Matrix1x1"""
         return _math_linear.Matrix1x1___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
-        """__mul__(Matrix1x1 self, double scalar) -> Matrix1x1"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
+        r"""__mul__(Matrix1x1 self, double scalar) -> Matrix1x1"""
         return _math_linear.Matrix1x1___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix1x1___truediv__(self, *args)
     __div__ = __truediv__
@@ -812,71 +639,55 @@ class Matrix1x1(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 1,1,double >::Like_T":
-        """__neg__(Matrix1x1 self) -> Matrix1x1"""
+        r"""__neg__(Matrix1x1 self) -> Matrix1x1"""
         return _math_linear.Matrix1x1___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix1x1 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix1x1 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix1x1___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix1x1 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix1x1 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix1x1___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix1x1 self) -> std::string"""
+        r"""__str__(Matrix1x1 self) -> std::string"""
         return _math_linear.Matrix1x1___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix1x1 self) -> std_vector_vector_double"""
+        r"""vals(Matrix1x1 self) -> std_vector_vector_double"""
         return _math_linear.Matrix1x1_vals(self)
 
-Matrix1x1_swigregister = _math_linear.Matrix1x1_swigregister
-Matrix1x1_swigregister(Matrix1x1)
+# Register Matrix1x1 in _math_linear:
+_math_linear.Matrix1x1_swigregister(Matrix1x1)
 
-class Matrix1x2(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(1,2,double)> class."""
+class Matrix1x2(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 1,2,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix1x2, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix1x2, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix1x2_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix1x2_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix1x2_mRaw_get, _math_linear.Matrix1x2_mRaw_set)
+    mRaw = property(_math_linear.Matrix1x2_mRaw_get, _math_linear.Matrix1x2_mRaw_set, doc=r"""mRaw : a(1).a(2).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(1,2,double)> self) -> Matrix1x2
-        __init__(math::linear::MatrixMxN<(1,2,double)> self, double cv) -> Matrix1x2
-        __init__(math::linear::MatrixMxN<(1,2,double)> self, double const * raw) -> Matrix1x2
-        __init__(math::linear::MatrixMxN<(1,2,double)> self, std_vector_double raw) -> Matrix1x2
-        __init__(math::linear::MatrixMxN<(1,2,double)> self, Matrix1x2 mx) -> Matrix1x2
-        """
-        this = _math_linear.new_Matrix1x2(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix1x2 self) -> Matrix1x2
+        __init__(Matrix1x2 self, double cv) -> Matrix1x2
+        __init__(Matrix1x2 self, double const * raw) -> Matrix1x2
+        __init__(Matrix1x2 self, std_vector_double raw) -> Matrix1x2
+        __init__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2
+        """
+        _math_linear.Matrix1x2_swiginit(self, _math_linear.new_Matrix1x2(*args))
     __swig_destroy__ = _math_linear.delete_Matrix1x2
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix1x2 self, size_t i, size_t j) -> double const
         __call__(Matrix1x2 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix1x2___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix1x2 self, size_t i) -> double const
         row(Matrix1x2 self, size_t i) -> double
         row(Matrix1x2 self, size_t i, double const * vec)
@@ -884,9 +695,8 @@ class Matrix1x2(_object):
         """
         return _math_linear.Matrix1x2_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix1x2 self, size_t j) -> std_vector_double
         col(Matrix1x2 self, size_t j, double const * vec)
         col(Matrix1x2 self, size_t j, std_vector_double vec)
@@ -894,115 +704,90 @@ class Matrix1x2(_object):
         """
         return _math_linear.Matrix1x2_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix1x2 self) -> size_t"""
+        r"""rows(Matrix1x2 self) -> size_t"""
         return _math_linear.Matrix1x2_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix1x2 self) -> size_t"""
+        r"""cols(Matrix1x2 self) -> size_t"""
         return _math_linear.Matrix1x2_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix1x2 self) -> size_t"""
+        r"""size(Matrix1x2 self) -> size_t"""
         return _math_linear.Matrix1x2_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 1,2,double > &":
-        """scale(Matrix1x2 self, double scalar) -> Matrix1x2"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 1,2,double > &":
+        r"""scale(Matrix1x2 self, double scalar) -> Matrix1x2"""
         return _math_linear.Matrix1x2_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 1,2 >":
-        """multiply(Matrix1x2 self, double scalar) -> Matrix1x2"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 1,2 >":
+        r"""multiply(Matrix1x2 self, double scalar) -> Matrix1x2"""
         return _math_linear.Matrix1x2_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 1,2,double > &":
-        """scaleDiagonal(Matrix1x2 self, Matrix2x2 mx) -> Matrix1x2"""
+    def scaleDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 1,2,double > &":
+        r"""scaleDiagonal(Matrix1x2 self, Matrix2x2 mx) -> Matrix1x2"""
         return _math_linear.Matrix1x2_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 1,2,double >":
-        """multiplyDiagonal(Matrix1x2 self, Matrix2x2 mx) -> Matrix1x2"""
+    def multiplyDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 1,2,double >":
+        r"""multiplyDiagonal(Matrix1x2 self, Matrix2x2 mx) -> Matrix1x2"""
         return _math_linear.Matrix1x2_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix1x2') -> "math::linear::MatrixMxN< 1,2,double >::Like_T &":
-        """__iadd__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
+    def __iadd__(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T &":
+        r"""__iadd__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
         return _math_linear.Matrix1x2___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix1x2') -> "math::linear::MatrixMxN< 1,2,double >::Like_T &":
-        """__isub__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
+    def __isub__(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T &":
+        r"""__isub__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
         return _math_linear.Matrix1x2___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix1x2') -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
-        """add(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
+    def add(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
+        r"""add(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
         return _math_linear.Matrix1x2_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix1x2') -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
-        """subtract(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
+    def subtract(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
+        r"""subtract(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
         return _math_linear.Matrix1x2_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 2,1,double >":
-        """transpose(Matrix1x2 self) -> Matrix2x1"""
+        r"""transpose(Matrix1x2 self) -> Matrix2x1"""
         return _math_linear.Matrix1x2_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
-        """decomposeLU(Matrix1x2 self, VectorSizeT pivotsM) -> Matrix1x2"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
+        r"""decomposeLU(Matrix1x2 self, VectorSizeT pivotsM) -> Matrix1x2"""
         return _math_linear.Matrix1x2_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=2) -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
-        """
-        permute(Matrix1x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix1x2
-        permute(Matrix1x2 self, VectorSizeT pivotsM) -> Matrix1x2
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=2) -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
+        r"""permute(Matrix1x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix1x2"""
         return _math_linear.Matrix1x2_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix1x2 self) -> double"""
+        r"""normSq(Matrix1x2 self) -> double"""
         return _math_linear.Matrix1x2_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix1x2 self) -> double"""
+        r"""norm(Matrix1x2 self) -> double"""
         return _math_linear.Matrix1x2_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 1,2,double > &":
-        """normalize(Matrix1x2 self) -> Matrix1x2"""
+        r"""normalize(Matrix1x2 self) -> Matrix1x2"""
         return _math_linear.Matrix1x2_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
-        """unit(Matrix1x2 self) -> Matrix1x2"""
+        r"""unit(Matrix1x2 self) -> Matrix1x2"""
         return _math_linear.Matrix1x2_unit(self)
 
-
-    def __add__(self, mx: 'Matrix1x2') -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
-        """__add__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
+    def __add__(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
+        r"""__add__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
         return _math_linear.Matrix1x2___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix1x2') -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
-        """__sub__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
+    def __sub__(self, mx: "Matrix1x2") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
+        r"""__sub__(Matrix1x2 self, Matrix1x2 mx) -> Matrix1x2"""
         return _math_linear.Matrix1x2___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
-        """__mul__(Matrix1x2 self, double scalar) -> Matrix1x2"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
+        r"""__mul__(Matrix1x2 self, double scalar) -> Matrix1x2"""
         return _math_linear.Matrix1x2___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix1x2___truediv__(self, *args)
     __div__ = __truediv__
@@ -1010,71 +795,55 @@ class Matrix1x2(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 1,2,double >::Like_T":
-        """__neg__(Matrix1x2 self) -> Matrix1x2"""
+        r"""__neg__(Matrix1x2 self) -> Matrix1x2"""
         return _math_linear.Matrix1x2___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix1x2 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix1x2 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix1x2___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix1x2 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix1x2 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix1x2___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix1x2 self) -> std::string"""
+        r"""__str__(Matrix1x2 self) -> std::string"""
         return _math_linear.Matrix1x2___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix1x2 self) -> std_vector_vector_double"""
+        r"""vals(Matrix1x2 self) -> std_vector_vector_double"""
         return _math_linear.Matrix1x2_vals(self)
 
-Matrix1x2_swigregister = _math_linear.Matrix1x2_swigregister
-Matrix1x2_swigregister(Matrix1x2)
+# Register Matrix1x2 in _math_linear:
+_math_linear.Matrix1x2_swigregister(Matrix1x2)
 
-class Matrix1x3(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(1,3,double)> class."""
+class Matrix1x3(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 1,3,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix1x3, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix1x3, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix1x3_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix1x3_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix1x3_mRaw_get, _math_linear.Matrix1x3_mRaw_set)
+    mRaw = property(_math_linear.Matrix1x3_mRaw_get, _math_linear.Matrix1x3_mRaw_set, doc=r"""mRaw : a(1).a(3).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(1,3,double)> self) -> Matrix1x3
-        __init__(math::linear::MatrixMxN<(1,3,double)> self, double cv) -> Matrix1x3
-        __init__(math::linear::MatrixMxN<(1,3,double)> self, double const * raw) -> Matrix1x3
-        __init__(math::linear::MatrixMxN<(1,3,double)> self, std_vector_double raw) -> Matrix1x3
-        __init__(math::linear::MatrixMxN<(1,3,double)> self, Matrix1x3 mx) -> Matrix1x3
-        """
-        this = _math_linear.new_Matrix1x3(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix1x3 self) -> Matrix1x3
+        __init__(Matrix1x3 self, double cv) -> Matrix1x3
+        __init__(Matrix1x3 self, double const * raw) -> Matrix1x3
+        __init__(Matrix1x3 self, std_vector_double raw) -> Matrix1x3
+        __init__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3
+        """
+        _math_linear.Matrix1x3_swiginit(self, _math_linear.new_Matrix1x3(*args))
     __swig_destroy__ = _math_linear.delete_Matrix1x3
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix1x3 self, size_t i, size_t j) -> double const
         __call__(Matrix1x3 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix1x3___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix1x3 self, size_t i) -> double const
         row(Matrix1x3 self, size_t i) -> double
         row(Matrix1x3 self, size_t i, double const * vec)
@@ -1082,9 +851,8 @@ class Matrix1x3(_object):
         """
         return _math_linear.Matrix1x3_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix1x3 self, size_t j) -> std_vector_double
         col(Matrix1x3 self, size_t j, double const * vec)
         col(Matrix1x3 self, size_t j, std_vector_double vec)
@@ -1092,115 +860,90 @@ class Matrix1x3(_object):
         """
         return _math_linear.Matrix1x3_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix1x3 self) -> size_t"""
+        r"""rows(Matrix1x3 self) -> size_t"""
         return _math_linear.Matrix1x3_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix1x3 self) -> size_t"""
+        r"""cols(Matrix1x3 self) -> size_t"""
         return _math_linear.Matrix1x3_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix1x3 self) -> size_t"""
+        r"""size(Matrix1x3 self) -> size_t"""
         return _math_linear.Matrix1x3_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 1,3,double > &":
-        """scale(Matrix1x3 self, double scalar) -> Matrix1x3"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 1,3,double > &":
+        r"""scale(Matrix1x3 self, double scalar) -> Matrix1x3"""
         return _math_linear.Matrix1x3_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 1,3 >":
-        """multiply(Matrix1x3 self, double scalar) -> Matrix1x3"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 1,3 >":
+        r"""multiply(Matrix1x3 self, double scalar) -> Matrix1x3"""
         return _math_linear.Matrix1x3_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 1,3,double > &":
-        """scaleDiagonal(Matrix1x3 self, Matrix3x3 mx) -> Matrix1x3"""
+    def scaleDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 1,3,double > &":
+        r"""scaleDiagonal(Matrix1x3 self, Matrix3x3 mx) -> Matrix1x3"""
         return _math_linear.Matrix1x3_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 1,3,double >":
-        """multiplyDiagonal(Matrix1x3 self, Matrix3x3 mx) -> Matrix1x3"""
+    def multiplyDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 1,3,double >":
+        r"""multiplyDiagonal(Matrix1x3 self, Matrix3x3 mx) -> Matrix1x3"""
         return _math_linear.Matrix1x3_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix1x3') -> "math::linear::MatrixMxN< 1,3,double >::Like_T &":
-        """__iadd__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
+    def __iadd__(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T &":
+        r"""__iadd__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
         return _math_linear.Matrix1x3___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix1x3') -> "math::linear::MatrixMxN< 1,3,double >::Like_T &":
-        """__isub__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
+    def __isub__(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T &":
+        r"""__isub__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
         return _math_linear.Matrix1x3___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix1x3') -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
-        """add(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
+    def add(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
+        r"""add(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
         return _math_linear.Matrix1x3_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix1x3') -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
-        """subtract(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
+    def subtract(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
+        r"""subtract(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
         return _math_linear.Matrix1x3_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 3,1,double >":
-        """transpose(Matrix1x3 self) -> Matrix3x1"""
+        r"""transpose(Matrix1x3 self) -> Matrix3x1"""
         return _math_linear.Matrix1x3_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
-        """decomposeLU(Matrix1x3 self, VectorSizeT pivotsM) -> Matrix1x3"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
+        r"""decomposeLU(Matrix1x3 self, VectorSizeT pivotsM) -> Matrix1x3"""
         return _math_linear.Matrix1x3_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=3) -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
-        """
-        permute(Matrix1x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix1x3
-        permute(Matrix1x3 self, VectorSizeT pivotsM) -> Matrix1x3
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=3) -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
+        r"""permute(Matrix1x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix1x3"""
         return _math_linear.Matrix1x3_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix1x3 self) -> double"""
+        r"""normSq(Matrix1x3 self) -> double"""
         return _math_linear.Matrix1x3_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix1x3 self) -> double"""
+        r"""norm(Matrix1x3 self) -> double"""
         return _math_linear.Matrix1x3_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 1,3,double > &":
-        """normalize(Matrix1x3 self) -> Matrix1x3"""
+        r"""normalize(Matrix1x3 self) -> Matrix1x3"""
         return _math_linear.Matrix1x3_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
-        """unit(Matrix1x3 self) -> Matrix1x3"""
+        r"""unit(Matrix1x3 self) -> Matrix1x3"""
         return _math_linear.Matrix1x3_unit(self)
 
-
-    def __add__(self, mx: 'Matrix1x3') -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
-        """__add__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
+    def __add__(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
+        r"""__add__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
         return _math_linear.Matrix1x3___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix1x3') -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
-        """__sub__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
+    def __sub__(self, mx: "Matrix1x3") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
+        r"""__sub__(Matrix1x3 self, Matrix1x3 mx) -> Matrix1x3"""
         return _math_linear.Matrix1x3___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
-        """__mul__(Matrix1x3 self, double scalar) -> Matrix1x3"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
+        r"""__mul__(Matrix1x3 self, double scalar) -> Matrix1x3"""
         return _math_linear.Matrix1x3___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix1x3___truediv__(self, *args)
     __div__ = __truediv__
@@ -1208,71 +951,55 @@ class Matrix1x3(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 1,3,double >::Like_T":
-        """__neg__(Matrix1x3 self) -> Matrix1x3"""
+        r"""__neg__(Matrix1x3 self) -> Matrix1x3"""
         return _math_linear.Matrix1x3___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix1x3 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix1x3 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix1x3___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix1x3 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix1x3 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix1x3___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix1x3 self) -> std::string"""
+        r"""__str__(Matrix1x3 self) -> std::string"""
         return _math_linear.Matrix1x3___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix1x3 self) -> std_vector_vector_double"""
+        r"""vals(Matrix1x3 self) -> std_vector_vector_double"""
         return _math_linear.Matrix1x3_vals(self)
 
-Matrix1x3_swigregister = _math_linear.Matrix1x3_swigregister
-Matrix1x3_swigregister(Matrix1x3)
+# Register Matrix1x3 in _math_linear:
+_math_linear.Matrix1x3_swigregister(Matrix1x3)
 
-class Matrix2x1(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(2,1,double)> class."""
+class Matrix2x1(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 2,1,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix2x1, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix2x1, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix2x1_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix2x1_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix2x1_mRaw_get, _math_linear.Matrix2x1_mRaw_set)
+    mRaw = property(_math_linear.Matrix2x1_mRaw_get, _math_linear.Matrix2x1_mRaw_set, doc=r"""mRaw : a(2).a(1).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(2,1,double)> self) -> Matrix2x1
-        __init__(math::linear::MatrixMxN<(2,1,double)> self, double cv) -> Matrix2x1
-        __init__(math::linear::MatrixMxN<(2,1,double)> self, double const * raw) -> Matrix2x1
-        __init__(math::linear::MatrixMxN<(2,1,double)> self, std_vector_double raw) -> Matrix2x1
-        __init__(math::linear::MatrixMxN<(2,1,double)> self, Matrix2x1 mx) -> Matrix2x1
-        """
-        this = _math_linear.new_Matrix2x1(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix2x1 self) -> Matrix2x1
+        __init__(Matrix2x1 self, double cv) -> Matrix2x1
+        __init__(Matrix2x1 self, double const * raw) -> Matrix2x1
+        __init__(Matrix2x1 self, std_vector_double raw) -> Matrix2x1
+        __init__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1
+        """
+        _math_linear.Matrix2x1_swiginit(self, _math_linear.new_Matrix2x1(*args))
     __swig_destroy__ = _math_linear.delete_Matrix2x1
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix2x1 self, size_t i, size_t j) -> double const
         __call__(Matrix2x1 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix2x1___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix2x1 self, size_t i) -> double const
         row(Matrix2x1 self, size_t i) -> double
         row(Matrix2x1 self, size_t i, double const * vec)
@@ -1280,9 +1007,8 @@ class Matrix2x1(_object):
         """
         return _math_linear.Matrix2x1_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix2x1 self, size_t j) -> std_vector_double
         col(Matrix2x1 self, size_t j, double const * vec)
         col(Matrix2x1 self, size_t j, std_vector_double vec)
@@ -1290,115 +1016,90 @@ class Matrix2x1(_object):
         """
         return _math_linear.Matrix2x1_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix2x1 self) -> size_t"""
+        r"""rows(Matrix2x1 self) -> size_t"""
         return _math_linear.Matrix2x1_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix2x1 self) -> size_t"""
+        r"""cols(Matrix2x1 self) -> size_t"""
         return _math_linear.Matrix2x1_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix2x1 self) -> size_t"""
+        r"""size(Matrix2x1 self) -> size_t"""
         return _math_linear.Matrix2x1_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,1,double > &":
-        """scale(Matrix2x1 self, double scalar) -> Matrix2x1"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 2,1,double > &":
+        r"""scale(Matrix2x1 self, double scalar) -> Matrix2x1"""
         return _math_linear.Matrix2x1_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,1 >":
-        """multiply(Matrix2x1 self, double scalar) -> Matrix2x1"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 2,1 >":
+        r"""multiply(Matrix2x1 self, double scalar) -> Matrix2x1"""
         return _math_linear.Matrix2x1_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 2,1,double > &":
-        """scaleDiagonal(Matrix2x1 self, Matrix1x1 mx) -> Matrix2x1"""
+    def scaleDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 2,1,double > &":
+        r"""scaleDiagonal(Matrix2x1 self, Matrix1x1 mx) -> Matrix2x1"""
         return _math_linear.Matrix2x1_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 2,1,double >":
-        """multiplyDiagonal(Matrix2x1 self, Matrix1x1 mx) -> Matrix2x1"""
+    def multiplyDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 2,1,double >":
+        r"""multiplyDiagonal(Matrix2x1 self, Matrix1x1 mx) -> Matrix2x1"""
         return _math_linear.Matrix2x1_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix2x1') -> "math::linear::MatrixMxN< 2,1,double >::Like_T &":
-        """__iadd__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
+    def __iadd__(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T &":
+        r"""__iadd__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
         return _math_linear.Matrix2x1___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix2x1') -> "math::linear::MatrixMxN< 2,1,double >::Like_T &":
-        """__isub__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
+    def __isub__(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T &":
+        r"""__isub__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
         return _math_linear.Matrix2x1___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix2x1') -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
-        """add(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
+    def add(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
+        r"""add(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
         return _math_linear.Matrix2x1_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix2x1') -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
-        """subtract(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
+    def subtract(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
+        r"""subtract(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
         return _math_linear.Matrix2x1_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 1,2,double >":
-        """transpose(Matrix2x1 self) -> Matrix1x2"""
+        r"""transpose(Matrix2x1 self) -> Matrix1x2"""
         return _math_linear.Matrix2x1_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
-        """decomposeLU(Matrix2x1 self, VectorSizeT pivotsM) -> Matrix2x1"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
+        r"""decomposeLU(Matrix2x1 self, VectorSizeT pivotsM) -> Matrix2x1"""
         return _math_linear.Matrix2x1_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=1) -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
-        """
-        permute(Matrix2x1 self, VectorSizeT pivotsM, size_t n=1) -> Matrix2x1
-        permute(Matrix2x1 self, VectorSizeT pivotsM) -> Matrix2x1
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=1) -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
+        r"""permute(Matrix2x1 self, VectorSizeT pivotsM, size_t n=1) -> Matrix2x1"""
         return _math_linear.Matrix2x1_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix2x1 self) -> double"""
+        r"""normSq(Matrix2x1 self) -> double"""
         return _math_linear.Matrix2x1_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix2x1 self) -> double"""
+        r"""norm(Matrix2x1 self) -> double"""
         return _math_linear.Matrix2x1_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 2,1,double > &":
-        """normalize(Matrix2x1 self) -> Matrix2x1"""
+        r"""normalize(Matrix2x1 self) -> Matrix2x1"""
         return _math_linear.Matrix2x1_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
-        """unit(Matrix2x1 self) -> Matrix2x1"""
+        r"""unit(Matrix2x1 self) -> Matrix2x1"""
         return _math_linear.Matrix2x1_unit(self)
 
-
-    def __add__(self, mx: 'Matrix2x1') -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
-        """__add__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
+    def __add__(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
+        r"""__add__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
         return _math_linear.Matrix2x1___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix2x1') -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
-        """__sub__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
+    def __sub__(self, mx: "Matrix2x1") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
+        r"""__sub__(Matrix2x1 self, Matrix2x1 mx) -> Matrix2x1"""
         return _math_linear.Matrix2x1___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
-        """__mul__(Matrix2x1 self, double scalar) -> Matrix2x1"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
+        r"""__mul__(Matrix2x1 self, double scalar) -> Matrix2x1"""
         return _math_linear.Matrix2x1___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix2x1___truediv__(self, *args)
     __div__ = __truediv__
@@ -1406,71 +1107,55 @@ class Matrix2x1(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 2,1,double >::Like_T":
-        """__neg__(Matrix2x1 self) -> Matrix2x1"""
+        r"""__neg__(Matrix2x1 self) -> Matrix2x1"""
         return _math_linear.Matrix2x1___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix2x1 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix2x1 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix2x1___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix2x1 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix2x1 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix2x1___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix2x1 self) -> std::string"""
+        r"""__str__(Matrix2x1 self) -> std::string"""
         return _math_linear.Matrix2x1___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix2x1 self) -> std_vector_vector_double"""
+        r"""vals(Matrix2x1 self) -> std_vector_vector_double"""
         return _math_linear.Matrix2x1_vals(self)
 
-Matrix2x1_swigregister = _math_linear.Matrix2x1_swigregister
-Matrix2x1_swigregister(Matrix2x1)
+# Register Matrix2x1 in _math_linear:
+_math_linear.Matrix2x1_swigregister(Matrix2x1)
 
-class Matrix2x2(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(2,2,double)> class."""
+class Matrix2x2(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 2,2,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix2x2, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix2x2, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix2x2_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix2x2_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix2x2_mRaw_get, _math_linear.Matrix2x2_mRaw_set)
+    mRaw = property(_math_linear.Matrix2x2_mRaw_get, _math_linear.Matrix2x2_mRaw_set, doc=r"""mRaw : a(2).a(2).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(2,2,double)> self) -> Matrix2x2
-        __init__(math::linear::MatrixMxN<(2,2,double)> self, double cv) -> Matrix2x2
-        __init__(math::linear::MatrixMxN<(2,2,double)> self, double const * raw) -> Matrix2x2
-        __init__(math::linear::MatrixMxN<(2,2,double)> self, std_vector_double raw) -> Matrix2x2
-        __init__(math::linear::MatrixMxN<(2,2,double)> self, Matrix2x2 mx) -> Matrix2x2
-        """
-        this = _math_linear.new_Matrix2x2(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix2x2 self) -> Matrix2x2
+        __init__(Matrix2x2 self, double cv) -> Matrix2x2
+        __init__(Matrix2x2 self, double const * raw) -> Matrix2x2
+        __init__(Matrix2x2 self, std_vector_double raw) -> Matrix2x2
+        __init__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2
+        """
+        _math_linear.Matrix2x2_swiginit(self, _math_linear.new_Matrix2x2(*args))
     __swig_destroy__ = _math_linear.delete_Matrix2x2
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix2x2 self, size_t i, size_t j) -> double const
         __call__(Matrix2x2 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix2x2___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix2x2 self, size_t i) -> double const
         row(Matrix2x2 self, size_t i) -> double
         row(Matrix2x2 self, size_t i, double const * vec)
@@ -1478,9 +1163,8 @@ class Matrix2x2(_object):
         """
         return _math_linear.Matrix2x2_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix2x2 self, size_t j) -> std_vector_double
         col(Matrix2x2 self, size_t j, double const * vec)
         col(Matrix2x2 self, size_t j, std_vector_double vec)
@@ -1488,115 +1172,90 @@ class Matrix2x2(_object):
         """
         return _math_linear.Matrix2x2_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix2x2 self) -> size_t"""
+        r"""rows(Matrix2x2 self) -> size_t"""
         return _math_linear.Matrix2x2_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix2x2 self) -> size_t"""
+        r"""cols(Matrix2x2 self) -> size_t"""
         return _math_linear.Matrix2x2_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix2x2 self) -> size_t"""
+        r"""size(Matrix2x2 self) -> size_t"""
         return _math_linear.Matrix2x2_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,2,double > &":
-        """scale(Matrix2x2 self, double scalar) -> Matrix2x2"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 2,2,double > &":
+        r"""scale(Matrix2x2 self, double scalar) -> Matrix2x2"""
         return _math_linear.Matrix2x2_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,2 >":
-        """multiply(Matrix2x2 self, double scalar) -> Matrix2x2"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 2,2 >":
+        r"""multiply(Matrix2x2 self, double scalar) -> Matrix2x2"""
         return _math_linear.Matrix2x2_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 2,2,double > &":
-        """scaleDiagonal(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
+    def scaleDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double > &":
+        r"""scaleDiagonal(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
         return _math_linear.Matrix2x2_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 2,2,double >":
-        """multiplyDiagonal(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
+    def multiplyDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >":
+        r"""multiplyDiagonal(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
         return _math_linear.Matrix2x2_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 2,2,double >::Like_T &":
-        """__iadd__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
+    def __iadd__(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T &":
+        r"""__iadd__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
         return _math_linear.Matrix2x2___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 2,2,double >::Like_T &":
-        """__isub__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
+    def __isub__(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T &":
+        r"""__isub__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
         return _math_linear.Matrix2x2___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
-        """add(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
+    def add(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
+        r"""add(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
         return _math_linear.Matrix2x2_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
-        """subtract(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
+    def subtract(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
+        r"""subtract(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
         return _math_linear.Matrix2x2_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 2,2,double >":
-        """transpose(Matrix2x2 self) -> Matrix2x2"""
+        r"""transpose(Matrix2x2 self) -> Matrix2x2"""
         return _math_linear.Matrix2x2_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
-        """decomposeLU(Matrix2x2 self, VectorSizeT pivotsM) -> Matrix2x2"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
+        r"""decomposeLU(Matrix2x2 self, VectorSizeT pivotsM) -> Matrix2x2"""
         return _math_linear.Matrix2x2_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=2) -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
-        """
-        permute(Matrix2x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix2x2
-        permute(Matrix2x2 self, VectorSizeT pivotsM) -> Matrix2x2
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=2) -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
+        r"""permute(Matrix2x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix2x2"""
         return _math_linear.Matrix2x2_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix2x2 self) -> double"""
+        r"""normSq(Matrix2x2 self) -> double"""
         return _math_linear.Matrix2x2_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix2x2 self) -> double"""
+        r"""norm(Matrix2x2 self) -> double"""
         return _math_linear.Matrix2x2_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 2,2,double > &":
-        """normalize(Matrix2x2 self) -> Matrix2x2"""
+        r"""normalize(Matrix2x2 self) -> Matrix2x2"""
         return _math_linear.Matrix2x2_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
-        """unit(Matrix2x2 self) -> Matrix2x2"""
+        r"""unit(Matrix2x2 self) -> Matrix2x2"""
         return _math_linear.Matrix2x2_unit(self)
 
-
-    def __add__(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
-        """__add__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
+    def __add__(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
+        r"""__add__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
         return _math_linear.Matrix2x2___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
-        """__sub__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
+    def __sub__(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
+        r"""__sub__(Matrix2x2 self, Matrix2x2 mx) -> Matrix2x2"""
         return _math_linear.Matrix2x2___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
-        """__mul__(Matrix2x2 self, double scalar) -> Matrix2x2"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
+        r"""__mul__(Matrix2x2 self, double scalar) -> Matrix2x2"""
         return _math_linear.Matrix2x2___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix2x2___truediv__(self, *args)
     __div__ = __truediv__
@@ -1604,71 +1263,55 @@ class Matrix2x2(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 2,2,double >::Like_T":
-        """__neg__(Matrix2x2 self) -> Matrix2x2"""
+        r"""__neg__(Matrix2x2 self) -> Matrix2x2"""
         return _math_linear.Matrix2x2___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix2x2 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix2x2 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix2x2___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix2x2 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix2x2 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix2x2___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix2x2 self) -> std::string"""
+        r"""__str__(Matrix2x2 self) -> std::string"""
         return _math_linear.Matrix2x2___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix2x2 self) -> std_vector_vector_double"""
+        r"""vals(Matrix2x2 self) -> std_vector_vector_double"""
         return _math_linear.Matrix2x2_vals(self)
 
-Matrix2x2_swigregister = _math_linear.Matrix2x2_swigregister
-Matrix2x2_swigregister(Matrix2x2)
+# Register Matrix2x2 in _math_linear:
+_math_linear.Matrix2x2_swigregister(Matrix2x2)
 
-class Matrix2x3(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(2,3,double)> class."""
+class Matrix2x3(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 2,3,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix2x3, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix2x3, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix2x3_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix2x3_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix2x3_mRaw_get, _math_linear.Matrix2x3_mRaw_set)
+    mRaw = property(_math_linear.Matrix2x3_mRaw_get, _math_linear.Matrix2x3_mRaw_set, doc=r"""mRaw : a(2).a(3).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(2,3,double)> self) -> Matrix2x3
-        __init__(math::linear::MatrixMxN<(2,3,double)> self, double cv) -> Matrix2x3
-        __init__(math::linear::MatrixMxN<(2,3,double)> self, double const * raw) -> Matrix2x3
-        __init__(math::linear::MatrixMxN<(2,3,double)> self, std_vector_double raw) -> Matrix2x3
-        __init__(math::linear::MatrixMxN<(2,3,double)> self, Matrix2x3 mx) -> Matrix2x3
-        """
-        this = _math_linear.new_Matrix2x3(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix2x3 self) -> Matrix2x3
+        __init__(Matrix2x3 self, double cv) -> Matrix2x3
+        __init__(Matrix2x3 self, double const * raw) -> Matrix2x3
+        __init__(Matrix2x3 self, std_vector_double raw) -> Matrix2x3
+        __init__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3
+        """
+        _math_linear.Matrix2x3_swiginit(self, _math_linear.new_Matrix2x3(*args))
     __swig_destroy__ = _math_linear.delete_Matrix2x3
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix2x3 self, size_t i, size_t j) -> double const
         __call__(Matrix2x3 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix2x3___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix2x3 self, size_t i) -> double const
         row(Matrix2x3 self, size_t i) -> double
         row(Matrix2x3 self, size_t i, double const * vec)
@@ -1676,9 +1319,8 @@ class Matrix2x3(_object):
         """
         return _math_linear.Matrix2x3_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix2x3 self, size_t j) -> std_vector_double
         col(Matrix2x3 self, size_t j, double const * vec)
         col(Matrix2x3 self, size_t j, std_vector_double vec)
@@ -1686,115 +1328,90 @@ class Matrix2x3(_object):
         """
         return _math_linear.Matrix2x3_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix2x3 self) -> size_t"""
+        r"""rows(Matrix2x3 self) -> size_t"""
         return _math_linear.Matrix2x3_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix2x3 self) -> size_t"""
+        r"""cols(Matrix2x3 self) -> size_t"""
         return _math_linear.Matrix2x3_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix2x3 self) -> size_t"""
+        r"""size(Matrix2x3 self) -> size_t"""
         return _math_linear.Matrix2x3_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,3,double > &":
-        """scale(Matrix2x3 self, double scalar) -> Matrix2x3"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 2,3,double > &":
+        r"""scale(Matrix2x3 self, double scalar) -> Matrix2x3"""
         return _math_linear.Matrix2x3_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,3 >":
-        """multiply(Matrix2x3 self, double scalar) -> Matrix2x3"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 2,3 >":
+        r"""multiply(Matrix2x3 self, double scalar) -> Matrix2x3"""
         return _math_linear.Matrix2x3_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 2,3,double > &":
-        """scaleDiagonal(Matrix2x3 self, Matrix3x3 mx) -> Matrix2x3"""
+    def scaleDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 2,3,double > &":
+        r"""scaleDiagonal(Matrix2x3 self, Matrix3x3 mx) -> Matrix2x3"""
         return _math_linear.Matrix2x3_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 2,3,double >":
-        """multiplyDiagonal(Matrix2x3 self, Matrix3x3 mx) -> Matrix2x3"""
+    def multiplyDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 2,3,double >":
+        r"""multiplyDiagonal(Matrix2x3 self, Matrix3x3 mx) -> Matrix2x3"""
         return _math_linear.Matrix2x3_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix2x3') -> "math::linear::MatrixMxN< 2,3,double >::Like_T &":
-        """__iadd__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
+    def __iadd__(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T &":
+        r"""__iadd__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
         return _math_linear.Matrix2x3___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix2x3') -> "math::linear::MatrixMxN< 2,3,double >::Like_T &":
-        """__isub__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
+    def __isub__(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T &":
+        r"""__isub__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
         return _math_linear.Matrix2x3___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix2x3') -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
-        """add(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
+    def add(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
+        r"""add(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
         return _math_linear.Matrix2x3_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix2x3') -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
-        """subtract(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
+    def subtract(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
+        r"""subtract(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
         return _math_linear.Matrix2x3_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 3,2,double >":
-        """transpose(Matrix2x3 self) -> Matrix3x2"""
+        r"""transpose(Matrix2x3 self) -> Matrix3x2"""
         return _math_linear.Matrix2x3_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
-        """decomposeLU(Matrix2x3 self, VectorSizeT pivotsM) -> Matrix2x3"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
+        r"""decomposeLU(Matrix2x3 self, VectorSizeT pivotsM) -> Matrix2x3"""
         return _math_linear.Matrix2x3_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=3) -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
-        """
-        permute(Matrix2x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix2x3
-        permute(Matrix2x3 self, VectorSizeT pivotsM) -> Matrix2x3
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=3) -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
+        r"""permute(Matrix2x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix2x3"""
         return _math_linear.Matrix2x3_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix2x3 self) -> double"""
+        r"""normSq(Matrix2x3 self) -> double"""
         return _math_linear.Matrix2x3_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix2x3 self) -> double"""
+        r"""norm(Matrix2x3 self) -> double"""
         return _math_linear.Matrix2x3_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 2,3,double > &":
-        """normalize(Matrix2x3 self) -> Matrix2x3"""
+        r"""normalize(Matrix2x3 self) -> Matrix2x3"""
         return _math_linear.Matrix2x3_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
-        """unit(Matrix2x3 self) -> Matrix2x3"""
+        r"""unit(Matrix2x3 self) -> Matrix2x3"""
         return _math_linear.Matrix2x3_unit(self)
 
-
-    def __add__(self, mx: 'Matrix2x3') -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
-        """__add__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
+    def __add__(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
+        r"""__add__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
         return _math_linear.Matrix2x3___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix2x3') -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
-        """__sub__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
+    def __sub__(self, mx: "Matrix2x3") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
+        r"""__sub__(Matrix2x3 self, Matrix2x3 mx) -> Matrix2x3"""
         return _math_linear.Matrix2x3___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
-        """__mul__(Matrix2x3 self, double scalar) -> Matrix2x3"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
+        r"""__mul__(Matrix2x3 self, double scalar) -> Matrix2x3"""
         return _math_linear.Matrix2x3___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix2x3___truediv__(self, *args)
     __div__ = __truediv__
@@ -1802,71 +1419,55 @@ class Matrix2x3(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 2,3,double >::Like_T":
-        """__neg__(Matrix2x3 self) -> Matrix2x3"""
+        r"""__neg__(Matrix2x3 self) -> Matrix2x3"""
         return _math_linear.Matrix2x3___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix2x3 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix2x3 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix2x3___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix2x3 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix2x3 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix2x3___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix2x3 self) -> std::string"""
+        r"""__str__(Matrix2x3 self) -> std::string"""
         return _math_linear.Matrix2x3___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix2x3 self) -> std_vector_vector_double"""
+        r"""vals(Matrix2x3 self) -> std_vector_vector_double"""
         return _math_linear.Matrix2x3_vals(self)
 
-Matrix2x3_swigregister = _math_linear.Matrix2x3_swigregister
-Matrix2x3_swigregister(Matrix2x3)
+# Register Matrix2x3 in _math_linear:
+_math_linear.Matrix2x3_swigregister(Matrix2x3)
 
-class Matrix2x7(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(2,7,double)> class."""
+class Matrix2x7(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 2,7,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix2x7, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix2x7, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix2x7_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix2x7_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix2x7_mRaw_get, _math_linear.Matrix2x7_mRaw_set)
+    mRaw = property(_math_linear.Matrix2x7_mRaw_get, _math_linear.Matrix2x7_mRaw_set, doc=r"""mRaw : a(2).a(7).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(2,7,double)> self) -> Matrix2x7
-        __init__(math::linear::MatrixMxN<(2,7,double)> self, double cv) -> Matrix2x7
-        __init__(math::linear::MatrixMxN<(2,7,double)> self, double const * raw) -> Matrix2x7
-        __init__(math::linear::MatrixMxN<(2,7,double)> self, std_vector_double raw) -> Matrix2x7
-        __init__(math::linear::MatrixMxN<(2,7,double)> self, Matrix2x7 mx) -> Matrix2x7
-        """
-        this = _math_linear.new_Matrix2x7(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix2x7 self) -> Matrix2x7
+        __init__(Matrix2x7 self, double cv) -> Matrix2x7
+        __init__(Matrix2x7 self, double const * raw) -> Matrix2x7
+        __init__(Matrix2x7 self, std_vector_double raw) -> Matrix2x7
+        __init__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7
+        """
+        _math_linear.Matrix2x7_swiginit(self, _math_linear.new_Matrix2x7(*args))
     __swig_destroy__ = _math_linear.delete_Matrix2x7
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix2x7 self, size_t i, size_t j) -> double const
         __call__(Matrix2x7 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix2x7___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix2x7 self, size_t i) -> double const
         row(Matrix2x7 self, size_t i) -> double
         row(Matrix2x7 self, size_t i, double const * vec)
@@ -1874,9 +1475,8 @@ class Matrix2x7(_object):
         """
         return _math_linear.Matrix2x7_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix2x7 self, size_t j) -> std_vector_double
         col(Matrix2x7 self, size_t j, double const * vec)
         col(Matrix2x7 self, size_t j, std_vector_double vec)
@@ -1884,115 +1484,90 @@ class Matrix2x7(_object):
         """
         return _math_linear.Matrix2x7_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix2x7 self) -> size_t"""
+        r"""rows(Matrix2x7 self) -> size_t"""
         return _math_linear.Matrix2x7_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix2x7 self) -> size_t"""
+        r"""cols(Matrix2x7 self) -> size_t"""
         return _math_linear.Matrix2x7_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix2x7 self) -> size_t"""
+        r"""size(Matrix2x7 self) -> size_t"""
         return _math_linear.Matrix2x7_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,7,double > &":
-        """scale(Matrix2x7 self, double scalar) -> Matrix2x7"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 2,7,double > &":
+        r"""scale(Matrix2x7 self, double scalar) -> Matrix2x7"""
         return _math_linear.Matrix2x7_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,7 >":
-        """multiply(Matrix2x7 self, double scalar) -> Matrix2x7"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 2,7 >":
+        r"""multiply(Matrix2x7 self, double scalar) -> Matrix2x7"""
         return _math_linear.Matrix2x7_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 2,7,double > &":
-        """scaleDiagonal(Matrix2x7 self, Matrix7x7 mx) -> Matrix2x7"""
+    def scaleDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 2,7,double > &":
+        r"""scaleDiagonal(Matrix2x7 self, Matrix7x7 mx) -> Matrix2x7"""
         return _math_linear.Matrix2x7_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 2,7,double >":
-        """multiplyDiagonal(Matrix2x7 self, Matrix7x7 mx) -> Matrix2x7"""
+    def multiplyDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 2,7,double >":
+        r"""multiplyDiagonal(Matrix2x7 self, Matrix7x7 mx) -> Matrix2x7"""
         return _math_linear.Matrix2x7_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix2x7') -> "math::linear::MatrixMxN< 2,7,double >::Like_T &":
-        """__iadd__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
+    def __iadd__(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T &":
+        r"""__iadd__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
         return _math_linear.Matrix2x7___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix2x7') -> "math::linear::MatrixMxN< 2,7,double >::Like_T &":
-        """__isub__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
+    def __isub__(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T &":
+        r"""__isub__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
         return _math_linear.Matrix2x7___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix2x7') -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
-        """add(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
+    def add(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
+        r"""add(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
         return _math_linear.Matrix2x7_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix2x7') -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
-        """subtract(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
+    def subtract(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
+        r"""subtract(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
         return _math_linear.Matrix2x7_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 7,2,double >":
-        """transpose(Matrix2x7 self) -> Matrix7x2"""
+        r"""transpose(Matrix2x7 self) -> Matrix7x2"""
         return _math_linear.Matrix2x7_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
-        """decomposeLU(Matrix2x7 self, VectorSizeT pivotsM) -> Matrix2x7"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
+        r"""decomposeLU(Matrix2x7 self, VectorSizeT pivotsM) -> Matrix2x7"""
         return _math_linear.Matrix2x7_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=7) -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
-        """
-        permute(Matrix2x7 self, VectorSizeT pivotsM, size_t n=7) -> Matrix2x7
-        permute(Matrix2x7 self, VectorSizeT pivotsM) -> Matrix2x7
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=7) -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
+        r"""permute(Matrix2x7 self, VectorSizeT pivotsM, size_t n=7) -> Matrix2x7"""
         return _math_linear.Matrix2x7_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix2x7 self) -> double"""
+        r"""normSq(Matrix2x7 self) -> double"""
         return _math_linear.Matrix2x7_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix2x7 self) -> double"""
+        r"""norm(Matrix2x7 self) -> double"""
         return _math_linear.Matrix2x7_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 2,7,double > &":
-        """normalize(Matrix2x7 self) -> Matrix2x7"""
+        r"""normalize(Matrix2x7 self) -> Matrix2x7"""
         return _math_linear.Matrix2x7_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
-        """unit(Matrix2x7 self) -> Matrix2x7"""
+        r"""unit(Matrix2x7 self) -> Matrix2x7"""
         return _math_linear.Matrix2x7_unit(self)
 
-
-    def __add__(self, mx: 'Matrix2x7') -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
-        """__add__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
+    def __add__(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
+        r"""__add__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
         return _math_linear.Matrix2x7___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix2x7') -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
-        """__sub__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
+    def __sub__(self, mx: "Matrix2x7") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
+        r"""__sub__(Matrix2x7 self, Matrix2x7 mx) -> Matrix2x7"""
         return _math_linear.Matrix2x7___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
-        """__mul__(Matrix2x7 self, double scalar) -> Matrix2x7"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
+        r"""__mul__(Matrix2x7 self, double scalar) -> Matrix2x7"""
         return _math_linear.Matrix2x7___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix2x7___truediv__(self, *args)
     __div__ = __truediv__
@@ -2000,71 +1575,55 @@ class Matrix2x7(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 2,7,double >::Like_T":
-        """__neg__(Matrix2x7 self) -> Matrix2x7"""
+        r"""__neg__(Matrix2x7 self) -> Matrix2x7"""
         return _math_linear.Matrix2x7___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix2x7 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix2x7 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix2x7___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix2x7 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix2x7 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix2x7___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix2x7 self) -> std::string"""
+        r"""__str__(Matrix2x7 self) -> std::string"""
         return _math_linear.Matrix2x7___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix2x7 self) -> std_vector_vector_double"""
+        r"""vals(Matrix2x7 self) -> std_vector_vector_double"""
         return _math_linear.Matrix2x7_vals(self)
 
-Matrix2x7_swigregister = _math_linear.Matrix2x7_swigregister
-Matrix2x7_swigregister(Matrix2x7)
+# Register Matrix2x7 in _math_linear:
+_math_linear.Matrix2x7_swigregister(Matrix2x7)
 
-class Matrix3x1(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(3,1,double)> class."""
+class Matrix3x1(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 3,1,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3x1, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3x1, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix3x1_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix3x1_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix3x1_mRaw_get, _math_linear.Matrix3x1_mRaw_set)
+    mRaw = property(_math_linear.Matrix3x1_mRaw_get, _math_linear.Matrix3x1_mRaw_set, doc=r"""mRaw : a(3).a(1).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(3,1,double)> self) -> Matrix3x1
-        __init__(math::linear::MatrixMxN<(3,1,double)> self, double cv) -> Matrix3x1
-        __init__(math::linear::MatrixMxN<(3,1,double)> self, double const * raw) -> Matrix3x1
-        __init__(math::linear::MatrixMxN<(3,1,double)> self, std_vector_double raw) -> Matrix3x1
-        __init__(math::linear::MatrixMxN<(3,1,double)> self, Matrix3x1 mx) -> Matrix3x1
-        """
-        this = _math_linear.new_Matrix3x1(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix3x1 self) -> Matrix3x1
+        __init__(Matrix3x1 self, double cv) -> Matrix3x1
+        __init__(Matrix3x1 self, double const * raw) -> Matrix3x1
+        __init__(Matrix3x1 self, std_vector_double raw) -> Matrix3x1
+        __init__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1
+        """
+        _math_linear.Matrix3x1_swiginit(self, _math_linear.new_Matrix3x1(*args))
     __swig_destroy__ = _math_linear.delete_Matrix3x1
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix3x1 self, size_t i, size_t j) -> double const
         __call__(Matrix3x1 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix3x1___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix3x1 self, size_t i) -> double const
         row(Matrix3x1 self, size_t i) -> double
         row(Matrix3x1 self, size_t i, double const * vec)
@@ -2072,9 +1631,8 @@ class Matrix3x1(_object):
         """
         return _math_linear.Matrix3x1_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix3x1 self, size_t j) -> std_vector_double
         col(Matrix3x1 self, size_t j, double const * vec)
         col(Matrix3x1 self, size_t j, std_vector_double vec)
@@ -2082,115 +1640,90 @@ class Matrix3x1(_object):
         """
         return _math_linear.Matrix3x1_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix3x1 self) -> size_t"""
+        r"""rows(Matrix3x1 self) -> size_t"""
         return _math_linear.Matrix3x1_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix3x1 self) -> size_t"""
+        r"""cols(Matrix3x1 self) -> size_t"""
         return _math_linear.Matrix3x1_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix3x1 self) -> size_t"""
+        r"""size(Matrix3x1 self) -> size_t"""
         return _math_linear.Matrix3x1_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,1,double > &":
-        """scale(Matrix3x1 self, double scalar) -> Matrix3x1"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 3,1,double > &":
+        r"""scale(Matrix3x1 self, double scalar) -> Matrix3x1"""
         return _math_linear.Matrix3x1_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,1 >":
-        """multiply(Matrix3x1 self, double scalar) -> Matrix3x1"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 3,1 >":
+        r"""multiply(Matrix3x1 self, double scalar) -> Matrix3x1"""
         return _math_linear.Matrix3x1_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 3,1,double > &":
-        """scaleDiagonal(Matrix3x1 self, Matrix1x1 mx) -> Matrix3x1"""
+    def scaleDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 3,1,double > &":
+        r"""scaleDiagonal(Matrix3x1 self, Matrix1x1 mx) -> Matrix3x1"""
         return _math_linear.Matrix3x1_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix1x1') -> "math::linear::MatrixMxN< 3,1,double >":
-        """multiplyDiagonal(Matrix3x1 self, Matrix1x1 mx) -> Matrix3x1"""
+    def multiplyDiagonal(self, mx: "Matrix1x1") -> "math::linear::MatrixMxN< 3,1,double >":
+        r"""multiplyDiagonal(Matrix3x1 self, Matrix1x1 mx) -> Matrix3x1"""
         return _math_linear.Matrix3x1_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix3x1') -> "math::linear::MatrixMxN< 3,1,double >::Like_T &":
-        """__iadd__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
+    def __iadd__(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T &":
+        r"""__iadd__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
         return _math_linear.Matrix3x1___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix3x1') -> "math::linear::MatrixMxN< 3,1,double >::Like_T &":
-        """__isub__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
+    def __isub__(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T &":
+        r"""__isub__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
         return _math_linear.Matrix3x1___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix3x1') -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
-        """add(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
+    def add(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
+        r"""add(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
         return _math_linear.Matrix3x1_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix3x1') -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
-        """subtract(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
+    def subtract(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
+        r"""subtract(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
         return _math_linear.Matrix3x1_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 1,3,double >":
-        """transpose(Matrix3x1 self) -> Matrix1x3"""
+        r"""transpose(Matrix3x1 self) -> Matrix1x3"""
         return _math_linear.Matrix3x1_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
-        """decomposeLU(Matrix3x1 self, VectorSizeT pivotsM) -> Matrix3x1"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
+        r"""decomposeLU(Matrix3x1 self, VectorSizeT pivotsM) -> Matrix3x1"""
         return _math_linear.Matrix3x1_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=1) -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
-        """
-        permute(Matrix3x1 self, VectorSizeT pivotsM, size_t n=1) -> Matrix3x1
-        permute(Matrix3x1 self, VectorSizeT pivotsM) -> Matrix3x1
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=1) -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
+        r"""permute(Matrix3x1 self, VectorSizeT pivotsM, size_t n=1) -> Matrix3x1"""
         return _math_linear.Matrix3x1_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix3x1 self) -> double"""
+        r"""normSq(Matrix3x1 self) -> double"""
         return _math_linear.Matrix3x1_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix3x1 self) -> double"""
+        r"""norm(Matrix3x1 self) -> double"""
         return _math_linear.Matrix3x1_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 3,1,double > &":
-        """normalize(Matrix3x1 self) -> Matrix3x1"""
+        r"""normalize(Matrix3x1 self) -> Matrix3x1"""
         return _math_linear.Matrix3x1_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
-        """unit(Matrix3x1 self) -> Matrix3x1"""
+        r"""unit(Matrix3x1 self) -> Matrix3x1"""
         return _math_linear.Matrix3x1_unit(self)
 
-
-    def __add__(self, mx: 'Matrix3x1') -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
-        """__add__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
+    def __add__(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
+        r"""__add__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
         return _math_linear.Matrix3x1___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix3x1') -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
-        """__sub__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
+    def __sub__(self, mx: "Matrix3x1") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
+        r"""__sub__(Matrix3x1 self, Matrix3x1 mx) -> Matrix3x1"""
         return _math_linear.Matrix3x1___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
-        """__mul__(Matrix3x1 self, double scalar) -> Matrix3x1"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
+        r"""__mul__(Matrix3x1 self, double scalar) -> Matrix3x1"""
         return _math_linear.Matrix3x1___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix3x1___truediv__(self, *args)
     __div__ = __truediv__
@@ -2198,71 +1731,55 @@ class Matrix3x1(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 3,1,double >::Like_T":
-        """__neg__(Matrix3x1 self) -> Matrix3x1"""
+        r"""__neg__(Matrix3x1 self) -> Matrix3x1"""
         return _math_linear.Matrix3x1___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix3x1 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix3x1 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix3x1___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix3x1 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix3x1 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix3x1___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix3x1 self) -> std::string"""
+        r"""__str__(Matrix3x1 self) -> std::string"""
         return _math_linear.Matrix3x1___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix3x1 self) -> std_vector_vector_double"""
+        r"""vals(Matrix3x1 self) -> std_vector_vector_double"""
         return _math_linear.Matrix3x1_vals(self)
 
-Matrix3x1_swigregister = _math_linear.Matrix3x1_swigregister
-Matrix3x1_swigregister(Matrix3x1)
+# Register Matrix3x1 in _math_linear:
+_math_linear.Matrix3x1_swigregister(Matrix3x1)
 
-class Matrix3x2(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(3,2,double)> class."""
+class Matrix3x2(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 3,2,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3x2, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3x2, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix3x2_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix3x2_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix3x2_mRaw_get, _math_linear.Matrix3x2_mRaw_set)
+    mRaw = property(_math_linear.Matrix3x2_mRaw_get, _math_linear.Matrix3x2_mRaw_set, doc=r"""mRaw : a(3).a(2).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(3,2,double)> self) -> Matrix3x2
-        __init__(math::linear::MatrixMxN<(3,2,double)> self, double cv) -> Matrix3x2
-        __init__(math::linear::MatrixMxN<(3,2,double)> self, double const * raw) -> Matrix3x2
-        __init__(math::linear::MatrixMxN<(3,2,double)> self, std_vector_double raw) -> Matrix3x2
-        __init__(math::linear::MatrixMxN<(3,2,double)> self, Matrix3x2 mx) -> Matrix3x2
-        """
-        this = _math_linear.new_Matrix3x2(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix3x2 self) -> Matrix3x2
+        __init__(Matrix3x2 self, double cv) -> Matrix3x2
+        __init__(Matrix3x2 self, double const * raw) -> Matrix3x2
+        __init__(Matrix3x2 self, std_vector_double raw) -> Matrix3x2
+        __init__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2
+        """
+        _math_linear.Matrix3x2_swiginit(self, _math_linear.new_Matrix3x2(*args))
     __swig_destroy__ = _math_linear.delete_Matrix3x2
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix3x2 self, size_t i, size_t j) -> double const
         __call__(Matrix3x2 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix3x2___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix3x2 self, size_t i) -> double const
         row(Matrix3x2 self, size_t i) -> double
         row(Matrix3x2 self, size_t i, double const * vec)
@@ -2270,9 +1787,8 @@ class Matrix3x2(_object):
         """
         return _math_linear.Matrix3x2_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix3x2 self, size_t j) -> std_vector_double
         col(Matrix3x2 self, size_t j, double const * vec)
         col(Matrix3x2 self, size_t j, std_vector_double vec)
@@ -2280,115 +1796,90 @@ class Matrix3x2(_object):
         """
         return _math_linear.Matrix3x2_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix3x2 self) -> size_t"""
+        r"""rows(Matrix3x2 self) -> size_t"""
         return _math_linear.Matrix3x2_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix3x2 self) -> size_t"""
+        r"""cols(Matrix3x2 self) -> size_t"""
         return _math_linear.Matrix3x2_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix3x2 self) -> size_t"""
+        r"""size(Matrix3x2 self) -> size_t"""
         return _math_linear.Matrix3x2_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,2,double > &":
-        """scale(Matrix3x2 self, double scalar) -> Matrix3x2"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 3,2,double > &":
+        r"""scale(Matrix3x2 self, double scalar) -> Matrix3x2"""
         return _math_linear.Matrix3x2_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,2 >":
-        """multiply(Matrix3x2 self, double scalar) -> Matrix3x2"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 3,2 >":
+        r"""multiply(Matrix3x2 self, double scalar) -> Matrix3x2"""
         return _math_linear.Matrix3x2_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 3,2,double > &":
-        """scaleDiagonal(Matrix3x2 self, Matrix2x2 mx) -> Matrix3x2"""
+    def scaleDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 3,2,double > &":
+        r"""scaleDiagonal(Matrix3x2 self, Matrix2x2 mx) -> Matrix3x2"""
         return _math_linear.Matrix3x2_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 3,2,double >":
-        """multiplyDiagonal(Matrix3x2 self, Matrix2x2 mx) -> Matrix3x2"""
+    def multiplyDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 3,2,double >":
+        r"""multiplyDiagonal(Matrix3x2 self, Matrix2x2 mx) -> Matrix3x2"""
         return _math_linear.Matrix3x2_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix3x2') -> "math::linear::MatrixMxN< 3,2,double >::Like_T &":
-        """__iadd__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
+    def __iadd__(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T &":
+        r"""__iadd__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
         return _math_linear.Matrix3x2___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix3x2') -> "math::linear::MatrixMxN< 3,2,double >::Like_T &":
-        """__isub__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
+    def __isub__(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T &":
+        r"""__isub__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
         return _math_linear.Matrix3x2___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix3x2') -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
-        """add(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
+    def add(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
+        r"""add(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
         return _math_linear.Matrix3x2_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix3x2') -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
-        """subtract(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
+    def subtract(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
+        r"""subtract(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
         return _math_linear.Matrix3x2_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 2,3,double >":
-        """transpose(Matrix3x2 self) -> Matrix2x3"""
+        r"""transpose(Matrix3x2 self) -> Matrix2x3"""
         return _math_linear.Matrix3x2_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
-        """decomposeLU(Matrix3x2 self, VectorSizeT pivotsM) -> Matrix3x2"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
+        r"""decomposeLU(Matrix3x2 self, VectorSizeT pivotsM) -> Matrix3x2"""
         return _math_linear.Matrix3x2_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=2) -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
-        """
-        permute(Matrix3x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix3x2
-        permute(Matrix3x2 self, VectorSizeT pivotsM) -> Matrix3x2
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=2) -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
+        r"""permute(Matrix3x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix3x2"""
         return _math_linear.Matrix3x2_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix3x2 self) -> double"""
+        r"""normSq(Matrix3x2 self) -> double"""
         return _math_linear.Matrix3x2_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix3x2 self) -> double"""
+        r"""norm(Matrix3x2 self) -> double"""
         return _math_linear.Matrix3x2_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 3,2,double > &":
-        """normalize(Matrix3x2 self) -> Matrix3x2"""
+        r"""normalize(Matrix3x2 self) -> Matrix3x2"""
         return _math_linear.Matrix3x2_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
-        """unit(Matrix3x2 self) -> Matrix3x2"""
+        r"""unit(Matrix3x2 self) -> Matrix3x2"""
         return _math_linear.Matrix3x2_unit(self)
 
-
-    def __add__(self, mx: 'Matrix3x2') -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
-        """__add__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
+    def __add__(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
+        r"""__add__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
         return _math_linear.Matrix3x2___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix3x2') -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
-        """__sub__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
+    def __sub__(self, mx: "Matrix3x2") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
+        r"""__sub__(Matrix3x2 self, Matrix3x2 mx) -> Matrix3x2"""
         return _math_linear.Matrix3x2___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
-        """__mul__(Matrix3x2 self, double scalar) -> Matrix3x2"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
+        r"""__mul__(Matrix3x2 self, double scalar) -> Matrix3x2"""
         return _math_linear.Matrix3x2___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix3x2___truediv__(self, *args)
     __div__ = __truediv__
@@ -2396,71 +1887,55 @@ class Matrix3x2(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 3,2,double >::Like_T":
-        """__neg__(Matrix3x2 self) -> Matrix3x2"""
+        r"""__neg__(Matrix3x2 self) -> Matrix3x2"""
         return _math_linear.Matrix3x2___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix3x2 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix3x2 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix3x2___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix3x2 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix3x2 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix3x2___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix3x2 self) -> std::string"""
+        r"""__str__(Matrix3x2 self) -> std::string"""
         return _math_linear.Matrix3x2___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix3x2 self) -> std_vector_vector_double"""
+        r"""vals(Matrix3x2 self) -> std_vector_vector_double"""
         return _math_linear.Matrix3x2_vals(self)
 
-Matrix3x2_swigregister = _math_linear.Matrix3x2_swigregister
-Matrix3x2_swigregister(Matrix3x2)
+# Register Matrix3x2 in _math_linear:
+_math_linear.Matrix3x2_swigregister(Matrix3x2)
 
-class Matrix3x3(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(3,3,double)> class."""
+class Matrix3x3(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 3,3,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3x3, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3x3, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix3x3_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix3x3_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix3x3_mRaw_get, _math_linear.Matrix3x3_mRaw_set)
+    mRaw = property(_math_linear.Matrix3x3_mRaw_get, _math_linear.Matrix3x3_mRaw_set, doc=r"""mRaw : a(3).a(3).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(3,3,double)> self) -> Matrix3x3
-        __init__(math::linear::MatrixMxN<(3,3,double)> self, double cv) -> Matrix3x3
-        __init__(math::linear::MatrixMxN<(3,3,double)> self, double const * raw) -> Matrix3x3
-        __init__(math::linear::MatrixMxN<(3,3,double)> self, std_vector_double raw) -> Matrix3x3
-        __init__(math::linear::MatrixMxN<(3,3,double)> self, Matrix3x3 mx) -> Matrix3x3
-        """
-        this = _math_linear.new_Matrix3x3(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix3x3 self) -> Matrix3x3
+        __init__(Matrix3x3 self, double cv) -> Matrix3x3
+        __init__(Matrix3x3 self, double const * raw) -> Matrix3x3
+        __init__(Matrix3x3 self, std_vector_double raw) -> Matrix3x3
+        __init__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3
+        """
+        _math_linear.Matrix3x3_swiginit(self, _math_linear.new_Matrix3x3(*args))
     __swig_destroy__ = _math_linear.delete_Matrix3x3
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix3x3 self, size_t i, size_t j) -> double const
         __call__(Matrix3x3 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix3x3___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix3x3 self, size_t i) -> double const
         row(Matrix3x3 self, size_t i) -> double
         row(Matrix3x3 self, size_t i, double const * vec)
@@ -2468,9 +1943,8 @@ class Matrix3x3(_object):
         """
         return _math_linear.Matrix3x3_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix3x3 self, size_t j) -> std_vector_double
         col(Matrix3x3 self, size_t j, double const * vec)
         col(Matrix3x3 self, size_t j, std_vector_double vec)
@@ -2478,115 +1952,90 @@ class Matrix3x3(_object):
         """
         return _math_linear.Matrix3x3_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix3x3 self) -> size_t"""
+        r"""rows(Matrix3x3 self) -> size_t"""
         return _math_linear.Matrix3x3_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix3x3 self) -> size_t"""
+        r"""cols(Matrix3x3 self) -> size_t"""
         return _math_linear.Matrix3x3_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix3x3 self) -> size_t"""
+        r"""size(Matrix3x3 self) -> size_t"""
         return _math_linear.Matrix3x3_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,3,double > &":
-        """scale(Matrix3x3 self, double scalar) -> Matrix3x3"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 3,3,double > &":
+        r"""scale(Matrix3x3 self, double scalar) -> Matrix3x3"""
         return _math_linear.Matrix3x3_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,3 >":
-        """multiply(Matrix3x3 self, double scalar) -> Matrix3x3"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 3,3 >":
+        r"""multiply(Matrix3x3 self, double scalar) -> Matrix3x3"""
         return _math_linear.Matrix3x3_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 3,3,double > &":
-        """scaleDiagonal(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
+    def scaleDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double > &":
+        r"""scaleDiagonal(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
         return _math_linear.Matrix3x3_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 3,3,double >":
-        """multiplyDiagonal(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
+    def multiplyDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >":
+        r"""multiplyDiagonal(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
         return _math_linear.Matrix3x3_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 3,3,double >::Like_T &":
-        """__iadd__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
+    def __iadd__(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T &":
+        r"""__iadd__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
         return _math_linear.Matrix3x3___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 3,3,double >::Like_T &":
-        """__isub__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
+    def __isub__(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T &":
+        r"""__isub__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
         return _math_linear.Matrix3x3___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
-        """add(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
+    def add(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
+        r"""add(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
         return _math_linear.Matrix3x3_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
-        """subtract(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
+    def subtract(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
+        r"""subtract(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
         return _math_linear.Matrix3x3_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 3,3,double >":
-        """transpose(Matrix3x3 self) -> Matrix3x3"""
+        r"""transpose(Matrix3x3 self) -> Matrix3x3"""
         return _math_linear.Matrix3x3_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
-        """decomposeLU(Matrix3x3 self, VectorSizeT pivotsM) -> Matrix3x3"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
+        r"""decomposeLU(Matrix3x3 self, VectorSizeT pivotsM) -> Matrix3x3"""
         return _math_linear.Matrix3x3_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=3) -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
-        """
-        permute(Matrix3x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix3x3
-        permute(Matrix3x3 self, VectorSizeT pivotsM) -> Matrix3x3
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=3) -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
+        r"""permute(Matrix3x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix3x3"""
         return _math_linear.Matrix3x3_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix3x3 self) -> double"""
+        r"""normSq(Matrix3x3 self) -> double"""
         return _math_linear.Matrix3x3_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix3x3 self) -> double"""
+        r"""norm(Matrix3x3 self) -> double"""
         return _math_linear.Matrix3x3_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 3,3,double > &":
-        """normalize(Matrix3x3 self) -> Matrix3x3"""
+        r"""normalize(Matrix3x3 self) -> Matrix3x3"""
         return _math_linear.Matrix3x3_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
-        """unit(Matrix3x3 self) -> Matrix3x3"""
+        r"""unit(Matrix3x3 self) -> Matrix3x3"""
         return _math_linear.Matrix3x3_unit(self)
 
-
-    def __add__(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
-        """__add__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
+    def __add__(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
+        r"""__add__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
         return _math_linear.Matrix3x3___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
-        """__sub__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
+    def __sub__(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
+        r"""__sub__(Matrix3x3 self, Matrix3x3 mx) -> Matrix3x3"""
         return _math_linear.Matrix3x3___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
-        """__mul__(Matrix3x3 self, double scalar) -> Matrix3x3"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
+        r"""__mul__(Matrix3x3 self, double scalar) -> Matrix3x3"""
         return _math_linear.Matrix3x3___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix3x3___truediv__(self, *args)
     __div__ = __truediv__
@@ -2594,71 +2043,55 @@ class Matrix3x3(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 3,3,double >::Like_T":
-        """__neg__(Matrix3x3 self) -> Matrix3x3"""
+        r"""__neg__(Matrix3x3 self) -> Matrix3x3"""
         return _math_linear.Matrix3x3___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix3x3 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix3x3 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix3x3___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix3x3 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix3x3 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix3x3___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix3x3 self) -> std::string"""
+        r"""__str__(Matrix3x3 self) -> std::string"""
         return _math_linear.Matrix3x3___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix3x3 self) -> std_vector_vector_double"""
+        r"""vals(Matrix3x3 self) -> std_vector_vector_double"""
         return _math_linear.Matrix3x3_vals(self)
 
-Matrix3x3_swigregister = _math_linear.Matrix3x3_swigregister
-Matrix3x3_swigregister(Matrix3x3)
+# Register Matrix3x3 in _math_linear:
+_math_linear.Matrix3x3_swigregister(Matrix3x3)
 
-class Matrix3x7(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(3,7,double)> class."""
+class Matrix3x7(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 3,7,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3x7, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3x7, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix3x7_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix3x7_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix3x7_mRaw_get, _math_linear.Matrix3x7_mRaw_set)
+    mRaw = property(_math_linear.Matrix3x7_mRaw_get, _math_linear.Matrix3x7_mRaw_set, doc=r"""mRaw : a(3).a(7).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(3,7,double)> self) -> Matrix3x7
-        __init__(math::linear::MatrixMxN<(3,7,double)> self, double cv) -> Matrix3x7
-        __init__(math::linear::MatrixMxN<(3,7,double)> self, double const * raw) -> Matrix3x7
-        __init__(math::linear::MatrixMxN<(3,7,double)> self, std_vector_double raw) -> Matrix3x7
-        __init__(math::linear::MatrixMxN<(3,7,double)> self, Matrix3x7 mx) -> Matrix3x7
-        """
-        this = _math_linear.new_Matrix3x7(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix3x7 self) -> Matrix3x7
+        __init__(Matrix3x7 self, double cv) -> Matrix3x7
+        __init__(Matrix3x7 self, double const * raw) -> Matrix3x7
+        __init__(Matrix3x7 self, std_vector_double raw) -> Matrix3x7
+        __init__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7
+        """
+        _math_linear.Matrix3x7_swiginit(self, _math_linear.new_Matrix3x7(*args))
     __swig_destroy__ = _math_linear.delete_Matrix3x7
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix3x7 self, size_t i, size_t j) -> double const
         __call__(Matrix3x7 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix3x7___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix3x7 self, size_t i) -> double const
         row(Matrix3x7 self, size_t i) -> double
         row(Matrix3x7 self, size_t i, double const * vec)
@@ -2666,9 +2099,8 @@ class Matrix3x7(_object):
         """
         return _math_linear.Matrix3x7_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix3x7 self, size_t j) -> std_vector_double
         col(Matrix3x7 self, size_t j, double const * vec)
         col(Matrix3x7 self, size_t j, std_vector_double vec)
@@ -2676,115 +2108,90 @@ class Matrix3x7(_object):
         """
         return _math_linear.Matrix3x7_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix3x7 self) -> size_t"""
+        r"""rows(Matrix3x7 self) -> size_t"""
         return _math_linear.Matrix3x7_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix3x7 self) -> size_t"""
+        r"""cols(Matrix3x7 self) -> size_t"""
         return _math_linear.Matrix3x7_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix3x7 self) -> size_t"""
+        r"""size(Matrix3x7 self) -> size_t"""
         return _math_linear.Matrix3x7_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,7,double > &":
-        """scale(Matrix3x7 self, double scalar) -> Matrix3x7"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 3,7,double > &":
+        r"""scale(Matrix3x7 self, double scalar) -> Matrix3x7"""
         return _math_linear.Matrix3x7_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,7 >":
-        """multiply(Matrix3x7 self, double scalar) -> Matrix3x7"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 3,7 >":
+        r"""multiply(Matrix3x7 self, double scalar) -> Matrix3x7"""
         return _math_linear.Matrix3x7_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 3,7,double > &":
-        """scaleDiagonal(Matrix3x7 self, Matrix7x7 mx) -> Matrix3x7"""
+    def scaleDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 3,7,double > &":
+        r"""scaleDiagonal(Matrix3x7 self, Matrix7x7 mx) -> Matrix3x7"""
         return _math_linear.Matrix3x7_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 3,7,double >":
-        """multiplyDiagonal(Matrix3x7 self, Matrix7x7 mx) -> Matrix3x7"""
+    def multiplyDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 3,7,double >":
+        r"""multiplyDiagonal(Matrix3x7 self, Matrix7x7 mx) -> Matrix3x7"""
         return _math_linear.Matrix3x7_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix3x7') -> "math::linear::MatrixMxN< 3,7,double >::Like_T &":
-        """__iadd__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
+    def __iadd__(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T &":
+        r"""__iadd__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
         return _math_linear.Matrix3x7___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix3x7') -> "math::linear::MatrixMxN< 3,7,double >::Like_T &":
-        """__isub__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
+    def __isub__(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T &":
+        r"""__isub__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
         return _math_linear.Matrix3x7___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix3x7') -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
-        """add(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
+    def add(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
+        r"""add(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
         return _math_linear.Matrix3x7_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix3x7') -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
-        """subtract(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
+    def subtract(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
+        r"""subtract(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
         return _math_linear.Matrix3x7_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 7,3,double >":
-        """transpose(Matrix3x7 self) -> Matrix7x3"""
+        r"""transpose(Matrix3x7 self) -> Matrix7x3"""
         return _math_linear.Matrix3x7_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
-        """decomposeLU(Matrix3x7 self, VectorSizeT pivotsM) -> Matrix3x7"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
+        r"""decomposeLU(Matrix3x7 self, VectorSizeT pivotsM) -> Matrix3x7"""
         return _math_linear.Matrix3x7_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=7) -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
-        """
-        permute(Matrix3x7 self, VectorSizeT pivotsM, size_t n=7) -> Matrix3x7
-        permute(Matrix3x7 self, VectorSizeT pivotsM) -> Matrix3x7
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=7) -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
+        r"""permute(Matrix3x7 self, VectorSizeT pivotsM, size_t n=7) -> Matrix3x7"""
         return _math_linear.Matrix3x7_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix3x7 self) -> double"""
+        r"""normSq(Matrix3x7 self) -> double"""
         return _math_linear.Matrix3x7_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix3x7 self) -> double"""
+        r"""norm(Matrix3x7 self) -> double"""
         return _math_linear.Matrix3x7_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 3,7,double > &":
-        """normalize(Matrix3x7 self) -> Matrix3x7"""
+        r"""normalize(Matrix3x7 self) -> Matrix3x7"""
         return _math_linear.Matrix3x7_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
-        """unit(Matrix3x7 self) -> Matrix3x7"""
+        r"""unit(Matrix3x7 self) -> Matrix3x7"""
         return _math_linear.Matrix3x7_unit(self)
 
-
-    def __add__(self, mx: 'Matrix3x7') -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
-        """__add__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
+    def __add__(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
+        r"""__add__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
         return _math_linear.Matrix3x7___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix3x7') -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
-        """__sub__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
+    def __sub__(self, mx: "Matrix3x7") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
+        r"""__sub__(Matrix3x7 self, Matrix3x7 mx) -> Matrix3x7"""
         return _math_linear.Matrix3x7___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
-        """__mul__(Matrix3x7 self, double scalar) -> Matrix3x7"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
+        r"""__mul__(Matrix3x7 self, double scalar) -> Matrix3x7"""
         return _math_linear.Matrix3x7___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix3x7___truediv__(self, *args)
     __div__ = __truediv__
@@ -2792,71 +2199,55 @@ class Matrix3x7(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 3,7,double >::Like_T":
-        """__neg__(Matrix3x7 self) -> Matrix3x7"""
+        r"""__neg__(Matrix3x7 self) -> Matrix3x7"""
         return _math_linear.Matrix3x7___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix3x7 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix3x7 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix3x7___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix3x7 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix3x7 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix3x7___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix3x7 self) -> std::string"""
+        r"""__str__(Matrix3x7 self) -> std::string"""
         return _math_linear.Matrix3x7___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix3x7 self) -> std_vector_vector_double"""
+        r"""vals(Matrix3x7 self) -> std_vector_vector_double"""
         return _math_linear.Matrix3x7_vals(self)
 
-Matrix3x7_swigregister = _math_linear.Matrix3x7_swigregister
-Matrix3x7_swigregister(Matrix3x7)
+# Register Matrix3x7 in _math_linear:
+_math_linear.Matrix3x7_swigregister(Matrix3x7)
 
-class Matrix7x2(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(7,2,double)> class."""
+class Matrix7x2(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 7,2,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix7x2, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix7x2, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix7x2_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix7x2_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix7x2_mRaw_get, _math_linear.Matrix7x2_mRaw_set)
+    mRaw = property(_math_linear.Matrix7x2_mRaw_get, _math_linear.Matrix7x2_mRaw_set, doc=r"""mRaw : a(7).a(2).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(7,2,double)> self) -> Matrix7x2
-        __init__(math::linear::MatrixMxN<(7,2,double)> self, double cv) -> Matrix7x2
-        __init__(math::linear::MatrixMxN<(7,2,double)> self, double const * raw) -> Matrix7x2
-        __init__(math::linear::MatrixMxN<(7,2,double)> self, std_vector_double raw) -> Matrix7x2
-        __init__(math::linear::MatrixMxN<(7,2,double)> self, Matrix7x2 mx) -> Matrix7x2
-        """
-        this = _math_linear.new_Matrix7x2(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix7x2 self) -> Matrix7x2
+        __init__(Matrix7x2 self, double cv) -> Matrix7x2
+        __init__(Matrix7x2 self, double const * raw) -> Matrix7x2
+        __init__(Matrix7x2 self, std_vector_double raw) -> Matrix7x2
+        __init__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2
+        """
+        _math_linear.Matrix7x2_swiginit(self, _math_linear.new_Matrix7x2(*args))
     __swig_destroy__ = _math_linear.delete_Matrix7x2
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix7x2 self, size_t i, size_t j) -> double const
         __call__(Matrix7x2 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix7x2___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix7x2 self, size_t i) -> double const
         row(Matrix7x2 self, size_t i) -> double
         row(Matrix7x2 self, size_t i, double const * vec)
@@ -2864,9 +2255,8 @@ class Matrix7x2(_object):
         """
         return _math_linear.Matrix7x2_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix7x2 self, size_t j) -> std_vector_double
         col(Matrix7x2 self, size_t j, double const * vec)
         col(Matrix7x2 self, size_t j, std_vector_double vec)
@@ -2874,115 +2264,90 @@ class Matrix7x2(_object):
         """
         return _math_linear.Matrix7x2_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix7x2 self) -> size_t"""
+        r"""rows(Matrix7x2 self) -> size_t"""
         return _math_linear.Matrix7x2_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix7x2 self) -> size_t"""
+        r"""cols(Matrix7x2 self) -> size_t"""
         return _math_linear.Matrix7x2_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix7x2 self) -> size_t"""
+        r"""size(Matrix7x2 self) -> size_t"""
         return _math_linear.Matrix7x2_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 7,2,double > &":
-        """scale(Matrix7x2 self, double scalar) -> Matrix7x2"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 7,2,double > &":
+        r"""scale(Matrix7x2 self, double scalar) -> Matrix7x2"""
         return _math_linear.Matrix7x2_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 7,2 >":
-        """multiply(Matrix7x2 self, double scalar) -> Matrix7x2"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 7,2 >":
+        r"""multiply(Matrix7x2 self, double scalar) -> Matrix7x2"""
         return _math_linear.Matrix7x2_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 7,2,double > &":
-        """scaleDiagonal(Matrix7x2 self, Matrix2x2 mx) -> Matrix7x2"""
+    def scaleDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 7,2,double > &":
+        r"""scaleDiagonal(Matrix7x2 self, Matrix2x2 mx) -> Matrix7x2"""
         return _math_linear.Matrix7x2_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix2x2') -> "math::linear::MatrixMxN< 7,2,double >":
-        """multiplyDiagonal(Matrix7x2 self, Matrix2x2 mx) -> Matrix7x2"""
+    def multiplyDiagonal(self, mx: "Matrix2x2") -> "math::linear::MatrixMxN< 7,2,double >":
+        r"""multiplyDiagonal(Matrix7x2 self, Matrix2x2 mx) -> Matrix7x2"""
         return _math_linear.Matrix7x2_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix7x2') -> "math::linear::MatrixMxN< 7,2,double >::Like_T &":
-        """__iadd__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
+    def __iadd__(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T &":
+        r"""__iadd__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
         return _math_linear.Matrix7x2___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix7x2') -> "math::linear::MatrixMxN< 7,2,double >::Like_T &":
-        """__isub__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
+    def __isub__(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T &":
+        r"""__isub__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
         return _math_linear.Matrix7x2___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix7x2') -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
-        """add(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
+    def add(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
+        r"""add(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
         return _math_linear.Matrix7x2_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix7x2') -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
-        """subtract(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
+    def subtract(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
+        r"""subtract(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
         return _math_linear.Matrix7x2_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 2,7,double >":
-        """transpose(Matrix7x2 self) -> Matrix2x7"""
+        r"""transpose(Matrix7x2 self) -> Matrix2x7"""
         return _math_linear.Matrix7x2_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
-        """decomposeLU(Matrix7x2 self, VectorSizeT pivotsM) -> Matrix7x2"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
+        r"""decomposeLU(Matrix7x2 self, VectorSizeT pivotsM) -> Matrix7x2"""
         return _math_linear.Matrix7x2_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=2) -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
-        """
-        permute(Matrix7x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix7x2
-        permute(Matrix7x2 self, VectorSizeT pivotsM) -> Matrix7x2
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=2) -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
+        r"""permute(Matrix7x2 self, VectorSizeT pivotsM, size_t n=2) -> Matrix7x2"""
         return _math_linear.Matrix7x2_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix7x2 self) -> double"""
+        r"""normSq(Matrix7x2 self) -> double"""
         return _math_linear.Matrix7x2_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix7x2 self) -> double"""
+        r"""norm(Matrix7x2 self) -> double"""
         return _math_linear.Matrix7x2_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 7,2,double > &":
-        """normalize(Matrix7x2 self) -> Matrix7x2"""
+        r"""normalize(Matrix7x2 self) -> Matrix7x2"""
         return _math_linear.Matrix7x2_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
-        """unit(Matrix7x2 self) -> Matrix7x2"""
+        r"""unit(Matrix7x2 self) -> Matrix7x2"""
         return _math_linear.Matrix7x2_unit(self)
 
-
-    def __add__(self, mx: 'Matrix7x2') -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
-        """__add__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
+    def __add__(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
+        r"""__add__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
         return _math_linear.Matrix7x2___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix7x2') -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
-        """__sub__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
+    def __sub__(self, mx: "Matrix7x2") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
+        r"""__sub__(Matrix7x2 self, Matrix7x2 mx) -> Matrix7x2"""
         return _math_linear.Matrix7x2___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
-        """__mul__(Matrix7x2 self, double scalar) -> Matrix7x2"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
+        r"""__mul__(Matrix7x2 self, double scalar) -> Matrix7x2"""
         return _math_linear.Matrix7x2___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix7x2___truediv__(self, *args)
     __div__ = __truediv__
@@ -2990,71 +2355,55 @@ class Matrix7x2(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 7,2,double >::Like_T":
-        """__neg__(Matrix7x2 self) -> Matrix7x2"""
+        r"""__neg__(Matrix7x2 self) -> Matrix7x2"""
         return _math_linear.Matrix7x2___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix7x2 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix7x2 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix7x2___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix7x2 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix7x2 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix7x2___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix7x2 self) -> std::string"""
+        r"""__str__(Matrix7x2 self) -> std::string"""
         return _math_linear.Matrix7x2___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix7x2 self) -> std_vector_vector_double"""
+        r"""vals(Matrix7x2 self) -> std_vector_vector_double"""
         return _math_linear.Matrix7x2_vals(self)
 
-Matrix7x2_swigregister = _math_linear.Matrix7x2_swigregister
-Matrix7x2_swigregister(Matrix7x2)
+# Register Matrix7x2 in _math_linear:
+_math_linear.Matrix7x2_swigregister(Matrix7x2)
 
-class Matrix7x3(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(7,3,double)> class."""
+class Matrix7x3(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 7,3,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix7x3, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix7x3, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix7x3_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix7x3_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix7x3_mRaw_get, _math_linear.Matrix7x3_mRaw_set)
+    mRaw = property(_math_linear.Matrix7x3_mRaw_get, _math_linear.Matrix7x3_mRaw_set, doc=r"""mRaw : a(7).a(3).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(7,3,double)> self) -> Matrix7x3
-        __init__(math::linear::MatrixMxN<(7,3,double)> self, double cv) -> Matrix7x3
-        __init__(math::linear::MatrixMxN<(7,3,double)> self, double const * raw) -> Matrix7x3
-        __init__(math::linear::MatrixMxN<(7,3,double)> self, std_vector_double raw) -> Matrix7x3
-        __init__(math::linear::MatrixMxN<(7,3,double)> self, Matrix7x3 mx) -> Matrix7x3
-        """
-        this = _math_linear.new_Matrix7x3(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix7x3 self) -> Matrix7x3
+        __init__(Matrix7x3 self, double cv) -> Matrix7x3
+        __init__(Matrix7x3 self, double const * raw) -> Matrix7x3
+        __init__(Matrix7x3 self, std_vector_double raw) -> Matrix7x3
+        __init__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3
+        """
+        _math_linear.Matrix7x3_swiginit(self, _math_linear.new_Matrix7x3(*args))
     __swig_destroy__ = _math_linear.delete_Matrix7x3
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix7x3 self, size_t i, size_t j) -> double const
         __call__(Matrix7x3 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix7x3___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix7x3 self, size_t i) -> double const
         row(Matrix7x3 self, size_t i) -> double
         row(Matrix7x3 self, size_t i, double const * vec)
@@ -3062,9 +2411,8 @@ class Matrix7x3(_object):
         """
         return _math_linear.Matrix7x3_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix7x3 self, size_t j) -> std_vector_double
         col(Matrix7x3 self, size_t j, double const * vec)
         col(Matrix7x3 self, size_t j, std_vector_double vec)
@@ -3072,115 +2420,90 @@ class Matrix7x3(_object):
         """
         return _math_linear.Matrix7x3_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix7x3 self) -> size_t"""
+        r"""rows(Matrix7x3 self) -> size_t"""
         return _math_linear.Matrix7x3_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix7x3 self) -> size_t"""
+        r"""cols(Matrix7x3 self) -> size_t"""
         return _math_linear.Matrix7x3_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix7x3 self) -> size_t"""
+        r"""size(Matrix7x3 self) -> size_t"""
         return _math_linear.Matrix7x3_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 7,3,double > &":
-        """scale(Matrix7x3 self, double scalar) -> Matrix7x3"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 7,3,double > &":
+        r"""scale(Matrix7x3 self, double scalar) -> Matrix7x3"""
         return _math_linear.Matrix7x3_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 7,3 >":
-        """multiply(Matrix7x3 self, double scalar) -> Matrix7x3"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 7,3 >":
+        r"""multiply(Matrix7x3 self, double scalar) -> Matrix7x3"""
         return _math_linear.Matrix7x3_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 7,3,double > &":
-        """scaleDiagonal(Matrix7x3 self, Matrix3x3 mx) -> Matrix7x3"""
+    def scaleDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 7,3,double > &":
+        r"""scaleDiagonal(Matrix7x3 self, Matrix3x3 mx) -> Matrix7x3"""
         return _math_linear.Matrix7x3_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix3x3') -> "math::linear::MatrixMxN< 7,3,double >":
-        """multiplyDiagonal(Matrix7x3 self, Matrix3x3 mx) -> Matrix7x3"""
+    def multiplyDiagonal(self, mx: "Matrix3x3") -> "math::linear::MatrixMxN< 7,3,double >":
+        r"""multiplyDiagonal(Matrix7x3 self, Matrix3x3 mx) -> Matrix7x3"""
         return _math_linear.Matrix7x3_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix7x3') -> "math::linear::MatrixMxN< 7,3,double >::Like_T &":
-        """__iadd__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
+    def __iadd__(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T &":
+        r"""__iadd__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
         return _math_linear.Matrix7x3___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix7x3') -> "math::linear::MatrixMxN< 7,3,double >::Like_T &":
-        """__isub__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
+    def __isub__(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T &":
+        r"""__isub__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
         return _math_linear.Matrix7x3___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix7x3') -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
-        """add(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
+    def add(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
+        r"""add(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
         return _math_linear.Matrix7x3_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix7x3') -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
-        """subtract(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
+    def subtract(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
+        r"""subtract(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
         return _math_linear.Matrix7x3_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 3,7,double >":
-        """transpose(Matrix7x3 self) -> Matrix3x7"""
+        r"""transpose(Matrix7x3 self) -> Matrix3x7"""
         return _math_linear.Matrix7x3_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
-        """decomposeLU(Matrix7x3 self, VectorSizeT pivotsM) -> Matrix7x3"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
+        r"""decomposeLU(Matrix7x3 self, VectorSizeT pivotsM) -> Matrix7x3"""
         return _math_linear.Matrix7x3_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=3) -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
-        """
-        permute(Matrix7x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix7x3
-        permute(Matrix7x3 self, VectorSizeT pivotsM) -> Matrix7x3
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=3) -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
+        r"""permute(Matrix7x3 self, VectorSizeT pivotsM, size_t n=3) -> Matrix7x3"""
         return _math_linear.Matrix7x3_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix7x3 self) -> double"""
+        r"""normSq(Matrix7x3 self) -> double"""
         return _math_linear.Matrix7x3_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix7x3 self) -> double"""
+        r"""norm(Matrix7x3 self) -> double"""
         return _math_linear.Matrix7x3_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 7,3,double > &":
-        """normalize(Matrix7x3 self) -> Matrix7x3"""
+        r"""normalize(Matrix7x3 self) -> Matrix7x3"""
         return _math_linear.Matrix7x3_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
-        """unit(Matrix7x3 self) -> Matrix7x3"""
+        r"""unit(Matrix7x3 self) -> Matrix7x3"""
         return _math_linear.Matrix7x3_unit(self)
 
-
-    def __add__(self, mx: 'Matrix7x3') -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
-        """__add__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
+    def __add__(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
+        r"""__add__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
         return _math_linear.Matrix7x3___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix7x3') -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
-        """__sub__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
+    def __sub__(self, mx: "Matrix7x3") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
+        r"""__sub__(Matrix7x3 self, Matrix7x3 mx) -> Matrix7x3"""
         return _math_linear.Matrix7x3___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
-        """__mul__(Matrix7x3 self, double scalar) -> Matrix7x3"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
+        r"""__mul__(Matrix7x3 self, double scalar) -> Matrix7x3"""
         return _math_linear.Matrix7x3___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix7x3___truediv__(self, *args)
     __div__ = __truediv__
@@ -3188,71 +2511,55 @@ class Matrix7x3(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 7,3,double >::Like_T":
-        """__neg__(Matrix7x3 self) -> Matrix7x3"""
+        r"""__neg__(Matrix7x3 self) -> Matrix7x3"""
         return _math_linear.Matrix7x3___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix7x3 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix7x3 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix7x3___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix7x3 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix7x3 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix7x3___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix7x3 self) -> std::string"""
+        r"""__str__(Matrix7x3 self) -> std::string"""
         return _math_linear.Matrix7x3___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix7x3 self) -> std_vector_vector_double"""
+        r"""vals(Matrix7x3 self) -> std_vector_vector_double"""
         return _math_linear.Matrix7x3_vals(self)
 
-Matrix7x3_swigregister = _math_linear.Matrix7x3_swigregister
-Matrix7x3_swigregister(Matrix7x3)
+# Register Matrix7x3 in _math_linear:
+_math_linear.Matrix7x3_swigregister(Matrix7x3)
 
-class Matrix7x7(_object):
-    """Proxy of C++ math::linear::MatrixMxN<(7,7,double)> class."""
+class Matrix7x7(object):
+    r"""Proxy of C++ math::linear::MatrixMxN< 7,7,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix7x7, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Matrix7x7, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["mRaw"] = _math_linear.Matrix7x7_mRaw_set
-    __swig_getmethods__["mRaw"] = _math_linear.Matrix7x7_mRaw_get
-    if _newclass:
-        mRaw = _swig_property(_math_linear.Matrix7x7_mRaw_get, _math_linear.Matrix7x7_mRaw_set)
+    mRaw = property(_math_linear.Matrix7x7_mRaw_get, _math_linear.Matrix7x7_mRaw_set, doc=r"""mRaw : a(7).a(7).double""")
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::MatrixMxN<(7,7,double)> self) -> Matrix7x7
-        __init__(math::linear::MatrixMxN<(7,7,double)> self, double cv) -> Matrix7x7
-        __init__(math::linear::MatrixMxN<(7,7,double)> self, double const * raw) -> Matrix7x7
-        __init__(math::linear::MatrixMxN<(7,7,double)> self, std_vector_double raw) -> Matrix7x7
-        __init__(math::linear::MatrixMxN<(7,7,double)> self, Matrix7x7 mx) -> Matrix7x7
-        """
-        this = _math_linear.new_Matrix7x7(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Matrix7x7 self) -> Matrix7x7
+        __init__(Matrix7x7 self, double cv) -> Matrix7x7
+        __init__(Matrix7x7 self, double const * raw) -> Matrix7x7
+        __init__(Matrix7x7 self, std_vector_double raw) -> Matrix7x7
+        __init__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7
+        """
+        _math_linear.Matrix7x7_swiginit(self, _math_linear.new_Matrix7x7(*args))
     __swig_destroy__ = _math_linear.delete_Matrix7x7
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(Matrix7x7 self, size_t i, size_t j) -> double const
         __call__(Matrix7x7 self, size_t i, size_t j) -> double &
         """
         return _math_linear.Matrix7x7___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(Matrix7x7 self, size_t i) -> double const
         row(Matrix7x7 self, size_t i) -> double
         row(Matrix7x7 self, size_t i, double const * vec)
@@ -3260,9 +2567,8 @@ class Matrix7x7(_object):
         """
         return _math_linear.Matrix7x7_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(Matrix7x7 self, size_t j) -> std_vector_double
         col(Matrix7x7 self, size_t j, double const * vec)
         col(Matrix7x7 self, size_t j, std_vector_double vec)
@@ -3270,115 +2576,90 @@ class Matrix7x7(_object):
         """
         return _math_linear.Matrix7x7_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(Matrix7x7 self) -> size_t"""
+        r"""rows(Matrix7x7 self) -> size_t"""
         return _math_linear.Matrix7x7_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(Matrix7x7 self) -> size_t"""
+        r"""cols(Matrix7x7 self) -> size_t"""
         return _math_linear.Matrix7x7_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(Matrix7x7 self) -> size_t"""
+        r"""size(Matrix7x7 self) -> size_t"""
         return _math_linear.Matrix7x7_size(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::MatrixMxN< 7,7,double > &":
-        """scale(Matrix7x7 self, double scalar) -> Matrix7x7"""
+    def scale(self, scalar: "double") -> "math::linear::MatrixMxN< 7,7,double > &":
+        r"""scale(Matrix7x7 self, double scalar) -> Matrix7x7"""
         return _math_linear.Matrix7x7_scale(self, scalar)
 
-
-    def multiply(self, scalar: 'double') -> "math::linear::MatrixMxN< 7,7 >":
-        """multiply(Matrix7x7 self, double scalar) -> Matrix7x7"""
+    def multiply(self, scalar: "double") -> "math::linear::MatrixMxN< 7,7 >":
+        r"""multiply(Matrix7x7 self, double scalar) -> Matrix7x7"""
         return _math_linear.Matrix7x7_multiply(self, scalar)
 
-
-    def scaleDiagonal(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 7,7,double > &":
-        """scaleDiagonal(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
+    def scaleDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double > &":
+        r"""scaleDiagonal(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
         return _math_linear.Matrix7x7_scaleDiagonal(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 7,7,double >":
-        """multiplyDiagonal(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
+    def multiplyDiagonal(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >":
+        r"""multiplyDiagonal(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
         return _math_linear.Matrix7x7_multiplyDiagonal(self, mx)
 
-
-    def __iadd__(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 7,7,double >::Like_T &":
-        """__iadd__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
+    def __iadd__(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T &":
+        r"""__iadd__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
         return _math_linear.Matrix7x7___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 7,7,double >::Like_T &":
-        """__isub__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
+    def __isub__(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T &":
+        r"""__isub__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
         return _math_linear.Matrix7x7___isub__(self, mx)
 
-
-    def add(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
-        """add(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
+    def add(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
+        r"""add(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
         return _math_linear.Matrix7x7_add(self, mx)
 
-
-    def subtract(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
-        """subtract(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
+    def subtract(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
+        r"""subtract(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
         return _math_linear.Matrix7x7_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::MatrixMxN< 7,7,double >":
-        """transpose(Matrix7x7 self) -> Matrix7x7"""
+        r"""transpose(Matrix7x7 self) -> Matrix7x7"""
         return _math_linear.Matrix7x7_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
-        """decomposeLU(Matrix7x7 self, VectorSizeT pivotsM) -> Matrix7x7"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
+        r"""decomposeLU(Matrix7x7 self, VectorSizeT pivotsM) -> Matrix7x7"""
         return _math_linear.Matrix7x7_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=7) -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
-        """
-        permute(Matrix7x7 self, VectorSizeT pivotsM, size_t n=7) -> Matrix7x7
-        permute(Matrix7x7 self, VectorSizeT pivotsM) -> Matrix7x7
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=7) -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
+        r"""permute(Matrix7x7 self, VectorSizeT pivotsM, size_t n=7) -> Matrix7x7"""
         return _math_linear.Matrix7x7_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(Matrix7x7 self) -> double"""
+        r"""normSq(Matrix7x7 self) -> double"""
         return _math_linear.Matrix7x7_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(Matrix7x7 self) -> double"""
+        r"""norm(Matrix7x7 self) -> double"""
         return _math_linear.Matrix7x7_norm(self)
 
-
     def normalize(self) -> "math::linear::MatrixMxN< 7,7,double > &":
-        """normalize(Matrix7x7 self) -> Matrix7x7"""
+        r"""normalize(Matrix7x7 self) -> Matrix7x7"""
         return _math_linear.Matrix7x7_normalize(self)
 
-
     def unit(self) -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
-        """unit(Matrix7x7 self) -> Matrix7x7"""
+        r"""unit(Matrix7x7 self) -> Matrix7x7"""
         return _math_linear.Matrix7x7_unit(self)
 
-
-    def __add__(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
-        """__add__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
+    def __add__(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
+        r"""__add__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
         return _math_linear.Matrix7x7___add__(self, mx)
 
-
-    def __sub__(self, mx: 'Matrix7x7') -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
-        """__sub__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
+    def __sub__(self, mx: "Matrix7x7") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
+        r"""__sub__(Matrix7x7 self, Matrix7x7 mx) -> Matrix7x7"""
         return _math_linear.Matrix7x7___sub__(self, mx)
 
-
-    def __mul__(self, scalar: 'double') -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
-        """__mul__(Matrix7x7 self, double scalar) -> Matrix7x7"""
+    def __mul__(self, scalar: "double") -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
+        r"""__mul__(Matrix7x7 self, double scalar) -> Matrix7x7"""
         return _math_linear.Matrix7x7___mul__(self, scalar)
 
-
     def __truediv__(self, *args):
         return _math_linear.Matrix7x7___truediv__(self, *args)
     __div__ = __truediv__
@@ -3386,154 +2667,124 @@ class Matrix7x7(_object):
 
 
     def __neg__(self) -> "math::linear::MatrixMxN< 7,7,double >::Like_T":
-        """__neg__(Matrix7x7 self) -> Matrix7x7"""
+        r"""__neg__(Matrix7x7 self) -> Matrix7x7"""
         return _math_linear.Matrix7x7___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Matrix7x7 self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Matrix7x7 self, PyObject * inObj) -> double"""
         return _math_linear.Matrix7x7___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Matrix7x7 self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Matrix7x7 self, PyObject * inObj, double val)"""
         return _math_linear.Matrix7x7___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Matrix7x7 self) -> std::string"""
+        r"""__str__(Matrix7x7 self) -> std::string"""
         return _math_linear.Matrix7x7___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(Matrix7x7 self) -> std_vector_vector_double"""
+        r"""vals(Matrix7x7 self) -> std_vector_vector_double"""
         return _math_linear.Matrix7x7_vals(self)
 
-Matrix7x7_swigregister = _math_linear.Matrix7x7_swigregister
-Matrix7x7_swigregister(Matrix7x7)
+# Register Matrix7x7 in _math_linear:
+_math_linear.Matrix7x7_swigregister(Matrix7x7)
 
-class Vector2(_object):
-    """Proxy of C++ math::linear::VectorN<(2,double)> class."""
+class Vector2(object):
+    r"""Proxy of C++ math::linear::VectorN< 2,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector2, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Vector2, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::VectorN<(2,double)> self) -> Vector2
-        __init__(math::linear::VectorN<(2,double)> self, double sv) -> Vector2
-        __init__(math::linear::VectorN<(2,double)> self, double const * raw) -> Vector2
-        __init__(math::linear::VectorN<(2,double)> self, Vector2 v) -> Vector2
-        __init__(math::linear::VectorN<(2,double)> self, Matrix2x1 mx) -> Vector2
-        __init__(math::linear::VectorN<(2,double)> self, std_vector_double raw) -> Vector2
-        """
-        this = _math_linear.new_Vector2(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Vector2 self) -> Vector2
+        __init__(Vector2 self, double sv) -> Vector2
+        __init__(Vector2 self, double const * raw) -> Vector2
+        __init__(Vector2 self, Vector2 v) -> Vector2
+        __init__(Vector2 self, Matrix2x1 mx) -> Vector2
+        __init__(Vector2 self, std_vector_double raw) -> Vector2
+        """
+        _math_linear.Vector2_swiginit(self, _math_linear.new_Vector2(*args))
     __swig_destroy__ = _math_linear.delete_Vector2
-    __del__ = lambda self: None
 
     def matrix(self, *args) -> "math::linear::MatrixMxN< 2,1,double > const &":
-        """
+        r"""
         matrix(Vector2 self) -> Matrix2x1
         matrix(Vector2 self) -> Matrix2x1
         """
         return _math_linear.Vector2_matrix(self, *args)
 
-
     def size(self) -> "size_t":
-        """size(Vector2 self) -> size_t"""
+        r"""size(Vector2 self) -> size_t"""
         return _math_linear.Vector2_size(self)
 
-
-    def dot(self, vec: 'Vector2') -> "double":
-        """dot(Vector2 self, Vector2 vec) -> double"""
+    def dot(self, vec: "Vector2") -> "double":
+        r"""dot(Vector2 self, Vector2 vec) -> double"""
         return _math_linear.Vector2_dot(self, vec)
 
-
-    def normDot(self, vec: 'Vector2') -> "double":
-        """normDot(Vector2 self, Vector2 vec) -> double"""
+    def normDot(self, vec: "Vector2") -> "double":
+        r"""normDot(Vector2 self, Vector2 vec) -> double"""
         return _math_linear.Vector2_normDot(self, vec)
 
-
     def norm(self) -> "double":
-        """norm(Vector2 self) -> double"""
+        r"""norm(Vector2 self) -> double"""
         return _math_linear.Vector2_norm(self)
 
-
     def normSq(self) -> "double":
-        """normSq(Vector2 self) -> double"""
+        r"""normSq(Vector2 self) -> double"""
         return _math_linear.Vector2_normSq(self)
 
-
-    def angle(self, v: 'Vector2') -> "double":
-        """angle(Vector2 self, Vector2 v) -> double"""
+    def angle(self, v: "Vector2") -> "double":
+        r"""angle(Vector2 self, Vector2 v) -> double"""
         return _math_linear.Vector2_angle(self, v)
 
-
     def normalize(self) -> "void":
-        """normalize(Vector2 self)"""
+        r"""normalize(Vector2 self)"""
         return _math_linear.Vector2_normalize(self)
 
-
     def unit(self) -> "math::linear::VectorN< 2,double >::Like_T":
-        """unit(Vector2 self) -> Vector2"""
+        r"""unit(Vector2 self) -> Vector2"""
         return _math_linear.Vector2_unit(self)
 
-
-    def scale(self, scalar: 'double') -> "void":
-        """scale(Vector2 self, double scalar)"""
+    def scale(self, scalar: "double") -> "void":
+        r"""scale(Vector2 self, double scalar)"""
         return _math_linear.Vector2_scale(self, scalar)
 
-
-    def __iadd__(self, v: 'Vector2') -> "math::linear::VectorN< 2,double >::Like_T &":
-        """__iadd__(Vector2 self, Vector2 v) -> Vector2"""
+    def __iadd__(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T &":
+        r"""__iadd__(Vector2 self, Vector2 v) -> Vector2"""
         return _math_linear.Vector2___iadd__(self, v)
 
-
-    def __isub__(self, v: 'Vector2') -> "math::linear::VectorN< 2,double >::Like_T &":
-        """__isub__(Vector2 self, Vector2 v) -> Vector2"""
+    def __isub__(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T &":
+        r"""__isub__(Vector2 self, Vector2 v) -> Vector2"""
         return _math_linear.Vector2___isub__(self, v)
 
-
-    def add(self, v: 'Vector2') -> "math::linear::VectorN< 2,double >::Like_T":
-        """add(Vector2 self, Vector2 v) -> Vector2"""
+    def add(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T":
+        r"""add(Vector2 self, Vector2 v) -> Vector2"""
         return _math_linear.Vector2_add(self, v)
 
-
-    def subtract(self, v: 'Vector2') -> "math::linear::VectorN< 2,double >::Like_T":
-        """subtract(Vector2 self, Vector2 v) -> Vector2"""
+    def subtract(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T":
+        r"""subtract(Vector2 self, Vector2 v) -> Vector2"""
         return _math_linear.Vector2_subtract(self, v)
 
-
-    def __add__(self, v: 'Vector2') -> "math::linear::VectorN< 2,double >::Like_T":
-        """__add__(Vector2 self, Vector2 v) -> Vector2"""
+    def __add__(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T":
+        r"""__add__(Vector2 self, Vector2 v) -> Vector2"""
         return _math_linear.Vector2___add__(self, v)
 
-
-    def __sub__(self, v: 'Vector2') -> "math::linear::VectorN< 2,double >::Like_T":
-        """__sub__(Vector2 self, Vector2 v) -> Vector2"""
+    def __sub__(self, v: "Vector2") -> "math::linear::VectorN< 2,double >::Like_T":
+        r"""__sub__(Vector2 self, Vector2 v) -> Vector2"""
         return _math_linear.Vector2___sub__(self, v)
 
-
     def __neg__(self) -> "math::linear::VectorN< 2,double >::Like_T":
-        """__neg__(Vector2 self) -> Vector2"""
+        r"""__neg__(Vector2 self) -> Vector2"""
         return _math_linear.Vector2___neg__(self)
 
-
     def __imul__(self, *args) -> "math::linear::VectorN< 2,double >::Like_T &":
-        """
+        r"""
         __imul__(Vector2 self, Vector2 v) -> Vector2
         __imul__(Vector2 self, double sv) -> Vector2
         """
         return _math_linear.Vector2___imul__(self, *args)
 
-
     def __itruediv__(self, *args):
         return _math_linear.Vector2___itruediv__(self, *args)
     __idiv__ = __itruediv__
@@ -3541,13 +2792,12 @@ class Vector2(_object):
 
 
     def __mul__(self, *args) -> "math::linear::VectorN< 2,double >::Like_T":
-        """
+        r"""
         __mul__(Vector2 self, double sv) -> Vector2
         __mul__(Vector2 self, Vector2 v) -> Vector2
         """
         return _math_linear.Vector2___mul__(self, *args)
 
-
     def __truediv__(self, *args):
         return _math_linear.Vector2___truediv__(self, *args)
     __div__ = __truediv__
@@ -3560,155 +2810,125 @@ class Vector2(_object):
         self.__init__(pickle.loads(state))
 
 
-    def __getitem__(self, i: 'long') -> "double":
-        """__getitem__(Vector2 self, long i) -> double"""
+    def __getitem__(self, i: "long") -> "double":
+        r"""__getitem__(Vector2 self, long i) -> double"""
         return _math_linear.Vector2___getitem__(self, i)
 
-
-    def __setitem__(self, i: 'long', val: 'double') -> "void":
-        """__setitem__(Vector2 self, long i, double val)"""
+    def __setitem__(self, i: "long", val: "double") -> "void":
+        r"""__setitem__(Vector2 self, long i, double val)"""
         return _math_linear.Vector2___setitem__(self, i, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Vector2 self) -> std::string"""
+        r"""__str__(Vector2 self) -> std::string"""
         return _math_linear.Vector2___str__(self)
 
-
-    def __deepcopy__(self, memo: 'PyObject *') -> "math::linear::VectorN< 2,double >":
-        """__deepcopy__(Vector2 self, PyObject * memo) -> Vector2"""
+    def __deepcopy__(self, memo: "PyObject *") -> "math::linear::VectorN< 2,double >":
+        r"""__deepcopy__(Vector2 self, PyObject * memo) -> Vector2"""
         return _math_linear.Vector2___deepcopy__(self, memo)
 
-
     def vals(self) -> "std::vector< double,std::allocator< double > >":
-        """vals(Vector2 self) -> std_vector_double"""
+        r"""vals(Vector2 self) -> std_vector_double"""
         return _math_linear.Vector2_vals(self)
 
-Vector2_swigregister = _math_linear.Vector2_swigregister
-Vector2_swigregister(Vector2)
+# Register Vector2 in _math_linear:
+_math_linear.Vector2_swigregister(Vector2)
 
-class Vector3(_object):
-    """Proxy of C++ math::linear::VectorN<(3,double)> class."""
+class Vector3(object):
+    r"""Proxy of C++ math::linear::VectorN< 3,double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::VectorN<(3,double)> self) -> Vector3
-        __init__(math::linear::VectorN<(3,double)> self, double sv) -> Vector3
-        __init__(math::linear::VectorN<(3,double)> self, double const * raw) -> Vector3
-        __init__(math::linear::VectorN<(3,double)> self, Vector3 v) -> Vector3
-        __init__(math::linear::VectorN<(3,double)> self, Matrix3x1 mx) -> Vector3
-        __init__(math::linear::VectorN<(3,double)> self, std_vector_double raw) -> Vector3
-        """
-        this = _math_linear.new_Vector3(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(Vector3 self) -> Vector3
+        __init__(Vector3 self, double sv) -> Vector3
+        __init__(Vector3 self, double const * raw) -> Vector3
+        __init__(Vector3 self, Vector3 v) -> Vector3
+        __init__(Vector3 self, Matrix3x1 mx) -> Vector3
+        __init__(Vector3 self, std_vector_double raw) -> Vector3
+        """
+        _math_linear.Vector3_swiginit(self, _math_linear.new_Vector3(*args))
     __swig_destroy__ = _math_linear.delete_Vector3
-    __del__ = lambda self: None
 
     def matrix(self, *args) -> "math::linear::MatrixMxN< 3,1,double > const &":
-        """
+        r"""
         matrix(Vector3 self) -> Matrix3x1
         matrix(Vector3 self) -> Matrix3x1
         """
         return _math_linear.Vector3_matrix(self, *args)
 
-
     def size(self) -> "size_t":
-        """size(Vector3 self) -> size_t"""
+        r"""size(Vector3 self) -> size_t"""
         return _math_linear.Vector3_size(self)
 
-
-    def dot(self, vec: 'Vector3') -> "double":
-        """dot(Vector3 self, Vector3 vec) -> double"""
+    def dot(self, vec: "Vector3") -> "double":
+        r"""dot(Vector3 self, Vector3 vec) -> double"""
         return _math_linear.Vector3_dot(self, vec)
 
-
-    def normDot(self, vec: 'Vector3') -> "double":
-        """normDot(Vector3 self, Vector3 vec) -> double"""
+    def normDot(self, vec: "Vector3") -> "double":
+        r"""normDot(Vector3 self, Vector3 vec) -> double"""
         return _math_linear.Vector3_normDot(self, vec)
 
-
     def norm(self) -> "double":
-        """norm(Vector3 self) -> double"""
+        r"""norm(Vector3 self) -> double"""
         return _math_linear.Vector3_norm(self)
 
-
     def normSq(self) -> "double":
-        """normSq(Vector3 self) -> double"""
+        r"""normSq(Vector3 self) -> double"""
         return _math_linear.Vector3_normSq(self)
 
-
-    def angle(self, v: 'Vector3') -> "double":
-        """angle(Vector3 self, Vector3 v) -> double"""
+    def angle(self, v: "Vector3") -> "double":
+        r"""angle(Vector3 self, Vector3 v) -> double"""
         return _math_linear.Vector3_angle(self, v)
 
-
     def normalize(self) -> "void":
-        """normalize(Vector3 self)"""
+        r"""normalize(Vector3 self)"""
         return _math_linear.Vector3_normalize(self)
 
-
     def unit(self) -> "math::linear::VectorN< 3,double >::Like_T":
-        """unit(Vector3 self) -> Vector3"""
+        r"""unit(Vector3 self) -> Vector3"""
         return _math_linear.Vector3_unit(self)
 
-
-    def scale(self, scalar: 'double') -> "void":
-        """scale(Vector3 self, double scalar)"""
+    def scale(self, scalar: "double") -> "void":
+        r"""scale(Vector3 self, double scalar)"""
         return _math_linear.Vector3_scale(self, scalar)
 
-
-    def __iadd__(self, v: 'Vector3') -> "math::linear::VectorN< 3,double >::Like_T &":
-        """__iadd__(Vector3 self, Vector3 v) -> Vector3"""
+    def __iadd__(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T &":
+        r"""__iadd__(Vector3 self, Vector3 v) -> Vector3"""
         return _math_linear.Vector3___iadd__(self, v)
 
-
-    def __isub__(self, v: 'Vector3') -> "math::linear::VectorN< 3,double >::Like_T &":
-        """__isub__(Vector3 self, Vector3 v) -> Vector3"""
+    def __isub__(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T &":
+        r"""__isub__(Vector3 self, Vector3 v) -> Vector3"""
         return _math_linear.Vector3___isub__(self, v)
 
-
-    def add(self, v: 'Vector3') -> "math::linear::VectorN< 3,double >::Like_T":
-        """add(Vector3 self, Vector3 v) -> Vector3"""
+    def add(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T":
+        r"""add(Vector3 self, Vector3 v) -> Vector3"""
         return _math_linear.Vector3_add(self, v)
 
-
-    def subtract(self, v: 'Vector3') -> "math::linear::VectorN< 3,double >::Like_T":
-        """subtract(Vector3 self, Vector3 v) -> Vector3"""
+    def subtract(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T":
+        r"""subtract(Vector3 self, Vector3 v) -> Vector3"""
         return _math_linear.Vector3_subtract(self, v)
 
-
-    def __add__(self, v: 'Vector3') -> "math::linear::VectorN< 3,double >::Like_T":
-        """__add__(Vector3 self, Vector3 v) -> Vector3"""
+    def __add__(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T":
+        r"""__add__(Vector3 self, Vector3 v) -> Vector3"""
         return _math_linear.Vector3___add__(self, v)
 
-
-    def __sub__(self, v: 'Vector3') -> "math::linear::VectorN< 3,double >::Like_T":
-        """__sub__(Vector3 self, Vector3 v) -> Vector3"""
+    def __sub__(self, v: "Vector3") -> "math::linear::VectorN< 3,double >::Like_T":
+        r"""__sub__(Vector3 self, Vector3 v) -> Vector3"""
         return _math_linear.Vector3___sub__(self, v)
 
-
     def __neg__(self) -> "math::linear::VectorN< 3,double >::Like_T":
-        """__neg__(Vector3 self) -> Vector3"""
+        r"""__neg__(Vector3 self) -> Vector3"""
         return _math_linear.Vector3___neg__(self)
 
-
     def __imul__(self, *args) -> "math::linear::VectorN< 3,double >::Like_T &":
-        """
+        r"""
         __imul__(Vector3 self, Vector3 v) -> Vector3
         __imul__(Vector3 self, double sv) -> Vector3
         """
         return _math_linear.Vector3___imul__(self, *args)
 
-
     def __itruediv__(self, *args):
         return _math_linear.Vector3___itruediv__(self, *args)
     __idiv__ = __itruediv__
@@ -3716,13 +2936,12 @@ class Vector3(_object):
 
 
     def __mul__(self, *args) -> "math::linear::VectorN< 3,double >::Like_T":
-        """
+        r"""
         __mul__(Vector3 self, double sv) -> Vector3
         __mul__(Vector3 self, Vector3 v) -> Vector3
         """
         return _math_linear.Vector3___mul__(self, *args)
 
-
     def __truediv__(self, *args):
         return _math_linear.Vector3___truediv__(self, *args)
     __div__ = __truediv__
@@ -3735,163 +2954,132 @@ class Vector3(_object):
         self.__init__(pickle.loads(state))
 
 
-    def __getitem__(self, i: 'long') -> "double":
-        """__getitem__(Vector3 self, long i) -> double"""
+    def __getitem__(self, i: "long") -> "double":
+        r"""__getitem__(Vector3 self, long i) -> double"""
         return _math_linear.Vector3___getitem__(self, i)
 
-
-    def __setitem__(self, i: 'long', val: 'double') -> "void":
-        """__setitem__(Vector3 self, long i, double val)"""
+    def __setitem__(self, i: "long", val: "double") -> "void":
+        r"""__setitem__(Vector3 self, long i, double val)"""
         return _math_linear.Vector3___setitem__(self, i, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Vector3 self) -> std::string"""
+        r"""__str__(Vector3 self) -> std::string"""
         return _math_linear.Vector3___str__(self)
 
-
-    def __deepcopy__(self, memo: 'PyObject *') -> "math::linear::VectorN< 3,double >":
-        """__deepcopy__(Vector3 self, PyObject * memo) -> Vector3"""
+    def __deepcopy__(self, memo: "PyObject *") -> "math::linear::VectorN< 3,double >":
+        r"""__deepcopy__(Vector3 self, PyObject * memo) -> Vector3"""
         return _math_linear.Vector3___deepcopy__(self, memo)
 
-
     def vals(self) -> "std::vector< double,std::allocator< double > >":
-        """vals(Vector3 self) -> std_vector_double"""
+        r"""vals(Vector3 self) -> std_vector_double"""
         return _math_linear.Vector3_vals(self)
 
-Vector3_swigregister = _math_linear.Vector3_swigregister
-Vector3_swigregister(Vector3)
+# Register Vector3 in _math_linear:
+_math_linear.Vector3_swigregister(Vector3)
 
 
 def cross(*args) -> "math::linear::Vector< double >":
-    """
+    r"""
     cross(Vector3 u, Vector3 v) -> Vector3
     cross(VectorDouble u, VectorDouble v) -> VectorDouble
     """
     return _math_linear.cross(*args)
-class VectorDouble(_object):
-    """Proxy of C++ math::linear::Vector<(double)> class."""
+class VectorDouble(object):
+    r"""Proxy of C++ math::linear::Vector< double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::Vector<(double)> self) -> VectorDouble
-        __init__(math::linear::Vector<(double)> self, size_t sz, double sv=0.0) -> VectorDouble
-        __init__(math::linear::Vector<(double)> self, size_t sz) -> VectorDouble
-        __init__(math::linear::Vector<(double)> self, size_t sz, double const * raw) -> VectorDouble
-        __init__(math::linear::Vector<(double)> self, VectorDouble v) -> VectorDouble
-        __init__(math::linear::Vector<(double)> self, std_vector_double v) -> VectorDouble
-        __init__(math::linear::Vector<(double)> self, MatrixDouble mx) -> VectorDouble
-        """
-        this = _math_linear.new_VectorDouble(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(VectorDouble self) -> VectorDouble
+        __init__(VectorDouble self, size_t sz, double sv=0.0) -> VectorDouble
+        __init__(VectorDouble self, size_t sz, double const * raw) -> VectorDouble
+        __init__(VectorDouble self, VectorDouble v) -> VectorDouble
+        __init__(VectorDouble self, std_vector_double v) -> VectorDouble
+        __init__(VectorDouble self, MatrixDouble mx) -> VectorDouble
+        """
+        _math_linear.VectorDouble_swiginit(self, _math_linear.new_VectorDouble(*args))
     __swig_destroy__ = _math_linear.delete_VectorDouble
-    __del__ = lambda self: None
 
     def size(self) -> "size_t":
-        """size(VectorDouble self) -> size_t"""
+        r"""size(VectorDouble self) -> size_t"""
         return _math_linear.VectorDouble_size(self)
 
-
     def matrix(self, *args) -> "math::linear::Matrix2D< double > const &":
-        """
+        r"""
         matrix(VectorDouble self) -> MatrixDouble
         matrix(VectorDouble self) -> MatrixDouble
         """
         return _math_linear.VectorDouble_matrix(self, *args)
 
-
     def get(self) -> "double const *":
-        """get(VectorDouble self) -> double const *"""
+        r"""get(VectorDouble self) -> double const *"""
         return _math_linear.VectorDouble_get(self)
 
-
-    def dot(self, vec_: 'VectorDouble') -> "double":
-        """dot(VectorDouble self, VectorDouble vec_) -> double"""
+    def dot(self, vec_: "VectorDouble") -> "double":
+        r"""dot(VectorDouble self, VectorDouble vec_) -> double"""
         return _math_linear.VectorDouble_dot(self, vec_)
 
-
-    def angle(self, v: 'VectorDouble') -> "double":
-        """angle(VectorDouble self, VectorDouble v) -> double"""
+    def angle(self, v: "VectorDouble") -> "double":
+        r"""angle(VectorDouble self, VectorDouble v) -> double"""
         return _math_linear.VectorDouble_angle(self, v)
 
-
     def normSq(self) -> "double":
-        """normSq(VectorDouble self) -> double"""
+        r"""normSq(VectorDouble self) -> double"""
         return _math_linear.VectorDouble_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(VectorDouble self) -> double"""
+        r"""norm(VectorDouble self) -> double"""
         return _math_linear.VectorDouble_norm(self)
 
-
     def normalize(self) -> "void":
-        """normalize(VectorDouble self)"""
+        r"""normalize(VectorDouble self)"""
         return _math_linear.VectorDouble_normalize(self)
 
-
-    def scale(self, scalar: 'double') -> "void":
-        """scale(VectorDouble self, double scalar)"""
+    def scale(self, scalar: "double") -> "void":
+        r"""scale(VectorDouble self, double scalar)"""
         return _math_linear.VectorDouble_scale(self, scalar)
 
-
     def unit(self) -> "math::linear::Vector< double >":
-        """unit(VectorDouble self) -> VectorDouble"""
+        r"""unit(VectorDouble self) -> VectorDouble"""
         return _math_linear.VectorDouble_unit(self)
 
-
-    def __iadd__(self, v: 'VectorDouble') -> "math::linear::Vector< double > &":
-        """__iadd__(VectorDouble self, VectorDouble v) -> VectorDouble"""
+    def __iadd__(self, v: "VectorDouble") -> "math::linear::Vector< double > &":
+        r"""__iadd__(VectorDouble self, VectorDouble v) -> VectorDouble"""
         return _math_linear.VectorDouble___iadd__(self, v)
 
-
-    def __isub__(self, v: 'VectorDouble') -> "math::linear::Vector< double > &":
-        """__isub__(VectorDouble self, VectorDouble v) -> VectorDouble"""
+    def __isub__(self, v: "VectorDouble") -> "math::linear::Vector< double > &":
+        r"""__isub__(VectorDouble self, VectorDouble v) -> VectorDouble"""
         return _math_linear.VectorDouble___isub__(self, v)
 
-
-    def add(self, v: 'VectorDouble') -> "math::linear::Vector< double >":
-        """add(VectorDouble self, VectorDouble v) -> VectorDouble"""
+    def add(self, v: "VectorDouble") -> "math::linear::Vector< double >":
+        r"""add(VectorDouble self, VectorDouble v) -> VectorDouble"""
         return _math_linear.VectorDouble_add(self, v)
 
-
-    def subtract(self, v: 'VectorDouble') -> "math::linear::Vector< double >":
-        """subtract(VectorDouble self, VectorDouble v) -> VectorDouble"""
+    def subtract(self, v: "VectorDouble") -> "math::linear::Vector< double >":
+        r"""subtract(VectorDouble self, VectorDouble v) -> VectorDouble"""
         return _math_linear.VectorDouble_subtract(self, v)
 
-
-    def __add__(self, v: 'VectorDouble') -> "math::linear::Vector< double >":
-        """__add__(VectorDouble self, VectorDouble v) -> VectorDouble"""
+    def __add__(self, v: "VectorDouble") -> "math::linear::Vector< double >":
+        r"""__add__(VectorDouble self, VectorDouble v) -> VectorDouble"""
         return _math_linear.VectorDouble___add__(self, v)
 
-
-    def __sub__(self, v: 'VectorDouble') -> "math::linear::Vector< double >":
-        """__sub__(VectorDouble self, VectorDouble v) -> VectorDouble"""
+    def __sub__(self, v: "VectorDouble") -> "math::linear::Vector< double >":
+        r"""__sub__(VectorDouble self, VectorDouble v) -> VectorDouble"""
         return _math_linear.VectorDouble___sub__(self, v)
 
-
     def __neg__(self) -> "math::linear::Vector< double >":
-        """__neg__(VectorDouble self) -> VectorDouble"""
+        r"""__neg__(VectorDouble self) -> VectorDouble"""
         return _math_linear.VectorDouble___neg__(self)
 
-
     def __imul__(self, *args) -> "math::linear::Vector< double > &":
-        """
+        r"""
         __imul__(VectorDouble self, VectorDouble v) -> VectorDouble
         __imul__(VectorDouble self, double sv) -> VectorDouble
         """
         return _math_linear.VectorDouble___imul__(self, *args)
 
-
     def __itruediv__(self, *args):
         return _math_linear.VectorDouble___itruediv__(self, *args)
     __idiv__ = __itruediv__
@@ -3899,78 +3087,64 @@ class VectorDouble(_object):
 
 
     def __mul__(self, *args) -> "math::linear::Vector< double >":
-        """
+        r"""
         __mul__(VectorDouble self, double sv) -> VectorDouble
         __mul__(VectorDouble self, VectorDouble v) -> VectorDouble
         """
         return _math_linear.VectorDouble___mul__(self, *args)
 
-
     def __truediv__(self, *args):
         return _math_linear.VectorDouble___truediv__(self, *args)
     __div__ = __truediv__
 
 
 
-    def __getitem__(self, i: 'long') -> "double":
-        """__getitem__(VectorDouble self, long i) -> double"""
+    def __getitem__(self, i: "long") -> "double":
+        r"""__getitem__(VectorDouble self, long i) -> double"""
         return _math_linear.VectorDouble___getitem__(self, i)
 
-
-    def __setitem__(self, i: 'long', val: 'double') -> "void":
-        """__setitem__(VectorDouble self, long i, double val)"""
+    def __setitem__(self, i: "long", val: "double") -> "void":
+        r"""__setitem__(VectorDouble self, long i, double val)"""
         return _math_linear.VectorDouble___setitem__(self, i, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(VectorDouble self) -> std::string"""
+        r"""__str__(VectorDouble self) -> std::string"""
         return _math_linear.VectorDouble___str__(self)
 
-
     def vals(self) -> "std::vector< double,std::allocator< double > >":
-        """vals(VectorDouble self) -> std_vector_double"""
+        r"""vals(VectorDouble self) -> std_vector_double"""
         return _math_linear.VectorDouble_vals(self)
 
-VectorDouble_swigregister = _math_linear.VectorDouble_swigregister
-VectorDouble_swigregister(VectorDouble)
+# Register VectorDouble in _math_linear:
+_math_linear.VectorDouble_swigregister(VectorDouble)
 
-class MatrixDouble(_object):
-    """Proxy of C++ math::linear::Matrix2D<(double)> class."""
+class MatrixDouble(object):
+    r"""Proxy of C++ math::linear::Matrix2D< double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDouble, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDouble, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(math::linear::Matrix2D<(double)> self) -> MatrixDouble
-        __init__(math::linear::Matrix2D<(double)> self, size_t M, size_t N, double cv=0) -> MatrixDouble
-        __init__(math::linear::Matrix2D<(double)> self, size_t M, size_t N) -> MatrixDouble
-        __init__(math::linear::Matrix2D<(double)> self, size_t M, size_t N, double const * raw) -> MatrixDouble
-        __init__(math::linear::Matrix2D<(double)> self, size_t M, size_t N, std_vector_double raw) -> MatrixDouble
-        __init__(math::linear::Matrix2D<(double)> self, MatrixDouble mx) -> MatrixDouble
-        __init__(math::linear::Matrix2D<(double)> self, size_t M, size_t N, double * raw, bool adopt) -> MatrixDouble
-        """
-        this = _math_linear.new_MatrixDouble(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""
+        __init__(MatrixDouble self) -> MatrixDouble
+        __init__(MatrixDouble self, size_t M, size_t N, double cv=0) -> MatrixDouble
+        __init__(MatrixDouble self, size_t M, size_t N, double const * raw) -> MatrixDouble
+        __init__(MatrixDouble self, size_t M, size_t N, std_vector_double raw) -> MatrixDouble
+        __init__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble
+        __init__(MatrixDouble self, size_t M, size_t N, double * raw, bool adopt) -> MatrixDouble
+        """
+        _math_linear.MatrixDouble_swiginit(self, _math_linear.new_MatrixDouble(*args))
     __swig_destroy__ = _math_linear.delete_MatrixDouble
-    __del__ = lambda self: None
 
     def __call__(self, *args) -> "double &":
-        """
+        r"""
         __call__(MatrixDouble self, size_t i, size_t j) -> double
         __call__(MatrixDouble self, size_t i, size_t j) -> double &
         """
         return _math_linear.MatrixDouble___call__(self, *args)
 
-
     def row(self, *args) -> "void":
-        """
+        r"""
         row(MatrixDouble self, size_t i) -> double const
         row(MatrixDouble self, size_t i) -> double
         row(MatrixDouble self, size_t i, double const * vec_)
@@ -3978,138 +3152,110 @@ class MatrixDouble(_object):
         """
         return _math_linear.MatrixDouble_row(self, *args)
 
-
     def col(self, *args) -> "void":
-        """
+        r"""
         col(MatrixDouble self, size_t j) -> std_vector_double
         col(MatrixDouble self, size_t j, double const * vec_)
         col(MatrixDouble self, size_t j, std_vector_double vec_)
         """
         return _math_linear.MatrixDouble_col(self, *args)
 
-
     def rows(self) -> "size_t":
-        """rows(MatrixDouble self) -> size_t"""
+        r"""rows(MatrixDouble self) -> size_t"""
         return _math_linear.MatrixDouble_rows(self)
 
-
     def cols(self) -> "size_t":
-        """cols(MatrixDouble self) -> size_t"""
+        r"""cols(MatrixDouble self) -> size_t"""
         return _math_linear.MatrixDouble_cols(self)
 
-
     def size(self) -> "size_t":
-        """size(MatrixDouble self) -> size_t"""
+        r"""size(MatrixDouble self) -> size_t"""
         return _math_linear.MatrixDouble_size(self)
 
-
     def get(self) -> "double const *":
-        """get(MatrixDouble self) -> double const *"""
+        r"""get(MatrixDouble self) -> double const *"""
         return _math_linear.MatrixDouble_get(self)
 
-
-    def scale(self, scalar: 'double') -> "math::linear::Matrix2D< double > &":
-        """scale(MatrixDouble self, double scalar) -> MatrixDouble"""
+    def scale(self, scalar: "double") -> "math::linear::Matrix2D< double > &":
+        r"""scale(MatrixDouble self, double scalar) -> MatrixDouble"""
         return _math_linear.MatrixDouble_scale(self, scalar)
 
-
     def multiply(self, *args) -> "void":
-        """
+        r"""
         multiply(MatrixDouble self, double scalar) -> MatrixDouble
         multiply(MatrixDouble self, MatrixDouble mx) -> MatrixDouble
         multiply(MatrixDouble self, MatrixDouble mx, MatrixDouble out)
         """
         return _math_linear.MatrixDouble_multiply(self, *args)
 
-
-    def scaleDiagonal(self, mx: 'MatrixDouble') -> "math::linear::Matrix2D< double > &":
-        """scaleDiagonal(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
+    def scaleDiagonal(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double > &":
+        r"""scaleDiagonal(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
         return _math_linear.MatrixDouble_scaleDiagonal(self, mx)
 
-
-    def scaleDiagonalRowVector(self, mx: 'MatrixDouble') -> "math::linear::Matrix2D< double > &":
-        """scaleDiagonalRowVector(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
+    def scaleDiagonalRowVector(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double > &":
+        r"""scaleDiagonalRowVector(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
         return _math_linear.MatrixDouble_scaleDiagonalRowVector(self, mx)
 
-
-    def multiplyDiagonal(self, mx: 'MatrixDouble') -> "math::linear::Matrix2D< double >":
-        """multiplyDiagonal(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
+    def multiplyDiagonal(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
+        r"""multiplyDiagonal(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
         return _math_linear.MatrixDouble_multiplyDiagonal(self, mx)
 
-
-    def multiplyDiagonalRowVector(self, mx: 'MatrixDouble') -> "math::linear::Matrix2D< double >":
-        """multiplyDiagonalRowVector(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
+    def multiplyDiagonalRowVector(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
+        r"""multiplyDiagonalRowVector(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
         return _math_linear.MatrixDouble_multiplyDiagonalRowVector(self, mx)
 
-
-    def __iadd__(self, mx: 'MatrixDouble') -> "math::linear::Matrix2D< double > &":
-        """__iadd__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
+    def __iadd__(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double > &":
+        r"""__iadd__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
         return _math_linear.MatrixDouble___iadd__(self, mx)
 
-
-    def __isub__(self, mx: 'MatrixDouble') -> "math::linear::Matrix2D< double > &":
-        """__isub__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
+    def __isub__(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double > &":
+        r"""__isub__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
         return _math_linear.MatrixDouble___isub__(self, mx)
 
-
-    def add(self, mx: 'MatrixDouble') -> "math::linear::Matrix2D< double >":
-        """add(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
+    def add(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
+        r"""add(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
         return _math_linear.MatrixDouble_add(self, mx)
 
-
-    def subtract(self, mx: 'MatrixDouble') -> "math::linear::Matrix2D< double >":
-        """subtract(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
+    def subtract(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
+        r"""subtract(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
         return _math_linear.MatrixDouble_subtract(self, mx)
 
-
     def transpose(self) -> "math::linear::Matrix2D< double >":
-        """transpose(MatrixDouble self) -> MatrixDouble"""
+        r"""transpose(MatrixDouble self) -> MatrixDouble"""
         return _math_linear.MatrixDouble_transpose(self)
 
-
-    def decomposeLU(self, pivotsM: 'VectorSizeT') -> "math::linear::Matrix2D< double >":
-        """decomposeLU(MatrixDouble self, VectorSizeT pivotsM) -> MatrixDouble"""
+    def decomposeLU(self, pivotsM: "VectorSizeT") -> "math::linear::Matrix2D< double >":
+        r"""decomposeLU(MatrixDouble self, VectorSizeT pivotsM) -> MatrixDouble"""
         return _math_linear.MatrixDouble_decomposeLU(self, pivotsM)
 
-
-    def permute(self, pivotsM: 'VectorSizeT', n: 'size_t'=0) -> "math::linear::Matrix2D< double >":
-        """
-        permute(MatrixDouble self, VectorSizeT pivotsM, size_t n=0) -> MatrixDouble
-        permute(MatrixDouble self, VectorSizeT pivotsM) -> MatrixDouble
-        """
+    def permute(self, pivotsM: "VectorSizeT", n: "size_t"=0) -> "math::linear::Matrix2D< double >":
+        r"""permute(MatrixDouble self, VectorSizeT pivotsM, size_t n=0) -> MatrixDouble"""
         return _math_linear.MatrixDouble_permute(self, pivotsM, n)
 
-
     def normSq(self) -> "double":
-        """normSq(MatrixDouble self) -> double"""
+        r"""normSq(MatrixDouble self) -> double"""
         return _math_linear.MatrixDouble_normSq(self)
 
-
     def norm(self) -> "double":
-        """norm(MatrixDouble self) -> double"""
+        r"""norm(MatrixDouble self) -> double"""
         return _math_linear.MatrixDouble_norm(self)
 
-
     def normalize(self) -> "math::linear::Matrix2D< double > &":
-        """normalize(MatrixDouble self) -> MatrixDouble"""
+        r"""normalize(MatrixDouble self) -> MatrixDouble"""
         return _math_linear.MatrixDouble_normalize(self)
 
-
     def unit(self) -> "math::linear::Matrix2D< double >":
-        """unit(MatrixDouble self) -> MatrixDouble"""
+        r"""unit(MatrixDouble self) -> MatrixDouble"""
         return _math_linear.MatrixDouble_unit(self)
 
-
-    def __add__(self, mx: 'MatrixDouble') -> "math::linear::Matrix2D< double >":
-        """__add__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
+    def __add__(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
+        r"""__add__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
         return _math_linear.MatrixDouble___add__(self, mx)
 
-
-    def __sub__(self, mx: 'MatrixDouble') -> "math::linear::Matrix2D< double >":
-        """__sub__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
+    def __sub__(self, mx: "MatrixDouble") -> "math::linear::Matrix2D< double >":
+        r"""__sub__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble"""
         return _math_linear.MatrixDouble___sub__(self, mx)
 
-
     def __truediv__(self, *args):
         return _math_linear.MatrixDouble___truediv__(self, *args)
     __div__ = __truediv__
@@ -4117,40 +3263,34 @@ class MatrixDouble(_object):
 
 
     def __mul__(self, *args) -> "math::linear::Matrix2D< double >":
-        """
+        r"""
         __mul__(MatrixDouble self, double scalar) -> MatrixDouble
         __mul__(MatrixDouble self, MatrixDouble mx) -> MatrixDouble
         """
         return _math_linear.MatrixDouble___mul__(self, *args)
 
-
     def __neg__(self) -> "math::linear::Matrix2D< double >":
-        """__neg__(MatrixDouble self) -> MatrixDouble"""
+        r"""__neg__(MatrixDouble self) -> MatrixDouble"""
         return _math_linear.MatrixDouble___neg__(self)
 
-
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(MatrixDouble self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(MatrixDouble self, PyObject * inObj) -> double"""
         return _math_linear.MatrixDouble___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(MatrixDouble self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(MatrixDouble self, PyObject * inObj, double val)"""
         return _math_linear.MatrixDouble___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(MatrixDouble self) -> std::string"""
+        r"""__str__(MatrixDouble self) -> std::string"""
         return _math_linear.MatrixDouble___str__(self)
 
-
     def vals(self) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
-        """vals(MatrixDouble self) -> std_vector_vector_double"""
+        r"""vals(MatrixDouble self) -> std_vector_vector_double"""
         return _math_linear.MatrixDouble_vals(self)
 
-MatrixDouble_swigregister = _math_linear.MatrixDouble_swigregister
-MatrixDouble_swigregister(MatrixDouble)
+# Register MatrixDouble in _math_linear:
+_math_linear.MatrixDouble_swigregister(MatrixDouble)
 
-# This file is compatible with both classic and new-style classes.
 
 
diff --git a/externals/coda-oss/modules/python/math.poly/source/generated/math_poly.py b/externals/coda-oss/modules/python/math.poly/source/generated/math_poly.py
index 6a2e887f..c1c3b8f7 100644
--- a/externals/coda-oss/modules/python/math.poly/source/generated/math_poly.py
+++ b/externals/coda-oss/modules/python/math.poly/source/generated/math_poly.py
@@ -1,252 +1,186 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_math_poly')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_math_poly')
-    _math_poly = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_math_poly', [dirname(__file__)])
-        except ImportError:
-            import _math_poly
-            return _math_poly
-        try:
-            _mod = imp.load_module('_math_poly', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _math_poly = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _math_poly
 else:
     import _math_poly
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
 
 import coda.math_linear
 import coda.coda_except
 import coda.coda_types
 import coda.coda_sys
 
-def new_doubleArray(nelements: 'size_t') -> "double *":
-    """new_doubleArray(size_t nelements) -> double *"""
+def new_doubleArray(nelements: "size_t") -> "double *":
+    r"""new_doubleArray(size_t nelements) -> double *"""
     return _math_poly.new_doubleArray(nelements)
 
-def delete_doubleArray(ary: 'double *') -> "void":
-    """delete_doubleArray(double * ary)"""
+def delete_doubleArray(ary: "double *") -> "void":
+    r"""delete_doubleArray(double * ary)"""
     return _math_poly.delete_doubleArray(ary)
 
-def doubleArray_getitem(ary: 'double *', index: 'size_t') -> "double":
-    """doubleArray_getitem(double * ary, size_t index) -> double"""
+def doubleArray_getitem(ary: "double *", index: "size_t") -> "double":
+    r"""doubleArray_getitem(double * ary, size_t index) -> double"""
     return _math_poly.doubleArray_getitem(ary, index)
 
-def doubleArray_setitem(ary: 'double *', index: 'size_t', value: 'double') -> "void":
-    """doubleArray_setitem(double * ary, size_t index, double value)"""
+def doubleArray_setitem(ary: "double *", index: "size_t", value: "double") -> "void":
+    r"""doubleArray_setitem(double * ary, size_t index, double value)"""
     return _math_poly.doubleArray_setitem(ary, index, value)
 
 from coda.coda_types import pickle
 
-class Poly1D(_object):
-    """Proxy of C++ math::poly::OneD<(double)> class."""
+class Poly1D(object):
+    r"""Proxy of C++ math::poly::OneD< double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Poly1D, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Poly1D, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
+        r"""
+        __init__(Poly1D self) -> Poly1D
+        __init__(Poly1D self, std_vector_double coef) -> Poly1D
+        __init__(Poly1D self, size_t order) -> Poly1D
+        __init__(Poly1D self, size_t order, double const * coef) -> Poly1D
         """
-        __init__(math::poly::OneD<(double)> self) -> Poly1D
-        __init__(math::poly::OneD<(double)> self, std_vector_double coef) -> Poly1D
-        __init__(math::poly::OneD<(double)> self, size_t order) -> Poly1D
-        __init__(math::poly::OneD<(double)> self, size_t order, double const * coef) -> Poly1D
-        """
-        this = _math_poly.new_Poly1D(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _math_poly.Poly1D_swiginit(self, _math_poly.new_Poly1D(*args))
 
     def order(self) -> "size_t":
-        """order(Poly1D self) -> size_t"""
+        r"""order(Poly1D self) -> size_t"""
         return _math_poly.Poly1D_order(self)
 
-
     def size(self) -> "size_t":
-        """size(Poly1D self) -> size_t"""
+        r"""size(Poly1D self) -> size_t"""
         return _math_poly.Poly1D_size(self)
 
-
     def empty(self) -> "bool":
-        """empty(Poly1D self) -> bool"""
+        r"""empty(Poly1D self) -> bool"""
         return _math_poly.Poly1D_empty(self)
 
-
     def coeffs(self) -> "std::vector< double,std::allocator< double > > const &":
-        """coeffs(Poly1D self) -> std_vector_double"""
+        r"""coeffs(Poly1D self) -> std_vector_double"""
         return _math_poly.Poly1D_coeffs(self)
 
-
-    def scaleVariable(self, scale: 'double') -> "math::poly::OneD< double >":
-        """scaleVariable(Poly1D self, double scale) -> Poly1D"""
+    def scaleVariable(self, scale: "double") -> "math::poly::OneD< double >":
+        r"""scaleVariable(Poly1D self, double scale) -> Poly1D"""
         return _math_poly.Poly1D_scaleVariable(self, scale)
 
-
-    def truncateTo(self, order: 'size_t') -> "math::poly::OneD< double >":
-        """truncateTo(Poly1D self, size_t order) -> Poly1D"""
+    def truncateTo(self, order: "size_t") -> "math::poly::OneD< double >":
+        r"""truncateTo(Poly1D self, size_t order) -> Poly1D"""
         return _math_poly.Poly1D_truncateTo(self, order)
 
-
-    def truncateToNonZeros(self, zeroEpsilon: 'double'=0.0) -> "math::poly::OneD< double >":
-        """
-        truncateToNonZeros(Poly1D self, double zeroEpsilon=0.0) -> Poly1D
-        truncateToNonZeros(Poly1D self) -> Poly1D
-        """
+    def truncateToNonZeros(self, zeroEpsilon: "double"=0.0) -> "math::poly::OneD< double >":
+        r"""truncateToNonZeros(Poly1D self, double zeroEpsilon=0.0) -> Poly1D"""
         return _math_poly.Poly1D_truncateToNonZeros(self, zeroEpsilon)
 
-
-    def transformInput(self, gx: 'Poly1D', zeroEpsilon: 'double'=0.0) -> "math::poly::OneD< double >":
-        """
-        transformInput(Poly1D self, Poly1D gx, double zeroEpsilon=0.0) -> Poly1D
-        transformInput(Poly1D self, Poly1D gx) -> Poly1D
-        """
+    def transformInput(self, gx: "Poly1D", zeroEpsilon: "double"=0.0) -> "math::poly::OneD< double >":
+        r"""transformInput(Poly1D self, Poly1D gx, double zeroEpsilon=0.0) -> Poly1D"""
         return _math_poly.Poly1D_transformInput(self, gx, zeroEpsilon)
 
-
-    def copyFrom(self, p: 'Poly1D') -> "void":
-        """copyFrom(Poly1D self, Poly1D p)"""
+    def copyFrom(self, p: "Poly1D") -> "void":
+        r"""copyFrom(Poly1D self, Poly1D p)"""
         return _math_poly.Poly1D_copyFrom(self, p)
 
-
-    def integrate(self, start: 'double', end: 'double') -> "double":
-        """integrate(Poly1D self, double start, double end) -> double"""
+    def integrate(self, start: "double", end: "double") -> "double":
+        r"""integrate(Poly1D self, double start, double end) -> double"""
         return _math_poly.Poly1D_integrate(self, start, end)
 
-
     def derivative(self) -> "math::poly::OneD< double >":
-        """derivative(Poly1D self) -> Poly1D"""
+        r"""derivative(Poly1D self) -> Poly1D"""
         return _math_poly.Poly1D_derivative(self)
 
-
-    def velocity(self, x: 'double') -> "double":
-        """velocity(Poly1D self, double x) -> double"""
+    def velocity(self, x: "double") -> "double":
+        r"""velocity(Poly1D self, double x) -> double"""
         return _math_poly.Poly1D_velocity(self, x)
 
-
-    def acceleration(self, x: 'double') -> "double":
-        """acceleration(Poly1D self, double x) -> double"""
+    def acceleration(self, x: "double") -> "double":
+        r"""acceleration(Poly1D self, double x) -> double"""
         return _math_poly.Poly1D_acceleration(self, x)
 
-
     def __imul__(self, *args) -> "math::poly::OneD< double > &":
-        """
+        r"""
         __imul__(Poly1D self, double cv) -> Poly1D
         __imul__(Poly1D self, Poly1D p) -> Poly1D
         """
         return _math_poly.Poly1D___imul__(self, *args)
 
-
     def __mul__(self, *args) -> "math::poly::OneD< double >":
-        """
+        r"""
         __mul__(Poly1D self, double cv) -> Poly1D
         __mul__(Poly1D self, Poly1D p) -> Poly1D
         """
         return _math_poly.Poly1D___mul__(self, *args)
 
-
-    def __iadd__(self, p: 'Poly1D') -> "math::poly::OneD< double > &":
-        """__iadd__(Poly1D self, Poly1D p) -> Poly1D"""
+    def __iadd__(self, p: "Poly1D") -> "math::poly::OneD< double > &":
+        r"""__iadd__(Poly1D self, Poly1D p) -> Poly1D"""
         return _math_poly.Poly1D___iadd__(self, p)
 
-
-    def __add__(self, p: 'Poly1D') -> "math::poly::OneD< double >":
-        """__add__(Poly1D self, Poly1D p) -> Poly1D"""
+    def __add__(self, p: "Poly1D") -> "math::poly::OneD< double >":
+        r"""__add__(Poly1D self, Poly1D p) -> Poly1D"""
         return _math_poly.Poly1D___add__(self, p)
 
-
-    def __isub__(self, p: 'Poly1D') -> "math::poly::OneD< double > &":
-        """__isub__(Poly1D self, Poly1D p) -> Poly1D"""
+    def __isub__(self, p: "Poly1D") -> "math::poly::OneD< double > &":
+        r"""__isub__(Poly1D self, Poly1D p) -> Poly1D"""
         return _math_poly.Poly1D___isub__(self, p)
 
-
-    def __sub__(self, p: 'Poly1D') -> "math::poly::OneD< double >":
-        """__sub__(Poly1D self, Poly1D p) -> Poly1D"""
+    def __sub__(self, p: "Poly1D") -> "math::poly::OneD< double >":
+        r"""__sub__(Poly1D self, Poly1D p) -> Poly1D"""
         return _math_poly.Poly1D___sub__(self, p)
 
-
     def __itruediv__(self, *args):
         return _math_poly.Poly1D___itruediv__(self, *args)
     __idiv__ = __itruediv__
@@ -259,21 +193,18 @@ class Poly1D(_object):
 
 
 
-    def power(self, toThe: 'size_t') -> "math::poly::OneD< double >":
-        """power(Poly1D self, size_t toThe) -> Poly1D"""
+    def power(self, toThe: "size_t") -> "math::poly::OneD< double >":
+        r"""power(Poly1D self, size_t toThe) -> Poly1D"""
         return _math_poly.Poly1D_power(self, toThe)
 
-
-    def __eq__(self, p: 'Poly1D') -> "bool":
-        """__eq__(Poly1D self, Poly1D p) -> bool"""
+    def __eq__(self, p: "Poly1D") -> "bool":
+        r"""__eq__(Poly1D self, Poly1D p) -> bool"""
         return _math_poly.Poly1D___eq__(self, p)
 
-
-    def __ne__(self, p: 'Poly1D') -> "bool":
-        """__ne__(Poly1D self, Poly1D p) -> bool"""
+    def __ne__(self, p: "Poly1D") -> "bool":
+        r"""__ne__(Poly1D self, Poly1D p) -> bool"""
         return _math_poly.Poly1D___ne__(self, p)
 
-
     def __setstate__(self, state):
         """Recursive unpickling method for SWIG-wrapped Poly1D."""
         self.__init__(pickle.loads(state.pop('coeffs')))
@@ -289,39 +220,33 @@ class Poly1D(_object):
 
 
 
-    def __getitem__(self, i: 'long') -> "double":
-        """__getitem__(Poly1D self, long i) -> double"""
+    def __getitem__(self, i: "long") -> "double":
+        r"""__getitem__(Poly1D self, long i) -> double"""
         return _math_poly.Poly1D___getitem__(self, i)
 
-
-    def __setitem__(self, i: 'long', val: 'double') -> "void":
-        """__setitem__(Poly1D self, long i, double val)"""
+    def __setitem__(self, i: "long", val: "double") -> "void":
+        r"""__setitem__(Poly1D self, long i, double val)"""
         return _math_poly.Poly1D___setitem__(self, i, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Poly1D self) -> std::string"""
+        r"""__str__(Poly1D self) -> std::string"""
         return _math_poly.Poly1D___str__(self)
 
-
-    def __deepcopy__(self, memo: 'PyObject *') -> "math::poly::OneD< double >":
-        """__deepcopy__(Poly1D self, PyObject * memo) -> Poly1D"""
+    def __deepcopy__(self, memo: "PyObject *") -> "math::poly::OneD< double >":
+        r"""__deepcopy__(Poly1D self, PyObject * memo) -> Poly1D"""
         return _math_poly.Poly1D___deepcopy__(self, memo)
 
-
     def __call__(self, *args) -> "PyObject *":
-        """
+        r"""
         __call__(Poly1D self, double at) -> double
         __call__(Poly1D self, PyObject * input) -> PyObject *
         """
         return _math_poly.Poly1D___call__(self, *args)
 
-
     def asArray(self) -> "PyObject *":
-        """asArray(Poly1D self) -> PyObject *"""
+        r"""asArray(Poly1D self) -> PyObject *"""
         return _math_poly.Poly1D_asArray(self)
 
-
     @staticmethod
     def fromArray(array):
         if array.size == 0:
@@ -329,211 +254,173 @@ class Poly1D(_object):
         return Poly1D(array.tolist())
 
     __swig_destroy__ = _math_poly.delete_Poly1D
-    __del__ = lambda self: None
-Poly1D_swigregister = _math_poly.Poly1D_swigregister
-Poly1D_swigregister(Poly1D)
 
-class Vector3Coefficients(_object):
-    """Proxy of C++ std::vector<(math::linear::VectorN<(3,double)>)> class."""
+# Register Poly1D in _math_poly:
+_math_poly.Poly1D_swigregister(Poly1D)
+
+class Vector3Coefficients(object):
+    r"""Proxy of C++ std::vector< math::linear::VectorN< 3,double > > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3Coefficients, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Vector3Coefficients, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def iterator(self) -> "swig::SwigPyIterator *":
-        """iterator(Vector3Coefficients self) -> SwigPyIterator"""
+        r"""iterator(Vector3Coefficients self) -> SwigPyIterator"""
         return _math_poly.Vector3Coefficients_iterator(self)
-
     def __iter__(self):
         return self.iterator()
 
     def __nonzero__(self) -> "bool":
-        """__nonzero__(Vector3Coefficients self) -> bool"""
+        r"""__nonzero__(Vector3Coefficients self) -> bool"""
         return _math_poly.Vector3Coefficients___nonzero__(self)
 
-
     def __bool__(self) -> "bool":
-        """__bool__(Vector3Coefficients self) -> bool"""
+        r"""__bool__(Vector3Coefficients self) -> bool"""
         return _math_poly.Vector3Coefficients___bool__(self)
 
-
     def __len__(self) -> "std::vector< math::linear::VectorN< 3,double > >::size_type":
-        """__len__(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
+        r"""__len__(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
         return _math_poly.Vector3Coefficients___len__(self)
 
-
-    def __getslice__(self, i: 'std::vector< math::linear::VectorN< 3,double > >::difference_type', j: 'std::vector< math::linear::VectorN< 3,double > >::difference_type') -> "std::vector< math::linear::VectorN< 3,double >,std::allocator< math::linear::VectorN< 3,double > > > *":
-        """__getslice__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j) -> Vector3Coefficients"""
+    def __getslice__(self, i: "std::vector< math::linear::VectorN< 3,double > >::difference_type", j: "std::vector< math::linear::VectorN< 3,double > >::difference_type") -> "std::vector< math::linear::VectorN< 3,double >,std::allocator< math::linear::VectorN< 3,double > > > *":
+        r"""__getslice__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j) -> Vector3Coefficients"""
         return _math_poly.Vector3Coefficients___getslice__(self, i, j)
 
-
     def __setslice__(self, *args) -> "void":
-        """
+        r"""
         __setslice__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j)
         __setslice__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j, Vector3Coefficients v)
         """
         return _math_poly.Vector3Coefficients___setslice__(self, *args)
 
-
-    def __delslice__(self, i: 'std::vector< math::linear::VectorN< 3,double > >::difference_type', j: 'std::vector< math::linear::VectorN< 3,double > >::difference_type') -> "void":
-        """__delslice__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j)"""
+    def __delslice__(self, i: "std::vector< math::linear::VectorN< 3,double > >::difference_type", j: "std::vector< math::linear::VectorN< 3,double > >::difference_type") -> "void":
+        r"""__delslice__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, std::vector< math::linear::VectorN< 3,double > >::difference_type j)"""
         return _math_poly.Vector3Coefficients___delslice__(self, i, j)
 
-
     def __delitem__(self, *args) -> "void":
-        """
+        r"""
         __delitem__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::difference_type i)
         __delitem__(Vector3Coefficients self, PySliceObject * slice)
         """
         return _math_poly.Vector3Coefficients___delitem__(self, *args)
 
-
     def __getitem__(self, *args) -> "std::vector< math::linear::VectorN< 3,double > >::value_type const &":
-        """
+        r"""
         __getitem__(Vector3Coefficients self, PySliceObject * slice) -> Vector3Coefficients
         __getitem__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::difference_type i) -> Vector3
         """
         return _math_poly.Vector3Coefficients___getitem__(self, *args)
 
-
     def __setitem__(self, *args) -> "void":
-        """
+        r"""
         __setitem__(Vector3Coefficients self, PySliceObject * slice, Vector3Coefficients v)
         __setitem__(Vector3Coefficients self, PySliceObject * slice)
         __setitem__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::difference_type i, Vector3 x)
         """
         return _math_poly.Vector3Coefficients___setitem__(self, *args)
 
-
     def pop(self) -> "std::vector< math::linear::VectorN< 3,double > >::value_type":
-        """pop(Vector3Coefficients self) -> Vector3"""
+        r"""pop(Vector3Coefficients self) -> Vector3"""
         return _math_poly.Vector3Coefficients_pop(self)
 
-
-    def append(self, x: 'Vector3') -> "void":
-        """append(Vector3Coefficients self, Vector3 x)"""
+    def append(self, x: "Vector3") -> "void":
+        r"""append(Vector3Coefficients self, Vector3 x)"""
         return _math_poly.Vector3Coefficients_append(self, x)
 
-
     def empty(self) -> "bool":
-        """empty(Vector3Coefficients self) -> bool"""
+        r"""empty(Vector3Coefficients self) -> bool"""
         return _math_poly.Vector3Coefficients_empty(self)
 
-
     def size(self) -> "std::vector< math::linear::VectorN< 3,double > >::size_type":
-        """size(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
+        r"""size(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
         return _math_poly.Vector3Coefficients_size(self)
 
-
-    def swap(self, v: 'Vector3Coefficients') -> "void":
-        """swap(Vector3Coefficients self, Vector3Coefficients v)"""
+    def swap(self, v: "Vector3Coefficients") -> "void":
+        r"""swap(Vector3Coefficients self, Vector3Coefficients v)"""
         return _math_poly.Vector3Coefficients_swap(self, v)
 
-
     def begin(self) -> "std::vector< math::linear::VectorN< 3,double > >::iterator":
-        """begin(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::iterator"""
+        r"""begin(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::iterator"""
         return _math_poly.Vector3Coefficients_begin(self)
 
-
     def end(self) -> "std::vector< math::linear::VectorN< 3,double > >::iterator":
-        """end(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::iterator"""
+        r"""end(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::iterator"""
         return _math_poly.Vector3Coefficients_end(self)
 
-
     def rbegin(self) -> "std::vector< math::linear::VectorN< 3,double > >::reverse_iterator":
-        """rbegin(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::reverse_iterator"""
+        r"""rbegin(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::reverse_iterator"""
         return _math_poly.Vector3Coefficients_rbegin(self)
 
-
     def rend(self) -> "std::vector< math::linear::VectorN< 3,double > >::reverse_iterator":
-        """rend(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::reverse_iterator"""
+        r"""rend(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::reverse_iterator"""
         return _math_poly.Vector3Coefficients_rend(self)
 
-
     def clear(self) -> "void":
-        """clear(Vector3Coefficients self)"""
+        r"""clear(Vector3Coefficients self)"""
         return _math_poly.Vector3Coefficients_clear(self)
 
-
     def get_allocator(self) -> "std::vector< math::linear::VectorN< 3,double > >::allocator_type":
-        """get_allocator(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::allocator_type"""
+        r"""get_allocator(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::allocator_type"""
         return _math_poly.Vector3Coefficients_get_allocator(self)
 
-
     def pop_back(self) -> "void":
-        """pop_back(Vector3Coefficients self)"""
+        r"""pop_back(Vector3Coefficients self)"""
         return _math_poly.Vector3Coefficients_pop_back(self)
 
-
     def erase(self, *args) -> "std::vector< math::linear::VectorN< 3,double > >::iterator":
-        """
+        r"""
         erase(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::iterator pos) -> std::vector< math::linear::VectorN< 3,double > >::iterator
         erase(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::iterator first, std::vector< math::linear::VectorN< 3,double > >::iterator last) -> std::vector< math::linear::VectorN< 3,double > >::iterator
         """
         return _math_poly.Vector3Coefficients_erase(self, *args)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(Vector3Coefficients self) -> Vector3Coefficients
+        __init__(Vector3Coefficients self, Vector3Coefficients other) -> Vector3Coefficients
+        __init__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::size_type size) -> Vector3Coefficients
+        __init__(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::size_type size, Vector3 value) -> Vector3Coefficients
         """
-        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self) -> Vector3Coefficients
-        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, Vector3Coefficients arg2) -> Vector3Coefficients
-        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, std::vector< math::linear::VectorN< 3,double > >::size_type size) -> Vector3Coefficients
-        __init__(std::vector<(math::linear::VectorN<(3,double)>)> self, std::vector< math::linear::VectorN< 3,double > >::size_type size, Vector3 value) -> Vector3Coefficients
-        """
-        this = _math_poly.new_Vector3Coefficients(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def push_back(self, x: 'Vector3') -> "void":
-        """push_back(Vector3Coefficients self, Vector3 x)"""
-        return _math_poly.Vector3Coefficients_push_back(self, x)
+        _math_poly.Vector3Coefficients_swiginit(self, _math_poly.new_Vector3Coefficients(*args))
 
+    def push_back(self, x: "Vector3") -> "void":
+        r"""push_back(Vector3Coefficients self, Vector3 x)"""
+        return _math_poly.Vector3Coefficients_push_back(self, x)
 
     def front(self) -> "std::vector< math::linear::VectorN< 3,double > >::value_type const &":
-        """front(Vector3Coefficients self) -> Vector3"""
+        r"""front(Vector3Coefficients self) -> Vector3"""
         return _math_poly.Vector3Coefficients_front(self)
 
-
     def back(self) -> "std::vector< math::linear::VectorN< 3,double > >::value_type const &":
-        """back(Vector3Coefficients self) -> Vector3"""
+        r"""back(Vector3Coefficients self) -> Vector3"""
         return _math_poly.Vector3Coefficients_back(self)
 
-
-    def assign(self, n: 'std::vector< math::linear::VectorN< 3,double > >::size_type', x: 'Vector3') -> "void":
-        """assign(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::size_type n, Vector3 x)"""
+    def assign(self, n: "std::vector< math::linear::VectorN< 3,double > >::size_type", x: "Vector3") -> "void":
+        r"""assign(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::size_type n, Vector3 x)"""
         return _math_poly.Vector3Coefficients_assign(self, n, x)
 
-
     def resize(self, *args) -> "void":
-        """
+        r"""
         resize(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::size_type new_size)
         resize(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::size_type new_size, Vector3 x)
         """
         return _math_poly.Vector3Coefficients_resize(self, *args)
 
-
     def insert(self, *args) -> "void":
-        """
+        r"""
         insert(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::iterator pos, Vector3 x) -> std::vector< math::linear::VectorN< 3,double > >::iterator
         insert(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::iterator pos, std::vector< math::linear::VectorN< 3,double > >::size_type n, Vector3 x)
         """
         return _math_poly.Vector3Coefficients_insert(self, *args)
 
-
-    def reserve(self, n: 'std::vector< math::linear::VectorN< 3,double > >::size_type') -> "void":
-        """reserve(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::size_type n)"""
+    def reserve(self, n: "std::vector< math::linear::VectorN< 3,double > >::size_type") -> "void":
+        r"""reserve(Vector3Coefficients self, std::vector< math::linear::VectorN< 3,double > >::size_type n)"""
         return _math_poly.Vector3Coefficients_reserve(self, n)
 
-
     def capacity(self) -> "std::vector< math::linear::VectorN< 3,double > >::size_type":
-        """capacity(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
+        r"""capacity(Vector3Coefficients self) -> std::vector< math::linear::VectorN< 3,double > >::size_type"""
         return _math_poly.Vector3Coefficients_capacity(self)
 
-
     def __getstate__(self):
     # Return a nonempty (thus non-false) tuple with dummy value in first position
         return (-1, tuple(pickle.dumps(elem) for elem in self))
@@ -545,153 +432,120 @@ class Vector3Coefficients(_object):
             self.push_back(pickle.loads(elem))
 
     __swig_destroy__ = _math_poly.delete_Vector3Coefficients
-    __del__ = lambda self: None
-Vector3Coefficients_swigregister = _math_poly.Vector3Coefficients_swigregister
-Vector3Coefficients_swigregister(Vector3Coefficients)
 
-class Poly2D(_object):
-    """Proxy of C++ math::poly::TwoD<(double)> class."""
+# Register Vector3Coefficients in _math_poly:
+_math_poly.Vector3Coefficients_swigregister(Vector3Coefficients)
+
+class Poly2D(object):
+    r"""Proxy of C++ math::poly::TwoD< double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Poly2D, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Poly2D, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def coeffs(self) -> "std::vector< math::poly::OneD< double >,std::allocator< math::poly::OneD< double > > > &":
-        """coeffs(Poly2D self) -> Poly1DVector"""
+        r"""coeffs(Poly2D self) -> Poly1DVector"""
         return _math_poly.Poly2D_coeffs(self)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(Poly2D self) -> Poly2D
+        __init__(Poly2D self, size_t orderX, size_t orderY) -> Poly2D
+        __init__(Poly2D self, Poly1DVector v) -> Poly2D
         """
-        __init__(math::poly::TwoD<(double)> self) -> Poly2D
-        __init__(math::poly::TwoD<(double)> self, size_t orderX, size_t orderY) -> Poly2D
-        __init__(math::poly::TwoD<(double)> self, Poly1DVector v) -> Poly2D
-        """
-        this = _math_poly.new_Poly2D(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _math_poly.Poly2D_swiginit(self, _math_poly.new_Poly2D(*args))
 
     def empty(self) -> "bool":
-        """empty(Poly2D self) -> bool"""
+        r"""empty(Poly2D self) -> bool"""
         return _math_poly.Poly2D_empty(self)
 
-
     def orderX(self) -> "size_t":
-        """orderX(Poly2D self) -> size_t"""
+        r"""orderX(Poly2D self) -> size_t"""
         return _math_poly.Poly2D_orderX(self)
 
-
     def orderY(self) -> "size_t":
-        """orderY(Poly2D self) -> size_t"""
+        r"""orderY(Poly2D self) -> size_t"""
         return _math_poly.Poly2D_orderY(self)
 
-
-    def integrate(self, xStart: 'double', xEnd: 'double', yStart: 'double', yEnd: 'double') -> "double":
-        """integrate(Poly2D self, double xStart, double xEnd, double yStart, double yEnd) -> double"""
+    def integrate(self, xStart: "double", xEnd: "double", yStart: "double", yEnd: "double") -> "double":
+        r"""integrate(Poly2D self, double xStart, double xEnd, double yStart, double yEnd) -> double"""
         return _math_poly.Poly2D_integrate(self, xStart, xEnd, yStart, yEnd)
 
-
-    def set(self, i: 'size_t', p: 'Poly1D') -> "void":
-        """set(Poly2D self, size_t i, Poly1D p)"""
+    def set(self, i: "size_t", p: "Poly1D") -> "void":
+        r"""set(Poly2D self, size_t i, Poly1D p)"""
         return _math_poly.Poly2D_set(self, i, p)
 
-
     def flipXY(self) -> "math::poly::TwoD< double >":
-        """flipXY(Poly2D self) -> Poly2D"""
+        r"""flipXY(Poly2D self) -> Poly2D"""
         return _math_poly.Poly2D_flipXY(self)
 
-
     def derivativeY(self) -> "math::poly::TwoD< double >":
-        """derivativeY(Poly2D self) -> Poly2D"""
+        r"""derivativeY(Poly2D self) -> Poly2D"""
         return _math_poly.Poly2D_derivativeY(self)
 
-
     def derivativeX(self) -> "math::poly::TwoD< double >":
-        """derivativeX(Poly2D self) -> Poly2D"""
+        r"""derivativeX(Poly2D self) -> Poly2D"""
         return _math_poly.Poly2D_derivativeX(self)
 
-
     def derivativeXY(self) -> "math::poly::TwoD< double >":
-        """derivativeXY(Poly2D self) -> Poly2D"""
+        r"""derivativeXY(Poly2D self) -> Poly2D"""
         return _math_poly.Poly2D_derivativeXY(self)
 
-
     def scaleVariable(self, *args) -> "math::poly::TwoD< double >":
-        """
+        r"""
         scaleVariable(Poly2D self, double scaleX, double scaleY) -> Poly2D
         scaleVariable(Poly2D self, double scale) -> Poly2D
         """
         return _math_poly.Poly2D_scaleVariable(self, *args)
 
-
-    def truncateTo(self, orderX: 'size_t', orderY: 'size_t') -> "math::poly::TwoD< double >":
-        """truncateTo(Poly2D self, size_t orderX, size_t orderY) -> Poly2D"""
+    def truncateTo(self, orderX: "size_t", orderY: "size_t") -> "math::poly::TwoD< double >":
+        r"""truncateTo(Poly2D self, size_t orderX, size_t orderY) -> Poly2D"""
         return _math_poly.Poly2D_truncateTo(self, orderX, orderY)
 
-
-    def truncateToNonZeros(self, zeroEpsilon: 'double'=0.0) -> "math::poly::TwoD< double >":
-        """
-        truncateToNonZeros(Poly2D self, double zeroEpsilon=0.0) -> Poly2D
-        truncateToNonZeros(Poly2D self) -> Poly2D
-        """
+    def truncateToNonZeros(self, zeroEpsilon: "double"=0.0) -> "math::poly::TwoD< double >":
+        r"""truncateToNonZeros(Poly2D self, double zeroEpsilon=0.0) -> Poly2D"""
         return _math_poly.Poly2D_truncateToNonZeros(self, zeroEpsilon)
 
-
     def transformInput(self, *args) -> "math::poly::TwoD< double >":
-        """
+        r"""
         transformInput(Poly2D self, Poly2D gx, Poly2D gy, double zeroEpsilon=0.0) -> Poly2D
-        transformInput(Poly2D self, Poly2D gx, Poly2D gy) -> Poly2D
         transformInput(Poly2D self, Poly2D gx, double zeroEpsilon=0.0) -> Poly2D
-        transformInput(Poly2D self, Poly2D gx) -> Poly2D
         """
         return _math_poly.Poly2D_transformInput(self, *args)
 
-
-    def atY(self, y: 'double') -> "math::poly::OneD< double >":
-        """atY(Poly2D self, double y) -> Poly1D"""
+    def atY(self, y: "double") -> "math::poly::OneD< double >":
+        r"""atY(Poly2D self, double y) -> Poly1D"""
         return _math_poly.Poly2D_atY(self, y)
 
-
     def __imul__(self, *args) -> "math::poly::TwoD< double > &":
-        """
+        r"""
         __imul__(Poly2D self, double cv) -> Poly2D
         __imul__(Poly2D self, Poly2D p) -> Poly2D
         """
         return _math_poly.Poly2D___imul__(self, *args)
 
-
     def __mul__(self, *args) -> "math::poly::TwoD< double >":
-        """
+        r"""
         __mul__(Poly2D self, double cv) -> Poly2D
         __mul__(Poly2D self, Poly2D p) -> Poly2D
         """
         return _math_poly.Poly2D___mul__(self, *args)
 
-
-    def __iadd__(self, p: 'Poly2D') -> "math::poly::TwoD< double > &":
-        """__iadd__(Poly2D self, Poly2D p) -> Poly2D"""
+    def __iadd__(self, p: "Poly2D") -> "math::poly::TwoD< double > &":
+        r"""__iadd__(Poly2D self, Poly2D p) -> Poly2D"""
         return _math_poly.Poly2D___iadd__(self, p)
 
-
-    def __add__(self, p: 'Poly2D') -> "math::poly::TwoD< double >":
-        """__add__(Poly2D self, Poly2D p) -> Poly2D"""
+    def __add__(self, p: "Poly2D") -> "math::poly::TwoD< double >":
+        r"""__add__(Poly2D self, Poly2D p) -> Poly2D"""
         return _math_poly.Poly2D___add__(self, p)
 
-
-    def __isub__(self, p: 'Poly2D') -> "math::poly::TwoD< double > &":
-        """__isub__(Poly2D self, Poly2D p) -> Poly2D"""
+    def __isub__(self, p: "Poly2D") -> "math::poly::TwoD< double > &":
+        r"""__isub__(Poly2D self, Poly2D p) -> Poly2D"""
         return _math_poly.Poly2D___isub__(self, p)
 
-
-    def __sub__(self, p: 'Poly2D') -> "math::poly::TwoD< double >":
-        """__sub__(Poly2D self, Poly2D p) -> Poly2D"""
+    def __sub__(self, p: "Poly2D") -> "math::poly::TwoD< double >":
+        r"""__sub__(Poly2D self, Poly2D p) -> Poly2D"""
         return _math_poly.Poly2D___sub__(self, p)
 
-
     def __itruediv__(self, *args):
         return _math_poly.Poly2D___itruediv__(self, *args)
     __idiv__ = __itruediv__
@@ -704,26 +558,22 @@ class Poly2D(_object):
 
 
 
-    def __eq__(self, p: 'Poly2D') -> "bool":
-        """__eq__(Poly2D self, Poly2D p) -> bool"""
+    def __eq__(self, p: "Poly2D") -> "bool":
+        r"""__eq__(Poly2D self, Poly2D p) -> bool"""
         return _math_poly.Poly2D___eq__(self, p)
 
-
-    def __ne__(self, p: 'Poly2D') -> "bool":
-        """__ne__(Poly2D self, Poly2D p) -> bool"""
+    def __ne__(self, p: "Poly2D") -> "bool":
+        r"""__ne__(Poly2D self, Poly2D p) -> bool"""
         return _math_poly.Poly2D___ne__(self, p)
 
-
-    def power(self, toThe: 'size_t') -> "math::poly::TwoD< double >":
-        """power(Poly2D self, size_t toThe) -> Poly2D"""
+    def power(self, toThe: "size_t") -> "math::poly::TwoD< double >":
+        r"""power(Poly2D self, size_t toThe) -> Poly2D"""
         return _math_poly.Poly2D_power(self, toThe)
 
-
     def isScalar(self) -> "bool":
-        """isScalar(Poly2D self) -> bool"""
+        r"""isScalar(Poly2D self) -> bool"""
         return _math_poly.Poly2D_isScalar(self)
 
-
     def __setstate__(self, state):
         """Recursive unpickling method for SWIG-wrapped Poly2D."""
         self.__init__(pickle.loads(state.pop('coeffs')))
@@ -738,39 +588,33 @@ class Poly2D(_object):
         return state
 
 
-    def __getitem__(self, inObj: 'PyObject *') -> "double":
-        """__getitem__(Poly2D self, PyObject * inObj) -> double"""
+    def __getitem__(self, inObj: "PyObject *") -> "double":
+        r"""__getitem__(Poly2D self, PyObject * inObj) -> double"""
         return _math_poly.Poly2D___getitem__(self, inObj)
 
-
-    def __setitem__(self, inObj: 'PyObject *', val: 'double') -> "void":
-        """__setitem__(Poly2D self, PyObject * inObj, double val)"""
+    def __setitem__(self, inObj: "PyObject *", val: "double") -> "void":
+        r"""__setitem__(Poly2D self, PyObject * inObj, double val)"""
         return _math_poly.Poly2D___setitem__(self, inObj, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(Poly2D self) -> std::string"""
+        r"""__str__(Poly2D self) -> std::string"""
         return _math_poly.Poly2D___str__(self)
 
-
-    def __deepcopy__(self, memo: 'PyObject *') -> "math::poly::TwoD< double >":
-        """__deepcopy__(Poly2D self, PyObject * memo) -> Poly2D"""
+    def __deepcopy__(self, memo: "PyObject *") -> "math::poly::TwoD< double >":
+        r"""__deepcopy__(Poly2D self, PyObject * memo) -> Poly2D"""
         return _math_poly.Poly2D___deepcopy__(self, memo)
 
-
     def __call__(self, *args) -> "PyObject *":
-        """
+        r"""
         __call__(Poly2D self, double atX, double atY) -> double
         __call__(Poly2D self, PyObject * x_input, PyObject * y_input) -> PyObject *
         """
         return _math_poly.Poly2D___call__(self, *args)
 
-
     def asArray(self) -> "PyObject *":
-        """asArray(Poly2D self) -> PyObject *"""
+        r"""asArray(Poly2D self) -> PyObject *"""
         return _math_poly.Poly2D_asArray(self)
 
-
     @staticmethod
     def fromArray(array):
         if len(array) == 0:
@@ -782,211 +626,173 @@ class Poly2D(_object):
         return twoD
 
     __swig_destroy__ = _math_poly.delete_Poly2D
-    __del__ = lambda self: None
-Poly2D_swigregister = _math_poly.Poly2D_swigregister
-Poly2D_swigregister(Poly2D)
 
-class Poly1DVector(_object):
-    """Proxy of C++ std::vector<(math::poly::OneD<(double)>)> class."""
+# Register Poly2D in _math_poly:
+_math_poly.Poly2D_swigregister(Poly2D)
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Poly1DVector, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Poly1DVector, name)
+class Poly1DVector(object):
+    r"""Proxy of C++ std::vector< math::poly::OneD< double > > class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def iterator(self) -> "swig::SwigPyIterator *":
-        """iterator(Poly1DVector self) -> SwigPyIterator"""
+        r"""iterator(Poly1DVector self) -> SwigPyIterator"""
         return _math_poly.Poly1DVector_iterator(self)
-
     def __iter__(self):
         return self.iterator()
 
     def __nonzero__(self) -> "bool":
-        """__nonzero__(Poly1DVector self) -> bool"""
+        r"""__nonzero__(Poly1DVector self) -> bool"""
         return _math_poly.Poly1DVector___nonzero__(self)
 
-
     def __bool__(self) -> "bool":
-        """__bool__(Poly1DVector self) -> bool"""
+        r"""__bool__(Poly1DVector self) -> bool"""
         return _math_poly.Poly1DVector___bool__(self)
 
-
     def __len__(self) -> "std::vector< math::poly::OneD< double > >::size_type":
-        """__len__(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::size_type"""
+        r"""__len__(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::size_type"""
         return _math_poly.Poly1DVector___len__(self)
 
-
-    def __getslice__(self, i: 'std::vector< math::poly::OneD< double > >::difference_type', j: 'std::vector< math::poly::OneD< double > >::difference_type') -> "std::vector< math::poly::OneD< double >,std::allocator< math::poly::OneD< double > > > *":
-        """__getslice__(Poly1DVector self, std::vector< math::poly::OneD< double > >::difference_type i, std::vector< math::poly::OneD< double > >::difference_type j) -> Poly1DVector"""
+    def __getslice__(self, i: "std::vector< math::poly::OneD< double > >::difference_type", j: "std::vector< math::poly::OneD< double > >::difference_type") -> "std::vector< math::poly::OneD< double >,std::allocator< math::poly::OneD< double > > > *":
+        r"""__getslice__(Poly1DVector self, std::vector< math::poly::OneD< double > >::difference_type i, std::vector< math::poly::OneD< double > >::difference_type j) -> Poly1DVector"""
         return _math_poly.Poly1DVector___getslice__(self, i, j)
 
-
     def __setslice__(self, *args) -> "void":
-        """
+        r"""
         __setslice__(Poly1DVector self, std::vector< math::poly::OneD< double > >::difference_type i, std::vector< math::poly::OneD< double > >::difference_type j)
         __setslice__(Poly1DVector self, std::vector< math::poly::OneD< double > >::difference_type i, std::vector< math::poly::OneD< double > >::difference_type j, Poly1DVector v)
         """
         return _math_poly.Poly1DVector___setslice__(self, *args)
 
-
-    def __delslice__(self, i: 'std::vector< math::poly::OneD< double > >::difference_type', j: 'std::vector< math::poly::OneD< double > >::difference_type') -> "void":
-        """__delslice__(Poly1DVector self, std::vector< math::poly::OneD< double > >::difference_type i, std::vector< math::poly::OneD< double > >::difference_type j)"""
+    def __delslice__(self, i: "std::vector< math::poly::OneD< double > >::difference_type", j: "std::vector< math::poly::OneD< double > >::difference_type") -> "void":
+        r"""__delslice__(Poly1DVector self, std::vector< math::poly::OneD< double > >::difference_type i, std::vector< math::poly::OneD< double > >::difference_type j)"""
         return _math_poly.Poly1DVector___delslice__(self, i, j)
 
-
     def __delitem__(self, *args) -> "void":
-        """
+        r"""
         __delitem__(Poly1DVector self, std::vector< math::poly::OneD< double > >::difference_type i)
         __delitem__(Poly1DVector self, PySliceObject * slice)
         """
         return _math_poly.Poly1DVector___delitem__(self, *args)
 
-
     def __getitem__(self, *args) -> "std::vector< math::poly::OneD< double > >::value_type const &":
-        """
+        r"""
         __getitem__(Poly1DVector self, PySliceObject * slice) -> Poly1DVector
         __getitem__(Poly1DVector self, std::vector< math::poly::OneD< double > >::difference_type i) -> Poly1D
         """
         return _math_poly.Poly1DVector___getitem__(self, *args)
 
-
     def __setitem__(self, *args) -> "void":
-        """
+        r"""
         __setitem__(Poly1DVector self, PySliceObject * slice, Poly1DVector v)
         __setitem__(Poly1DVector self, PySliceObject * slice)
         __setitem__(Poly1DVector self, std::vector< math::poly::OneD< double > >::difference_type i, Poly1D x)
         """
         return _math_poly.Poly1DVector___setitem__(self, *args)
 
-
     def pop(self) -> "std::vector< math::poly::OneD< double > >::value_type":
-        """pop(Poly1DVector self) -> Poly1D"""
+        r"""pop(Poly1DVector self) -> Poly1D"""
         return _math_poly.Poly1DVector_pop(self)
 
-
-    def append(self, x: 'Poly1D') -> "void":
-        """append(Poly1DVector self, Poly1D x)"""
+    def append(self, x: "Poly1D") -> "void":
+        r"""append(Poly1DVector self, Poly1D x)"""
         return _math_poly.Poly1DVector_append(self, x)
 
-
     def empty(self) -> "bool":
-        """empty(Poly1DVector self) -> bool"""
+        r"""empty(Poly1DVector self) -> bool"""
         return _math_poly.Poly1DVector_empty(self)
 
-
     def size(self) -> "std::vector< math::poly::OneD< double > >::size_type":
-        """size(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::size_type"""
+        r"""size(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::size_type"""
         return _math_poly.Poly1DVector_size(self)
 
-
-    def swap(self, v: 'Poly1DVector') -> "void":
-        """swap(Poly1DVector self, Poly1DVector v)"""
+    def swap(self, v: "Poly1DVector") -> "void":
+        r"""swap(Poly1DVector self, Poly1DVector v)"""
         return _math_poly.Poly1DVector_swap(self, v)
 
-
     def begin(self) -> "std::vector< math::poly::OneD< double > >::iterator":
-        """begin(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::iterator"""
+        r"""begin(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::iterator"""
         return _math_poly.Poly1DVector_begin(self)
 
-
     def end(self) -> "std::vector< math::poly::OneD< double > >::iterator":
-        """end(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::iterator"""
+        r"""end(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::iterator"""
         return _math_poly.Poly1DVector_end(self)
 
-
     def rbegin(self) -> "std::vector< math::poly::OneD< double > >::reverse_iterator":
-        """rbegin(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::reverse_iterator"""
+        r"""rbegin(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::reverse_iterator"""
         return _math_poly.Poly1DVector_rbegin(self)
 
-
     def rend(self) -> "std::vector< math::poly::OneD< double > >::reverse_iterator":
-        """rend(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::reverse_iterator"""
+        r"""rend(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::reverse_iterator"""
         return _math_poly.Poly1DVector_rend(self)
 
-
     def clear(self) -> "void":
-        """clear(Poly1DVector self)"""
+        r"""clear(Poly1DVector self)"""
         return _math_poly.Poly1DVector_clear(self)
 
-
     def get_allocator(self) -> "std::vector< math::poly::OneD< double > >::allocator_type":
-        """get_allocator(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::allocator_type"""
+        r"""get_allocator(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::allocator_type"""
         return _math_poly.Poly1DVector_get_allocator(self)
 
-
     def pop_back(self) -> "void":
-        """pop_back(Poly1DVector self)"""
+        r"""pop_back(Poly1DVector self)"""
         return _math_poly.Poly1DVector_pop_back(self)
 
-
     def erase(self, *args) -> "std::vector< math::poly::OneD< double > >::iterator":
-        """
+        r"""
         erase(Poly1DVector self, std::vector< math::poly::OneD< double > >::iterator pos) -> std::vector< math::poly::OneD< double > >::iterator
         erase(Poly1DVector self, std::vector< math::poly::OneD< double > >::iterator first, std::vector< math::poly::OneD< double > >::iterator last) -> std::vector< math::poly::OneD< double > >::iterator
         """
         return _math_poly.Poly1DVector_erase(self, *args)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(Poly1DVector self) -> Poly1DVector
+        __init__(Poly1DVector self, Poly1DVector other) -> Poly1DVector
+        __init__(Poly1DVector self, std::vector< math::poly::OneD< double > >::size_type size) -> Poly1DVector
+        __init__(Poly1DVector self, std::vector< math::poly::OneD< double > >::size_type size, Poly1D value) -> Poly1DVector
         """
-        __init__(std::vector<(math::poly::OneD<(double)>)> self) -> Poly1DVector
-        __init__(std::vector<(math::poly::OneD<(double)>)> self, Poly1DVector arg2) -> Poly1DVector
-        __init__(std::vector<(math::poly::OneD<(double)>)> self, std::vector< math::poly::OneD< double > >::size_type size) -> Poly1DVector
-        __init__(std::vector<(math::poly::OneD<(double)>)> self, std::vector< math::poly::OneD< double > >::size_type size, Poly1D value) -> Poly1DVector
-        """
-        this = _math_poly.new_Poly1DVector(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def push_back(self, x: 'Poly1D') -> "void":
-        """push_back(Poly1DVector self, Poly1D x)"""
-        return _math_poly.Poly1DVector_push_back(self, x)
+        _math_poly.Poly1DVector_swiginit(self, _math_poly.new_Poly1DVector(*args))
 
+    def push_back(self, x: "Poly1D") -> "void":
+        r"""push_back(Poly1DVector self, Poly1D x)"""
+        return _math_poly.Poly1DVector_push_back(self, x)
 
     def front(self) -> "std::vector< math::poly::OneD< double > >::value_type const &":
-        """front(Poly1DVector self) -> Poly1D"""
+        r"""front(Poly1DVector self) -> Poly1D"""
         return _math_poly.Poly1DVector_front(self)
 
-
     def back(self) -> "std::vector< math::poly::OneD< double > >::value_type const &":
-        """back(Poly1DVector self) -> Poly1D"""
+        r"""back(Poly1DVector self) -> Poly1D"""
         return _math_poly.Poly1DVector_back(self)
 
-
-    def assign(self, n: 'std::vector< math::poly::OneD< double > >::size_type', x: 'Poly1D') -> "void":
-        """assign(Poly1DVector self, std::vector< math::poly::OneD< double > >::size_type n, Poly1D x)"""
+    def assign(self, n: "std::vector< math::poly::OneD< double > >::size_type", x: "Poly1D") -> "void":
+        r"""assign(Poly1DVector self, std::vector< math::poly::OneD< double > >::size_type n, Poly1D x)"""
         return _math_poly.Poly1DVector_assign(self, n, x)
 
-
     def resize(self, *args) -> "void":
-        """
+        r"""
         resize(Poly1DVector self, std::vector< math::poly::OneD< double > >::size_type new_size)
         resize(Poly1DVector self, std::vector< math::poly::OneD< double > >::size_type new_size, Poly1D x)
         """
         return _math_poly.Poly1DVector_resize(self, *args)
 
-
     def insert(self, *args) -> "void":
-        """
+        r"""
         insert(Poly1DVector self, std::vector< math::poly::OneD< double > >::iterator pos, Poly1D x) -> std::vector< math::poly::OneD< double > >::iterator
         insert(Poly1DVector self, std::vector< math::poly::OneD< double > >::iterator pos, std::vector< math::poly::OneD< double > >::size_type n, Poly1D x)
         """
         return _math_poly.Poly1DVector_insert(self, *args)
 
-
-    def reserve(self, n: 'std::vector< math::poly::OneD< double > >::size_type') -> "void":
-        """reserve(Poly1DVector self, std::vector< math::poly::OneD< double > >::size_type n)"""
+    def reserve(self, n: "std::vector< math::poly::OneD< double > >::size_type") -> "void":
+        r"""reserve(Poly1DVector self, std::vector< math::poly::OneD< double > >::size_type n)"""
         return _math_poly.Poly1DVector_reserve(self, n)
 
-
     def capacity(self) -> "std::vector< math::poly::OneD< double > >::size_type":
-        """capacity(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::size_type"""
+        r"""capacity(Poly1DVector self) -> std::vector< math::poly::OneD< double > >::size_type"""
         return _math_poly.Poly1DVector_capacity(self)
 
-
     def __getstate__(self):
     # Return a nonempty (thus non-false) tuple with dummy value in first position
         return (-1, tuple(pickle.dumps(elem) for elem in self))
@@ -998,20 +804,20 @@ class Poly1DVector(_object):
             self.push_back(pickle.loads(elem))
 
     __swig_destroy__ = _math_poly.delete_Poly1DVector
-    __del__ = lambda self: None
-Poly1DVector_swigregister = _math_poly.Poly1DVector_swigregister
-Poly1DVector_swigregister(Poly1DVector)
+
+# Register Poly1DVector in _math_poly:
+_math_poly.Poly1DVector_swigregister(Poly1DVector)
 
 
 def compute_mean_value(*args) -> "double":
-    """
+    r"""
     compute_mean_value(VectorDouble x) -> double
     compute_mean_value(MatrixDouble x) -> double
     """
     return _math_poly.compute_mean_value(*args)
 
 def fit(*args) -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
-    """
+    r"""
     fit(size_t numObs, double const * x, double const * y, size_t order) -> Poly1D
     fit(MatrixDouble x, MatrixDouble y, MatrixDouble z, size_t nx, size_t ny) -> Poly2D
     fit(size_t numRows, size_t numCols, double const * x, double const * y, double const * z, size_t nx, size_t ny) -> Poly2D
@@ -1021,117 +827,94 @@ def fit(*args) -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
     """
     return _math_poly.fit(*args)
 
-def FitVectorDouble(x: 'VectorDouble', y: 'VectorDouble', order: 'size_t') -> "math::poly::OneD< double >":
-    """FitVectorDouble(VectorDouble x, VectorDouble y, size_t order) -> Poly1D"""
+def FitVectorDouble(x: "VectorDouble", y: "VectorDouble", order: "size_t") -> "math::poly::OneD< double >":
+    r"""FitVectorDouble(VectorDouble x, VectorDouble y, size_t order) -> Poly1D"""
     return _math_poly.FitVectorDouble(x, y, order)
-class PolyVector3(_object):
-    """Proxy of C++ math::poly::OneD<(Vector3)> class."""
+class PolyVector3(object):
+    r"""Proxy of C++ math::poly::OneD< Vector3 > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyVector3, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, PolyVector3, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
+        r"""
+        __init__(PolyVector3 self) -> PolyVector3
+        __init__(PolyVector3 self, Vector3Coefficients coef) -> PolyVector3
+        __init__(PolyVector3 self, size_t order) -> PolyVector3
+        __init__(PolyVector3 self, size_t order, Vector3 coef) -> PolyVector3
         """
-        __init__(math::poly::OneD<(Vector3)> self) -> PolyVector3
-        __init__(math::poly::OneD<(Vector3)> self, Vector3Coefficients coef) -> PolyVector3
-        __init__(math::poly::OneD<(Vector3)> self, size_t order) -> PolyVector3
-        __init__(math::poly::OneD<(Vector3)> self, size_t order, Vector3 coef) -> PolyVector3
-        """
-        this = _math_poly.new_PolyVector3(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _math_poly.PolyVector3_swiginit(self, _math_poly.new_PolyVector3(*args))
 
     def order(self) -> "size_t":
-        """order(PolyVector3 self) -> size_t"""
+        r"""order(PolyVector3 self) -> size_t"""
         return _math_poly.PolyVector3_order(self)
 
-
     def size(self) -> "size_t":
-        """size(PolyVector3 self) -> size_t"""
+        r"""size(PolyVector3 self) -> size_t"""
         return _math_poly.PolyVector3_size(self)
 
-
     def empty(self) -> "bool":
-        """empty(PolyVector3 self) -> bool"""
+        r"""empty(PolyVector3 self) -> bool"""
         return _math_poly.PolyVector3_empty(self)
 
-
     def coeffs(self) -> "std::vector< math::linear::VectorN< 3,double >,std::allocator< math::linear::VectorN< 3,double > > > const &":
-        """coeffs(PolyVector3 self) -> Vector3Coefficients"""
+        r"""coeffs(PolyVector3 self) -> Vector3Coefficients"""
         return _math_poly.PolyVector3_coeffs(self)
 
-
-    def scaleVariable(self, scale: 'double') -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
-        """scaleVariable(PolyVector3 self, double scale) -> PolyVector3"""
+    def scaleVariable(self, scale: "double") -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
+        r"""scaleVariable(PolyVector3 self, double scale) -> PolyVector3"""
         return _math_poly.PolyVector3_scaleVariable(self, scale)
 
-
-    def truncateTo(self, order: 'size_t') -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
-        """truncateTo(PolyVector3 self, size_t order) -> PolyVector3"""
+    def truncateTo(self, order: "size_t") -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
+        r"""truncateTo(PolyVector3 self, size_t order) -> PolyVector3"""
         return _math_poly.PolyVector3_truncateTo(self, order)
 
-
-    def copyFrom(self, p: 'PolyVector3') -> "void":
-        """copyFrom(PolyVector3 self, PolyVector3 p)"""
+    def copyFrom(self, p: "PolyVector3") -> "void":
+        r"""copyFrom(PolyVector3 self, PolyVector3 p)"""
         return _math_poly.PolyVector3_copyFrom(self, p)
 
-
     def derivative(self) -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
-        """derivative(PolyVector3 self) -> PolyVector3"""
+        r"""derivative(PolyVector3 self) -> PolyVector3"""
         return _math_poly.PolyVector3_derivative(self)
 
-
-    def velocity(self, x: 'double') -> "math::linear::VectorN< 3,double >":
-        """velocity(PolyVector3 self, double x) -> Vector3"""
+    def velocity(self, x: "double") -> "math::linear::VectorN< 3,double >":
+        r"""velocity(PolyVector3 self, double x) -> Vector3"""
         return _math_poly.PolyVector3_velocity(self, x)
 
-
-    def acceleration(self, x: 'double') -> "math::linear::VectorN< 3,double >":
-        """acceleration(PolyVector3 self, double x) -> Vector3"""
+    def acceleration(self, x: "double") -> "math::linear::VectorN< 3,double >":
+        r"""acceleration(PolyVector3 self, double x) -> Vector3"""
         return _math_poly.PolyVector3_acceleration(self, x)
 
-
     def __imul__(self, *args) -> "math::poly::OneD< math::linear::VectorN< 3,double > > &":
-        """
+        r"""
         __imul__(PolyVector3 self, double cv) -> PolyVector3
         __imul__(PolyVector3 self, PolyVector3 p) -> PolyVector3
         """
         return _math_poly.PolyVector3___imul__(self, *args)
 
-
     def __mul__(self, *args) -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
-        """
+        r"""
         __mul__(PolyVector3 self, double cv) -> PolyVector3
         __mul__(PolyVector3 self, PolyVector3 p) -> PolyVector3
         """
         return _math_poly.PolyVector3___mul__(self, *args)
 
-
-    def __iadd__(self, p: 'PolyVector3') -> "math::poly::OneD< math::linear::VectorN< 3,double > > &":
-        """__iadd__(PolyVector3 self, PolyVector3 p) -> PolyVector3"""
+    def __iadd__(self, p: "PolyVector3") -> "math::poly::OneD< math::linear::VectorN< 3,double > > &":
+        r"""__iadd__(PolyVector3 self, PolyVector3 p) -> PolyVector3"""
         return _math_poly.PolyVector3___iadd__(self, p)
 
-
-    def __add__(self, p: 'PolyVector3') -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
-        """__add__(PolyVector3 self, PolyVector3 p) -> PolyVector3"""
+    def __add__(self, p: "PolyVector3") -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
+        r"""__add__(PolyVector3 self, PolyVector3 p) -> PolyVector3"""
         return _math_poly.PolyVector3___add__(self, p)
 
-
-    def __isub__(self, p: 'PolyVector3') -> "math::poly::OneD< math::linear::VectorN< 3,double > > &":
-        """__isub__(PolyVector3 self, PolyVector3 p) -> PolyVector3"""
+    def __isub__(self, p: "PolyVector3") -> "math::poly::OneD< math::linear::VectorN< 3,double > > &":
+        r"""__isub__(PolyVector3 self, PolyVector3 p) -> PolyVector3"""
         return _math_poly.PolyVector3___isub__(self, p)
 
-
-    def __sub__(self, p: 'PolyVector3') -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
-        """__sub__(PolyVector3 self, PolyVector3 p) -> PolyVector3"""
+    def __sub__(self, p: "PolyVector3") -> "math::poly::OneD< math::linear::VectorN< 3,double > >":
+        r"""__sub__(PolyVector3 self, PolyVector3 p) -> PolyVector3"""
         return _math_poly.PolyVector3___sub__(self, p)
 
-
     def __itruediv__(self, *args):
         return _math_poly.PolyVector3___itruediv__(self, *args)
     __idiv__ = __itruediv__
@@ -1144,16 +927,14 @@ class PolyVector3(_object):
 
 
 
-    def __eq__(self, p: 'PolyVector3') -> "bool":
-        """__eq__(PolyVector3 self, PolyVector3 p) -> bool"""
+    def __eq__(self, p: "PolyVector3") -> "bool":
+        r"""__eq__(PolyVector3 self, PolyVector3 p) -> bool"""
         return _math_poly.PolyVector3___eq__(self, p)
 
-
-    def __ne__(self, p: 'PolyVector3') -> "bool":
-        """__ne__(PolyVector3 self, PolyVector3 p) -> bool"""
+    def __ne__(self, p: "PolyVector3") -> "bool":
+        r"""__ne__(PolyVector3 self, PolyVector3 p) -> bool"""
         return _math_poly.PolyVector3___ne__(self, p)
 
-
     def __setstate__(self, state):
         """Recursive unpickling method for SWIG-wrapped Poly1D."""
         self.__init__(pickle.loads(state.pop('coeffs')))
@@ -1169,232 +950,190 @@ class PolyVector3(_object):
 
 
 
-    def __getitem__(self, i: 'long') -> "Vector3":
-        """__getitem__(PolyVector3 self, long i) -> Vector3"""
+    def __getitem__(self, i: "long") -> "Vector3":
+        r"""__getitem__(PolyVector3 self, long i) -> Vector3"""
         return _math_poly.PolyVector3___getitem__(self, i)
 
-
-    def __setitem__(self, i: 'long', val: 'Vector3') -> "void":
-        """__setitem__(PolyVector3 self, long i, Vector3 val)"""
+    def __setitem__(self, i: "long", val: "Vector3") -> "void":
+        r"""__setitem__(PolyVector3 self, long i, Vector3 val)"""
         return _math_poly.PolyVector3___setitem__(self, i, val)
 
-
     def __str__(self) -> "std::string":
-        """__str__(PolyVector3 self) -> std::string"""
+        r"""__str__(PolyVector3 self) -> std::string"""
         return _math_poly.PolyVector3___str__(self)
 
-
-    def __deepcopy__(self, memo: 'PyObject *') -> "math::poly::OneD< Vector3 >":
-        """__deepcopy__(PolyVector3 self, PyObject * memo) -> PolyVector3"""
+    def __deepcopy__(self, memo: "PyObject *") -> "math::poly::OneD< Vector3 >":
+        r"""__deepcopy__(PolyVector3 self, PyObject * memo) -> PolyVector3"""
         return _math_poly.PolyVector3___deepcopy__(self, memo)
 
-
     def __call__(self, *args) -> "PyObject *":
-        """
+        r"""
         __call__(PolyVector3 self, double at) -> Vector3
         __call__(PolyVector3 self, PyObject * input) -> PyObject *
         """
         return _math_poly.PolyVector3___call__(self, *args)
 
-
     def asArray(self) -> "PyObject *":
-        """asArray(PolyVector3 self) -> PyObject *"""
+        r"""asArray(PolyVector3 self) -> PyObject *"""
         return _math_poly.PolyVector3_asArray(self)
 
-
     @staticmethod
     def fromArray(array):
         return Poly1D(array.tolist())
 
     __swig_destroy__ = _math_poly.delete_PolyVector3
-    __del__ = lambda self: None
-PolyVector3_swigregister = _math_poly.PolyVector3_swigregister
-PolyVector3_swigregister(PolyVector3)
 
-class StdVectorDouble(_object):
-    """Proxy of C++ std::vector<(double)> class."""
+# Register PolyVector3 in _math_poly:
+_math_poly.PolyVector3_swigregister(PolyVector3)
+
+class StdVectorDouble(object):
+    r"""Proxy of C++ std::vector< double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorDouble, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorDouble, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def iterator(self) -> "swig::SwigPyIterator *":
-        """iterator(StdVectorDouble self) -> SwigPyIterator"""
+        r"""iterator(StdVectorDouble self) -> SwigPyIterator"""
         return _math_poly.StdVectorDouble_iterator(self)
-
     def __iter__(self):
         return self.iterator()
 
     def __nonzero__(self) -> "bool":
-        """__nonzero__(StdVectorDouble self) -> bool"""
+        r"""__nonzero__(StdVectorDouble self) -> bool"""
         return _math_poly.StdVectorDouble___nonzero__(self)
 
-
     def __bool__(self) -> "bool":
-        """__bool__(StdVectorDouble self) -> bool"""
+        r"""__bool__(StdVectorDouble self) -> bool"""
         return _math_poly.StdVectorDouble___bool__(self)
 
-
     def __len__(self) -> "std::vector< double >::size_type":
-        """__len__(StdVectorDouble self) -> std::vector< double >::size_type"""
+        r"""__len__(StdVectorDouble self) -> std::vector< double >::size_type"""
         return _math_poly.StdVectorDouble___len__(self)
 
-
-    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
-        """__getslice__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> std_vector_double"""
+    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
+        r"""__getslice__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> std_vector_double"""
         return _math_poly.StdVectorDouble___getslice__(self, i, j)
 
-
     def __setslice__(self, *args) -> "void":
-        """
+        r"""
         __setslice__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
         __setslice__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, std_vector_double v)
         """
         return _math_poly.StdVectorDouble___setslice__(self, *args)
 
-
-    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
-        """__delslice__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
+    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
+        r"""__delslice__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
         return _math_poly.StdVectorDouble___delslice__(self, i, j)
 
-
     def __delitem__(self, *args) -> "void":
-        """
+        r"""
         __delitem__(StdVectorDouble self, std::vector< double >::difference_type i)
         __delitem__(StdVectorDouble self, PySliceObject * slice)
         """
         return _math_poly.StdVectorDouble___delitem__(self, *args)
 
-
     def pop(self) -> "std::vector< double >::value_type":
-        """pop(StdVectorDouble self) -> std::vector< double >::value_type"""
+        r"""pop(StdVectorDouble self) -> std::vector< double >::value_type"""
         return _math_poly.StdVectorDouble_pop(self)
 
-
-    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
-        """append(StdVectorDouble self, std::vector< double >::value_type const & x)"""
+    def append(self, x: "std::vector< double >::value_type const &") -> "void":
+        r"""append(StdVectorDouble self, std::vector< double >::value_type const & x)"""
         return _math_poly.StdVectorDouble_append(self, x)
 
-
     def empty(self) -> "bool":
-        """empty(StdVectorDouble self) -> bool"""
+        r"""empty(StdVectorDouble self) -> bool"""
         return _math_poly.StdVectorDouble_empty(self)
 
-
     def size(self) -> "std::vector< double >::size_type":
-        """size(StdVectorDouble self) -> std::vector< double >::size_type"""
+        r"""size(StdVectorDouble self) -> std::vector< double >::size_type"""
         return _math_poly.StdVectorDouble_size(self)
 
-
-    def swap(self, v: 'std_vector_double') -> "void":
-        """swap(StdVectorDouble self, std_vector_double v)"""
+    def swap(self, v: "std_vector_double") -> "void":
+        r"""swap(StdVectorDouble self, std_vector_double v)"""
         return _math_poly.StdVectorDouble_swap(self, v)
 
-
     def begin(self) -> "std::vector< double >::iterator":
-        """begin(StdVectorDouble self) -> std::vector< double >::iterator"""
+        r"""begin(StdVectorDouble self) -> std::vector< double >::iterator"""
         return _math_poly.StdVectorDouble_begin(self)
 
-
     def end(self) -> "std::vector< double >::iterator":
-        """end(StdVectorDouble self) -> std::vector< double >::iterator"""
+        r"""end(StdVectorDouble self) -> std::vector< double >::iterator"""
         return _math_poly.StdVectorDouble_end(self)
 
-
     def rbegin(self) -> "std::vector< double >::reverse_iterator":
-        """rbegin(StdVectorDouble self) -> std::vector< double >::reverse_iterator"""
+        r"""rbegin(StdVectorDouble self) -> std::vector< double >::reverse_iterator"""
         return _math_poly.StdVectorDouble_rbegin(self)
 
-
     def rend(self) -> "std::vector< double >::reverse_iterator":
-        """rend(StdVectorDouble self) -> std::vector< double >::reverse_iterator"""
+        r"""rend(StdVectorDouble self) -> std::vector< double >::reverse_iterator"""
         return _math_poly.StdVectorDouble_rend(self)
 
-
     def clear(self) -> "void":
-        """clear(StdVectorDouble self)"""
+        r"""clear(StdVectorDouble self)"""
         return _math_poly.StdVectorDouble_clear(self)
 
-
     def get_allocator(self) -> "std::vector< double >::allocator_type":
-        """get_allocator(StdVectorDouble self) -> std::vector< double >::allocator_type"""
+        r"""get_allocator(StdVectorDouble self) -> std::vector< double >::allocator_type"""
         return _math_poly.StdVectorDouble_get_allocator(self)
 
-
     def pop_back(self) -> "void":
-        """pop_back(StdVectorDouble self)"""
+        r"""pop_back(StdVectorDouble self)"""
         return _math_poly.StdVectorDouble_pop_back(self)
 
-
     def erase(self, *args) -> "std::vector< double >::iterator":
-        """
+        r"""
         erase(StdVectorDouble self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
         erase(StdVectorDouble self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
         """
         return _math_poly.StdVectorDouble_erase(self, *args)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(StdVectorDouble self) -> StdVectorDouble
+        __init__(StdVectorDouble self, std_vector_double other) -> StdVectorDouble
+        __init__(StdVectorDouble self, std::vector< double >::size_type size) -> StdVectorDouble
+        __init__(StdVectorDouble self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> StdVectorDouble
         """
-        __init__(std::vector<(double)> self) -> StdVectorDouble
-        __init__(std::vector<(double)> self, std_vector_double arg2) -> StdVectorDouble
-        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> StdVectorDouble
-        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> StdVectorDouble
-        """
-        this = _math_poly.new_StdVectorDouble(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
-        """push_back(StdVectorDouble self, std::vector< double >::value_type const & x)"""
-        return _math_poly.StdVectorDouble_push_back(self, x)
+        _math_poly.StdVectorDouble_swiginit(self, _math_poly.new_StdVectorDouble(*args))
 
+    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
+        r"""push_back(StdVectorDouble self, std::vector< double >::value_type const & x)"""
+        return _math_poly.StdVectorDouble_push_back(self, x)
 
     def front(self) -> "std::vector< double >::value_type const &":
-        """front(StdVectorDouble self) -> std::vector< double >::value_type const &"""
+        r"""front(StdVectorDouble self) -> std::vector< double >::value_type const &"""
         return _math_poly.StdVectorDouble_front(self)
 
-
     def back(self) -> "std::vector< double >::value_type const &":
-        """back(StdVectorDouble self) -> std::vector< double >::value_type const &"""
+        r"""back(StdVectorDouble self) -> std::vector< double >::value_type const &"""
         return _math_poly.StdVectorDouble_back(self)
 
-
-    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
-        """assign(StdVectorDouble self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
+    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
+        r"""assign(StdVectorDouble self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
         return _math_poly.StdVectorDouble_assign(self, n, x)
 
-
     def resize(self, *args) -> "void":
-        """
+        r"""
         resize(StdVectorDouble self, std::vector< double >::size_type new_size)
         resize(StdVectorDouble self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
         """
         return _math_poly.StdVectorDouble_resize(self, *args)
 
-
     def insert(self, *args) -> "void":
-        """
+        r"""
         insert(StdVectorDouble self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
         insert(StdVectorDouble self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
         """
         return _math_poly.StdVectorDouble_insert(self, *args)
 
-
-    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
-        """reserve(StdVectorDouble self, std::vector< double >::size_type n)"""
+    def reserve(self, n: "std::vector< double >::size_type") -> "void":
+        r"""reserve(StdVectorDouble self, std::vector< double >::size_type n)"""
         return _math_poly.StdVectorDouble_reserve(self, n)
 
-
     def capacity(self) -> "std::vector< double >::size_type":
-        """capacity(StdVectorDouble self) -> std::vector< double >::size_type"""
+        r"""capacity(StdVectorDouble self) -> std::vector< double >::size_type"""
         return _math_poly.StdVectorDouble_capacity(self)
 
-
     def __getstate__(self):
     # Return a nonempty (thus non-false) tuple with dummy value in first position
         return (-1, tuple(pickle.dumps(elem) for elem in self))
@@ -1407,16 +1146,15 @@ class StdVectorDouble(_object):
 
 
     def __getitem__(self, *args) -> "double":
-        """
+        r"""
         __getitem__(StdVectorDouble self, PySliceObject * slice) -> std_vector_double
         __getitem__(StdVectorDouble self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const
         __getitem__(StdVectorDouble self, long i) -> double
         """
         return _math_poly.StdVectorDouble___getitem__(self, *args)
 
-
     def __setitem__(self, *args) -> "void":
-        """
+        r"""
         __setitem__(StdVectorDouble self, PySliceObject * slice, std_vector_double v)
         __setitem__(StdVectorDouble self, PySliceObject * slice)
         __setitem__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
@@ -1424,16 +1162,13 @@ class StdVectorDouble(_object):
         """
         return _math_poly.StdVectorDouble___setitem__(self, *args)
 
-
     def __str__(self) -> "std::string":
-        """__str__(StdVectorDouble self) -> std::string"""
+        r"""__str__(StdVectorDouble self) -> std::string"""
         return _math_poly.StdVectorDouble___str__(self)
-
     __swig_destroy__ = _math_poly.delete_StdVectorDouble
-    __del__ = lambda self: None
-StdVectorDouble_swigregister = _math_poly.StdVectorDouble_swigregister
-StdVectorDouble_swigregister(StdVectorDouble)
 
-# This file is compatible with both classic and new-style classes.
+# Register StdVectorDouble in _math_poly:
+_math_poly.StdVectorDouble_swigregister(StdVectorDouble)
+
 
 
diff --git a/externals/coda-oss/modules/python/mem/source/generated/mem.py b/externals/coda-oss/modules/python/mem/source/generated/mem.py
index f23d8a5c..8dcfa539 100644
--- a/externals/coda-oss/modules/python/mem/source/generated/mem.py
+++ b/externals/coda-oss/modules/python/mem/source/generated/mem.py
@@ -1,100 +1,65 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_mem')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_mem')
-    _mem = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_mem', [dirname(__file__)])
-        except ImportError:
-            import _mem
-            return _mem
-        try:
-            _mod = imp.load_module('_mem', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _mem = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _mem
 else:
     import _mem
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
+
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
-
-# This file is compatible with both classic and new-style classes.
 
 
diff --git a/externals/coda-oss/modules/python/mt/source/generated/mt.py b/externals/coda-oss/modules/python/mt/source/generated/mt.py
index 5c45624e..f0aa9d37 100644
--- a/externals/coda-oss/modules/python/mt/source/generated/mt.py
+++ b/externals/coda-oss/modules/python/mt/source/generated/mt.py
@@ -1,218 +1,154 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_mt')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_mt')
-    _mt = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_mt', [dirname(__file__)])
-        except ImportError:
-            import _mt
-            return _mt
-        try:
-            _mod = imp.load_module('_mt', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _mt = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _mt
 else:
     import _mt
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
 
 import coda.coda_except
 import coda.coda_sys
-class Runnable(_object):
-    """Proxy of C++ sys::Runnable class."""
+class Runnable(object):
+    r"""Proxy of C++ sys::Runnable class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Runnable, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Runnable, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _mt.delete_Runnable
-    __del__ = lambda self: None
 
     def run(self) -> "void":
-        """run(Runnable self)"""
+        r"""run(Runnable self)"""
         return _mt.Runnable_run(self)
 
-Runnable_swigregister = _mt.Runnable_swigregister
-Runnable_swigregister(Runnable)
+# Register Runnable in _mt:
+_mt.Runnable_swigregister(Runnable)
 
-class ThreadPlanner(_object):
-    """Proxy of C++ mt::ThreadPlanner class."""
+class ThreadPlanner(object):
+    r"""Proxy of C++ mt::ThreadPlanner class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadPlanner, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, ThreadPlanner, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
-    def __init__(self, numElements: 'size_t', numThreads: 'size_t'):
-        """__init__(mt::ThreadPlanner self, size_t numElements, size_t numThreads) -> ThreadPlanner"""
-        this = _mt.new_ThreadPlanner(numElements, numThreads)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+    def __init__(self, numElements: "size_t", numThreads: "size_t"):
+        r"""__init__(ThreadPlanner self, size_t numElements, size_t numThreads) -> ThreadPlanner"""
+        _mt.ThreadPlanner_swiginit(self, _mt.new_ThreadPlanner(numElements, numThreads))
 
     def getNumElementsPerThread(self) -> "size_t":
-        """getNumElementsPerThread(ThreadPlanner self) -> size_t"""
+        r"""getNumElementsPerThread(ThreadPlanner self) -> size_t"""
         return _mt.ThreadPlanner_getNumElementsPerThread(self)
 
-
     def getNumThreadsThatWillBeUsed(self) -> "size_t":
-        """getNumThreadsThatWillBeUsed(ThreadPlanner self) -> size_t"""
+        r"""getNumThreadsThatWillBeUsed(ThreadPlanner self) -> size_t"""
         return _mt.ThreadPlanner_getNumThreadsThatWillBeUsed(self)
 
-
-    def getThreadInfo(self, threadNum: 'size_t') -> "PyObject *":
-        """getThreadInfo(ThreadPlanner self, size_t threadNum) -> PyObject *"""
+    def getThreadInfo(self, threadNum: "size_t") -> "PyObject *":
+        r"""getThreadInfo(ThreadPlanner self, size_t threadNum) -> PyObject *"""
         return _mt.ThreadPlanner_getThreadInfo(self, threadNum)
-
     __swig_destroy__ = _mt.delete_ThreadPlanner
-    __del__ = lambda self: None
-ThreadPlanner_swigregister = _mt.ThreadPlanner_swigregister
-ThreadPlanner_swigregister(ThreadPlanner)
 
-class ThreadGroup(_object):
-    """Proxy of C++ mt::ThreadGroup class."""
+# Register ThreadPlanner in _mt:
+_mt.ThreadPlanner_swigregister(ThreadPlanner)
+
+class ThreadGroup(object):
+    r"""Proxy of C++ mt::ThreadGroup class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadGroup, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, ThreadGroup, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
-        """
-        __init__(mt::ThreadGroup self, bool pinToCPU) -> ThreadGroup
-        __init__(mt::ThreadGroup self) -> ThreadGroup
-        """
-        this = _mt.new_ThreadGroup(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        r"""__init__(ThreadGroup self, bool pinToCPU=getDefaultPinToCPU()) -> ThreadGroup"""
+        _mt.ThreadGroup_swiginit(self, _mt.new_ThreadGroup(*args))
     __swig_destroy__ = _mt.delete_ThreadGroup
-    __del__ = lambda self: None
 
     def joinAll(self) -> "void":
-        """joinAll(ThreadGroup self)"""
+        r"""joinAll(ThreadGroup self)"""
         return _mt.ThreadGroup_joinAll(self)
 
-
     def isPinToCPUEnabled(self) -> "bool":
-        """isPinToCPUEnabled(ThreadGroup self) -> bool"""
+        r"""isPinToCPUEnabled(ThreadGroup self) -> bool"""
         return _mt.ThreadGroup_isPinToCPUEnabled(self)
 
-
+    @staticmethod
     def getDefaultPinToCPU() -> "bool":
-        """getDefaultPinToCPU() -> bool"""
+        r"""getDefaultPinToCPU() -> bool"""
         return _mt.ThreadGroup_getDefaultPinToCPU()
 
-    getDefaultPinToCPU = staticmethod(getDefaultPinToCPU)
-
-    def setDefaultPinToCPU(newDefault: 'bool') -> "void":
-        """setDefaultPinToCPU(bool newDefault)"""
+    @staticmethod
+    def setDefaultPinToCPU(newDefault: "bool") -> "void":
+        r"""setDefaultPinToCPU(bool newDefault)"""
         return _mt.ThreadGroup_setDefaultPinToCPU(newDefault)
 
-    setDefaultPinToCPU = staticmethod(setDefaultPinToCPU)
-
-    def createThread(self, runnable: 'PyObject *') -> "void":
-        """createThread(ThreadGroup self, PyObject * runnable)"""
+    def createThread(self, runnable: "PyObject *") -> "void":
+        r"""createThread(ThreadGroup self, PyObject * runnable)"""
         return _mt.ThreadGroup_createThread(self, runnable)
 
-ThreadGroup_swigregister = _mt.ThreadGroup_swigregister
-ThreadGroup_swigregister(ThreadGroup)
+# Register ThreadGroup in _mt:
+_mt.ThreadGroup_swigregister(ThreadGroup)
 
 def ThreadGroup_getDefaultPinToCPU() -> "bool":
-    """ThreadGroup_getDefaultPinToCPU() -> bool"""
+    r"""ThreadGroup_getDefaultPinToCPU() -> bool"""
     return _mt.ThreadGroup_getDefaultPinToCPU()
 
-def ThreadGroup_setDefaultPinToCPU(newDefault: 'bool') -> "void":
-    """ThreadGroup_setDefaultPinToCPU(bool newDefault)"""
+def ThreadGroup_setDefaultPinToCPU(newDefault: "bool") -> "void":
+    r"""ThreadGroup_setDefaultPinToCPU(bool newDefault)"""
     return _mt.ThreadGroup_setDefaultPinToCPU(newDefault)
 
-# This file is compatible with both classic and new-style classes.
 
 
diff --git a/externals/coda-oss/modules/python/sio.lite/source/generated/sio_lite.py b/externals/coda-oss/modules/python/sio.lite/source/generated/sio_lite.py
index e38acae5..d7ddbd84 100644
--- a/externals/coda-oss/modules/python/sio.lite/source/generated/sio_lite.py
+++ b/externals/coda-oss/modules/python/sio.lite/source/generated/sio_lite.py
@@ -1,323 +1,246 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_sio_lite')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_sio_lite')
-    _sio_lite = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_sio_lite', [dirname(__file__)])
-        except ImportError:
-            import _sio_lite
-            return _sio_lite
-        try:
-            _mod = imp.load_module('_sio_lite', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _sio_lite = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _sio_lite
 else:
     import _sio_lite
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
 
 import coda.coda_sys
 import coda.coda_io
 import coda.coda_except
-class FileHeader(_object):
-    """Proxy of C++ sio::lite::FileHeader class."""
+class FileHeader(object):
+    r"""Proxy of C++ sio::lite::FileHeader class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, FileHeader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, FileHeader, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     UNSIGNED = _sio_lite.FileHeader_UNSIGNED
+    
     SIGNED = _sio_lite.FileHeader_SIGNED
+    
     FLOAT = _sio_lite.FileHeader_FLOAT
+    
     COMPLEX_UNSIGNED = _sio_lite.FileHeader_COMPLEX_UNSIGNED
+    
     COMPLEX_SIGNED = _sio_lite.FileHeader_COMPLEX_SIGNED
+    
     COMPLEX_FLOAT = _sio_lite.FileHeader_COMPLEX_FLOAT
+    
     N_BYTE_UNSIGNED = _sio_lite.FileHeader_N_BYTE_UNSIGNED
+    
     N_BYTE_SIGNED = _sio_lite.FileHeader_N_BYTE_SIGNED
+    
     BASIC_HEADER_LENGTH = _sio_lite.FileHeader_BASIC_HEADER_LENGTH
+    
 
     def __init__(self, *args):
+        r"""
+        __init__(FileHeader self, int numLines, int numElements, int elementSize, int elementType, int ver=1) -> FileHeader
+        __init__(FileHeader self) -> FileHeader
         """
-        __init__(sio::lite::FileHeader self, int numLines, int numElements, int elementSize, int elementType, int ver=1) -> FileHeader
-        __init__(sio::lite::FileHeader self, int numLines, int numElements, int elementSize, int elementType) -> FileHeader
-        __init__(sio::lite::FileHeader self) -> FileHeader
-        """
-        this = _sio_lite.new_FileHeader(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _sio_lite.FileHeader_swiginit(self, _sio_lite.new_FileHeader(*args))
     __swig_destroy__ = _sio_lite.delete_FileHeader
-    __del__ = lambda self: None
 
     def getLength(self) -> "long":
-        """getLength(FileHeader self) -> long"""
+        r"""getLength(FileHeader self) -> long"""
         return _sio_lite.FileHeader_getLength(self)
 
-
     def getNumLines(self) -> "int":
-        """getNumLines(FileHeader self) -> int"""
+        r"""getNumLines(FileHeader self) -> int"""
         return _sio_lite.FileHeader_getNumLines(self)
 
-
-    def setNumLines(self, numLines: 'int') -> "void":
-        """setNumLines(FileHeader self, int numLines)"""
+    def setNumLines(self, numLines: "int") -> "void":
+        r"""setNumLines(FileHeader self, int numLines)"""
         return _sio_lite.FileHeader_setNumLines(self, numLines)
 
-
     def getNumElements(self) -> "int":
-        """getNumElements(FileHeader self) -> int"""
+        r"""getNumElements(FileHeader self) -> int"""
         return _sio_lite.FileHeader_getNumElements(self)
 
-
-    def setNumElements(self, numElements: 'int') -> "void":
-        """setNumElements(FileHeader self, int numElements)"""
+    def setNumElements(self, numElements: "int") -> "void":
+        r"""setNumElements(FileHeader self, int numElements)"""
         return _sio_lite.FileHeader_setNumElements(self, numElements)
 
-
     def getElementSize(self) -> "int":
-        """getElementSize(FileHeader self) -> int"""
+        r"""getElementSize(FileHeader self) -> int"""
         return _sio_lite.FileHeader_getElementSize(self)
 
-
-    def setElementSize(self, size: 'int') -> "void":
-        """setElementSize(FileHeader self, int size)"""
+    def setElementSize(self, size: "int") -> "void":
+        r"""setElementSize(FileHeader self, int size)"""
         return _sio_lite.FileHeader_setElementSize(self, size)
 
-
     def getElementType(self) -> "int":
-        """getElementType(FileHeader self) -> int"""
+        r"""getElementType(FileHeader self) -> int"""
         return _sio_lite.FileHeader_getElementType(self)
 
-
-    def setElementType(self, type: 'int') -> "void":
-        """setElementType(FileHeader self, int type)"""
+    def setElementType(self, type: "int") -> "void":
+        r"""setElementType(FileHeader self, int type)"""
         return _sio_lite.FileHeader_setElementType(self, type)
 
-
     def getElementTypeAsString(self) -> "std::string":
-        """getElementTypeAsString(FileHeader self) -> std::string"""
+        r"""getElementTypeAsString(FileHeader self) -> std::string"""
         return _sio_lite.FileHeader_getElementTypeAsString(self)
 
-
     def getVersion(self) -> "int":
-        """getVersion(FileHeader self) -> int"""
+        r"""getVersion(FileHeader self) -> int"""
         return _sio_lite.FileHeader_getVersion(self)
 
-
-    def setVersion(self, newVersion: 'int') -> "void":
-        """setVersion(FileHeader self, int newVersion)"""
+    def setVersion(self, newVersion: "int") -> "void":
+        r"""setVersion(FileHeader self, int newVersion)"""
         return _sio_lite.FileHeader_setVersion(self, newVersion)
 
-
     def idsAreNullTerminated(self) -> "bool":
-        """idsAreNullTerminated(FileHeader self) -> bool"""
+        r"""idsAreNullTerminated(FileHeader self) -> bool"""
         return _sio_lite.FileHeader_idsAreNullTerminated(self)
 
-
-    def setNullTerminationFlag(self, flag: 'bool') -> "void":
-        """setNullTerminationFlag(FileHeader self, bool flag)"""
+    def setNullTerminationFlag(self, flag: "bool") -> "void":
+        r"""setNullTerminationFlag(FileHeader self, bool flag)"""
         return _sio_lite.FileHeader_setNullTerminationFlag(self, flag)
 
-
     def isDifferentByteOrdering(self) -> "bool":
-        """isDifferentByteOrdering(FileHeader self) -> bool"""
+        r"""isDifferentByteOrdering(FileHeader self) -> bool"""
         return _sio_lite.FileHeader_isDifferentByteOrdering(self)
 
-
-    def setIsDifferentByteOrdering(self, isDifferent: 'bool') -> "void":
-        """setIsDifferentByteOrdering(FileHeader self, bool isDifferent)"""
+    def setIsDifferentByteOrdering(self, isDifferent: "bool") -> "void":
+        r"""setIsDifferentByteOrdering(FileHeader self, bool isDifferent)"""
         return _sio_lite.FileHeader_setIsDifferentByteOrdering(self, isDifferent)
 
-
-    def userDataFieldExists(self, key: 'std::string const &') -> "bool":
-        """userDataFieldExists(FileHeader self, std::string const & key) -> bool"""
+    def userDataFieldExists(self, key: "std::string const &") -> "bool":
+        r"""userDataFieldExists(FileHeader self, std::string const & key) -> bool"""
         return _sio_lite.FileHeader_userDataFieldExists(self, key)
 
-
-    def getAllUserDataFields(self, keys: 'std::vector< std::string > &') -> "void":
-        """getAllUserDataFields(FileHeader self, std::vector< std::string > & keys)"""
+    def getAllUserDataFields(self, keys: "std::vector< std::string > &") -> "void":
+        r"""getAllUserDataFields(FileHeader self, std::vector< std::string > & keys)"""
         return _sio_lite.FileHeader_getAllUserDataFields(self, keys)
 
-
     def getNumUserDataFields(self) -> "size_t":
-        """getNumUserDataFields(FileHeader self) -> size_t"""
+        r"""getNumUserDataFields(FileHeader self) -> size_t"""
         return _sio_lite.FileHeader_getNumUserDataFields(self)
 
-
-    def getUserData(self, key: 'std::string const &') -> "std::vector< sys::byte > &":
-        """getUserData(FileHeader self, std::string const & key) -> std::vector< sys::byte > &"""
+    def getUserData(self, key: "std::string const &") -> "std::vector< sys::byte > &":
+        r"""getUserData(FileHeader self, std::string const & key) -> std::vector< sys::byte > &"""
         return _sio_lite.FileHeader_getUserData(self, key)
 
-
     def getUserDataSection(self, *args) -> "sio::lite::UserDataDictionary &":
-        """
+        r"""
         getUserDataSection(FileHeader self) -> sio::lite::UserDataDictionary const
         getUserDataSection(FileHeader self) -> sio::lite::UserDataDictionary &
         """
         return _sio_lite.FileHeader_getUserDataSection(self, *args)
 
-
     def addUserData(self, *args) -> "void":
-        """
+        r"""
         addUserData(FileHeader self, std::string const & field, std::string const & data)
         addUserData(FileHeader self, std::string const & field, std::vector< sys::byte > const & data)
         addUserData(FileHeader self, std::string const & field, int data)
         """
         return _sio_lite.FileHeader_addUserData(self, *args)
 
-
-    def to(self, numBands: 'size_t', os: 'OutputStream') -> "void":
-        """to(FileHeader self, size_t numBands, OutputStream os)"""
+    def to(self, numBands: "size_t", os: "OutputStream") -> "void":
+        r"""to(FileHeader self, size_t numBands, OutputStream os)"""
         return _sio_lite.FileHeader_to(self, numBands, os)
 
-FileHeader_swigregister = _sio_lite.FileHeader_swigregister
-FileHeader_swigregister(FileHeader)
+# Register FileHeader in _sio_lite:
+_sio_lite.FileHeader_swigregister(FileHeader)
 
 class StreamReader(coda.coda_io.InputStream):
-    """Proxy of C++ sio::lite::StreamReader class."""
-
-    __swig_setmethods__ = {}
-    for _s in [coda.coda_io.InputStream]:
-        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
-    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamReader, name, value)
-    __swig_getmethods__ = {}
-    for _s in [coda.coda_io.InputStream]:
-        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
-    __getattr__ = lambda self, name: _swig_getattr(self, StreamReader, name)
+    r"""Proxy of C++ sio::lite::StreamReader class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _sio_lite.delete_StreamReader
-    __del__ = lambda self: None
 
     def __init__(self, *args):
+        r"""
+        __init__(StreamReader self) -> StreamReader
+        __init__(StreamReader self, InputStream _is, bool adopt=False) -> StreamReader
         """
-        __init__(sio::lite::StreamReader self) -> StreamReader
-        __init__(sio::lite::StreamReader self, InputStream arg2, bool adopt=False) -> StreamReader
-        __init__(sio::lite::StreamReader self, InputStream arg2) -> StreamReader
-        """
-        this = _sio_lite.new_StreamReader(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def setInputStream(self, arg2: 'InputStream', adopt: 'bool'=False) -> "void":
-        """
-        setInputStream(StreamReader self, InputStream arg2, bool adopt=False)
-        setInputStream(StreamReader self, InputStream arg2)
-        """
-        return _sio_lite.StreamReader_setInputStream(self, arg2, adopt)
+        _sio_lite.StreamReader_swiginit(self, _sio_lite.new_StreamReader(*args))
 
+    def setInputStream(self, _is: "InputStream", adopt: "bool"=False) -> "void":
+        r"""setInputStream(StreamReader self, InputStream _is, bool adopt=False)"""
+        return _sio_lite.StreamReader_setInputStream(self, _is, adopt)
 
     def getInputStream(self) -> "io::InputStream *":
-        """getInputStream(StreamReader self) -> InputStream"""
+        r"""getInputStream(StreamReader self) -> InputStream"""
         return _sio_lite.StreamReader_getInputStream(self)
 
-
     def getHeader(self, *args) -> "sio::lite::FileHeader const *":
-        """
+        r"""
         getHeader(StreamReader self) -> FileHeader
         getHeader(StreamReader self) -> FileHeader
         """
         return _sio_lite.StreamReader_getHeader(self, *args)
 
-
     def readHeader(self) -> "sio::lite::FileHeader *":
-        """readHeader(StreamReader self) -> FileHeader"""
+        r"""readHeader(StreamReader self) -> FileHeader"""
         return _sio_lite.StreamReader_readHeader(self)
 
-
     def available(self) -> "sys::Off_T":
-        """available(StreamReader self) -> sys::Off_T"""
+        r"""available(StreamReader self) -> sys::Off_T"""
         return _sio_lite.StreamReader_available(self)
 
-
-    def read(self, data: 'long long', size: 'long long') -> "sys::SSize_T":
-        """read(StreamReader self, long long data, long long size) -> sys::SSize_T"""
+    def read(self, data: "long long", size: "long long") -> "sys::SSize_T":
+        r"""read(StreamReader self, long long data, long long size) -> sys::SSize_T"""
         return _sio_lite.StreamReader_read(self, data, size)
 
-StreamReader_swigregister = _sio_lite.StreamReader_swigregister
-StreamReader_swigregister(StreamReader)
+# Register StreamReader in _sio_lite:
+_sio_lite.StreamReader_swigregister(StreamReader)
 
 
 import numpy
@@ -399,6 +322,5 @@ def read(inputPathname):
     reader.read(pointer, numpyArray.shape[0] * numpyArray.shape[1] * elementSize)
     return numpyArray;
 
-# This file is compatible with both classic and new-style classes.
 
 
diff --git a/externals/coda-oss/modules/python/sys/source/generated/coda_sys.py b/externals/coda-oss/modules/python/sys/source/generated/coda_sys.py
index 6dec7854..402808c1 100644
--- a/externals/coda-oss/modules/python/sys/source/generated/coda_sys.py
+++ b/externals/coda-oss/modules/python/sys/source/generated/coda_sys.py
@@ -1,171 +1,133 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_coda_sys')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_coda_sys')
-    _coda_sys = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_coda_sys', [dirname(__file__)])
-        except ImportError:
-            import _coda_sys
-            return _coda_sys
-        try:
-            _mod = imp.load_module('_coda_sys', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _coda_sys = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _coda_sys
 else:
     import _coda_sys
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
+
+CODA_OSS_POSIX_SOURCE = _coda_sys.CODA_OSS_POSIX_SOURCE
+
+CODA_OSS_POSIX2001_SOURCE = _coda_sys.CODA_OSS_POSIX2001_SOURCE
+
+CODA_OSS_POSIX2008_SOURCE = _coda_sys.CODA_OSS_POSIX2008_SOURCE
 
 NativeLayer_func__ = _coda_sys.NativeLayer_func__
+
 SYS_FUNC = _coda_sys.SYS_FUNC
 
+
 def isBigEndianSystem() -> "bool":
-    """isBigEndianSystem() -> bool"""
+    r"""isBigEndianSystem() -> bool"""
     return _coda_sys.isBigEndianSystem()
 
 def byteSwap(*args) -> "void":
-    """
+    r"""
     byteSwap(void * buffer, unsigned short elemSize, size_t numElems)
     byteSwap(void const * buffer, unsigned short elemSize, size_t numElems, void * outputBuffer)
     """
     return _coda_sys.byteSwap(*args)
 
 def alignedAlloc(*args) -> "void *":
-    """
-    alignedAlloc(size_t size, size_t alignment)
-    alignedAlloc(size_t size) -> void *
-    """
+    r"""alignedAlloc(size_t size, size_t alignment=SSE_INSTRUCTION_ALIGNMENT)"""
     return _coda_sys.alignedAlloc(*args)
 
-def alignedFree(p: 'void *') -> "void":
-    """alignedFree(void * p)"""
+def alignedFree(p: "void *") -> "void":
+    r"""alignedFree(void * p)"""
     return _coda_sys.alignedFree(p)
-class UTCDateTime(_object):
-    """Proxy of C++ sys::UTCDateTime class."""
+class UTCDateTime(object):
+    r"""Proxy of C++ sys::UTCDateTime class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, UTCDateTime, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, UTCDateTime, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def __init__(self, *args):
+        r"""
+        __init__(UTCDateTime self) -> UTCDateTime
+        __init__(UTCDateTime self, int hour, int minute, double second) -> UTCDateTime
+        __init__(UTCDateTime self, int year, int month, int day) -> UTCDateTime
+        __init__(UTCDateTime self, int year, int month, int day, int hour, int minute, double second) -> UTCDateTime
+        __init__(UTCDateTime self, double timeInMillis) -> UTCDateTime
+        __init__(UTCDateTime self, std::string const & time) -> UTCDateTime
+        __init__(UTCDateTime self, std::string const & time, std::string const & format) -> UTCDateTime
         """
-        __init__(sys::UTCDateTime self) -> UTCDateTime
-        __init__(sys::UTCDateTime self, int hour, int minute, double second) -> UTCDateTime
-        __init__(sys::UTCDateTime self, int year, int month, int day) -> UTCDateTime
-        __init__(sys::UTCDateTime self, int year, int month, int day, int hour, int minute, double second) -> UTCDateTime
-        __init__(sys::UTCDateTime self, double timeInMillis) -> UTCDateTime
-        __init__(sys::UTCDateTime self, std::string const & time) -> UTCDateTime
-        __init__(sys::UTCDateTime self, std::string const & time, std::string const & format) -> UTCDateTime
-        """
-        this = _coda_sys.new_UTCDateTime(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _coda_sys.UTCDateTime_swiginit(self, _coda_sys.new_UTCDateTime(*args))
 
     def format(self, *args) -> "std::string":
-        """
+        r"""
         format(UTCDateTime self)
         format(UTCDateTime self) -> std::string
         """
         return _coda_sys.UTCDateTime_format(self, *args)
-
     __swig_destroy__ = _coda_sys.delete_UTCDateTime
-    __del__ = lambda self: None
-UTCDateTime_swigregister = _coda_sys.UTCDateTime_swigregister
-UTCDateTime_swigregister(UTCDateTime)
+
+# Register UTCDateTime in _coda_sys:
+_coda_sys.UTCDateTime_swigregister(UTCDateTime)
 cvar = _coda_sys.cvar
 SSE_INSTRUCTION_ALIGNMENT = cvar.SSE_INSTRUCTION_ALIGNMENT
 
 
-def __lshift__(os: 'std::ostream &', dateTime: 'UTCDateTime') -> "std::ostream &":
-    """__lshift__(std::ostream & os, UTCDateTime dateTime) -> std::ostream &"""
+def __lshift__(os: "std::ostream &", dateTime: "UTCDateTime") -> "std::ostream &":
+    r"""__lshift__(std::ostream & os, UTCDateTime dateTime) -> std::ostream &"""
     return _coda_sys.__lshift__(os, dateTime)
 
-def __rshift__(arg1: 'std::istream &', dateTime: 'UTCDateTime') -> "std::istream &":
-    """__rshift__(std::istream & arg1, UTCDateTime dateTime) -> std::istream &"""
-    return _coda_sys.__rshift__(arg1, dateTime)
-# This file is compatible with both classic and new-style classes.
+def __rshift__(_is: "std::istream &", dateTime: "UTCDateTime") -> "std::istream &":
+    r"""__rshift__(std::istream & _is, UTCDateTime dateTime) -> std::istream &"""
+    return _coda_sys.__rshift__(_is, dateTime)
 
 
diff --git a/externals/coda-oss/modules/python/types/source/generated/coda_types.py b/externals/coda-oss/modules/python/types/source/generated/coda_types.py
index 3f5d6852..55025577 100644
--- a/externals/coda-oss/modules/python/types/source/generated/coda_types.py
+++ b/externals/coda-oss/modules/python/types/source/generated/coda_types.py
@@ -1,270 +1,192 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_coda_types')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_coda_types')
-    _coda_types = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_coda_types', [dirname(__file__)])
-        except ImportError:
-            import _coda_types
-            return _coda_types
-        try:
-            _mod = imp.load_module('_coda_types', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _coda_types = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _coda_types
 else:
     import _coda_types
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
 
-class SwigPyIterator(_object):
-    """Proxy of C++ swig::SwigPyIterator class."""
+class SwigPyIterator(object):
+    r"""Proxy of C++ swig::SwigPyIterator class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined - class is abstract")
     __repr__ = _swig_repr
     __swig_destroy__ = _coda_types.delete_SwigPyIterator
-    __del__ = lambda self: None
 
     def value(self) -> "PyObject *":
-        """value(SwigPyIterator self) -> PyObject *"""
+        r"""value(SwigPyIterator self) -> PyObject *"""
         return _coda_types.SwigPyIterator_value(self)
 
-
-    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
-        """
-        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
-        incr(SwigPyIterator self) -> SwigPyIterator
-        """
+    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
+        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
         return _coda_types.SwigPyIterator_incr(self, n)
 
-
-    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
-        """
-        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
-        decr(SwigPyIterator self) -> SwigPyIterator
-        """
+    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
+        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
         return _coda_types.SwigPyIterator_decr(self, n)
 
-
-    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
-        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
+    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
+        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
         return _coda_types.SwigPyIterator_distance(self, x)
 
-
-    def equal(self, x: 'SwigPyIterator') -> "bool":
-        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
+    def equal(self, x: "SwigPyIterator") -> "bool":
+        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
         return _coda_types.SwigPyIterator_equal(self, x)
 
-
     def copy(self) -> "swig::SwigPyIterator *":
-        """copy(SwigPyIterator self) -> SwigPyIterator"""
+        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
         return _coda_types.SwigPyIterator_copy(self)
 
-
     def next(self) -> "PyObject *":
-        """next(SwigPyIterator self) -> PyObject *"""
+        r"""next(SwigPyIterator self) -> PyObject *"""
         return _coda_types.SwigPyIterator_next(self)
 
-
     def __next__(self) -> "PyObject *":
-        """__next__(SwigPyIterator self) -> PyObject *"""
+        r"""__next__(SwigPyIterator self) -> PyObject *"""
         return _coda_types.SwigPyIterator___next__(self)
 
-
     def previous(self) -> "PyObject *":
-        """previous(SwigPyIterator self) -> PyObject *"""
+        r"""previous(SwigPyIterator self) -> PyObject *"""
         return _coda_types.SwigPyIterator_previous(self)
 
-
-    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
-        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
+    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
+        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
         return _coda_types.SwigPyIterator_advance(self, n)
 
-
-    def __eq__(self, x: 'SwigPyIterator') -> "bool":
-        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
+    def __eq__(self, x: "SwigPyIterator") -> "bool":
+        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
         return _coda_types.SwigPyIterator___eq__(self, x)
 
-
-    def __ne__(self, x: 'SwigPyIterator') -> "bool":
-        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
+    def __ne__(self, x: "SwigPyIterator") -> "bool":
+        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
         return _coda_types.SwigPyIterator___ne__(self, x)
 
-
-    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
-        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
+    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
+        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
         return _coda_types.SwigPyIterator___iadd__(self, n)
 
-
-    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
-        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
+    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
+        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
         return _coda_types.SwigPyIterator___isub__(self, n)
 
-
-    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
-        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
+    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
+        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
         return _coda_types.SwigPyIterator___add__(self, n)
 
-
     def __sub__(self, *args) -> "ptrdiff_t":
-        """
+        r"""
         __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
         __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
         """
         return _coda_types.SwigPyIterator___sub__(self, *args)
-
     def __iter__(self):
         return self
-SwigPyIterator_swigregister = _coda_types.SwigPyIterator_swigregister
-SwigPyIterator_swigregister(SwigPyIterator)
+
+# Register SwigPyIterator in _coda_types:
+_coda_types.SwigPyIterator_swigregister(SwigPyIterator)
 
 import coda.coda_sys
 
 from . import pickle
 
-class RowColDouble(_object):
-    """Proxy of C++ types::RowCol<(double)> class."""
+class RowColDouble(object):
+    r"""Proxy of C++ types::RowCol< double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, RowColDouble, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, RowColDouble, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["row"] = _coda_types.RowColDouble_row_set
-    __swig_getmethods__["row"] = _coda_types.RowColDouble_row_get
-    if _newclass:
-        row = _swig_property(_coda_types.RowColDouble_row_get, _coda_types.RowColDouble_row_set)
-    __swig_setmethods__["col"] = _coda_types.RowColDouble_col_set
-    __swig_getmethods__["col"] = _coda_types.RowColDouble_col_get
-    if _newclass:
-        col = _swig_property(_coda_types.RowColDouble_col_get, _coda_types.RowColDouble_col_set)
+    row = property(_coda_types.RowColDouble_row_get, _coda_types.RowColDouble_row_set, doc=r"""row : double""")
+    col = property(_coda_types.RowColDouble_col_get, _coda_types.RowColDouble_col_set, doc=r"""col : double""")
 
     def __init__(self, *args):
+        r"""
+        __init__(RowColDouble self) -> RowColDouble
+        __init__(RowColDouble self, double r, double c) -> RowColDouble
+        __init__(RowColDouble self, std::pair< double,double > const & p) -> RowColDouble
         """
-        __init__(types::RowCol<(double)> self) -> RowColDouble
-        __init__(types::RowCol<(double)> self, double r, double c) -> RowColDouble
-        __init__(types::RowCol<(double)> self, std::pair< double,double > const & p) -> RowColDouble
-        """
-        this = _coda_types.new_RowColDouble(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def __iadd__(self, scalar: 'double') -> "types::RowCol< double > &":
-        """__iadd__(RowColDouble self, double scalar) -> RowColDouble"""
-        return _coda_types.RowColDouble___iadd__(self, scalar)
+        _coda_types.RowColDouble_swiginit(self, _coda_types.new_RowColDouble(*args))
 
+    def __iadd__(self, scalar: "double") -> "types::RowCol< double > &":
+        r"""__iadd__(RowColDouble self, double scalar) -> RowColDouble"""
+        return _coda_types.RowColDouble___iadd__(self, scalar)
 
-    def __add__(self, scalar: 'double') -> "types::RowCol< double >":
-        """__add__(RowColDouble self, double scalar) -> RowColDouble"""
+    def __add__(self, scalar: "double") -> "types::RowCol< double >":
+        r"""__add__(RowColDouble self, double scalar) -> RowColDouble"""
         return _coda_types.RowColDouble___add__(self, scalar)
 
-
-    def __isub__(self, scalar: 'double') -> "types::RowCol< double > &":
-        """__isub__(RowColDouble self, double scalar) -> RowColDouble"""
+    def __isub__(self, scalar: "double") -> "types::RowCol< double > &":
+        r"""__isub__(RowColDouble self, double scalar) -> RowColDouble"""
         return _coda_types.RowColDouble___isub__(self, scalar)
 
-
-    def __sub__(self, scalar: 'double') -> "types::RowCol< double >":
-        """__sub__(RowColDouble self, double scalar) -> RowColDouble"""
+    def __sub__(self, scalar: "double") -> "types::RowCol< double >":
+        r"""__sub__(RowColDouble self, double scalar) -> RowColDouble"""
         return _coda_types.RowColDouble___sub__(self, scalar)
 
-
-    def __imul__(self, scalar: 'double') -> "types::RowCol< double > &":
-        """__imul__(RowColDouble self, double scalar) -> RowColDouble"""
+    def __imul__(self, scalar: "double") -> "types::RowCol< double > &":
+        r"""__imul__(RowColDouble self, double scalar) -> RowColDouble"""
         return _coda_types.RowColDouble___imul__(self, scalar)
 
-
-    def __mul__(self, scalar: 'double') -> "types::RowCol< double >":
-        """__mul__(RowColDouble self, double scalar) -> RowColDouble"""
+    def __mul__(self, scalar: "double") -> "types::RowCol< double >":
+        r"""__mul__(RowColDouble self, double scalar) -> RowColDouble"""
         return _coda_types.RowColDouble___mul__(self, scalar)
 
-
     def __itruediv__(self, *args):
         return _coda_types.RowColDouble___itruediv__(self, *args)
     __idiv__ = __itruediv__
@@ -277,26 +199,22 @@ class RowColDouble(_object):
 
 
 
-    def __eq__(self, p: 'RowColDouble') -> "bool":
-        """__eq__(RowColDouble self, RowColDouble p) -> bool"""
+    def __eq__(self, p: "RowColDouble") -> "bool":
+        r"""__eq__(RowColDouble self, RowColDouble p) -> bool"""
         return _coda_types.RowColDouble___eq__(self, p)
 
-
-    def __ne__(self, p: 'RowColDouble') -> "bool":
-        """__ne__(RowColDouble self, RowColDouble p) -> bool"""
+    def __ne__(self, p: "RowColDouble") -> "bool":
+        r"""__ne__(RowColDouble self, RowColDouble p) -> bool"""
         return _coda_types.RowColDouble___ne__(self, p)
 
-
     def area(self) -> "double":
-        """area(RowColDouble self) -> double"""
+        r"""area(RowColDouble self) -> double"""
         return _coda_types.RowColDouble_area(self)
 
-
     def normL2(self) -> "double":
-        """normL2(RowColDouble self) -> double"""
+        r"""normL2(RowColDouble self) -> double"""
         return _coda_types.RowColDouble_normL2(self)
 
-
     def __getstate__(self):
         return (self.row, self.col)
 
@@ -304,69 +222,50 @@ class RowColDouble(_object):
         self.__init__(state[0], state[1])
 
     __swig_destroy__ = _coda_types.delete_RowColDouble
-    __del__ = lambda self: None
-RowColDouble_swigregister = _coda_types.RowColDouble_swigregister
-RowColDouble_swigregister(RowColDouble)
 
-class RowColInt(_object):
-    """Proxy of C++ types::RowCol<(sys::SSize_T)> class."""
+# Register RowColDouble in _coda_types:
+_coda_types.RowColDouble_swigregister(RowColDouble)
+
+class RowColInt(object):
+    r"""Proxy of C++ types::RowCol< sys::SSize_T > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, RowColInt, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, RowColInt, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["row"] = _coda_types.RowColInt_row_set
-    __swig_getmethods__["row"] = _coda_types.RowColInt_row_get
-    if _newclass:
-        row = _swig_property(_coda_types.RowColInt_row_get, _coda_types.RowColInt_row_set)
-    __swig_setmethods__["col"] = _coda_types.RowColInt_col_set
-    __swig_getmethods__["col"] = _coda_types.RowColInt_col_get
-    if _newclass:
-        col = _swig_property(_coda_types.RowColInt_col_get, _coda_types.RowColInt_col_set)
+    row = property(_coda_types.RowColInt_row_get, _coda_types.RowColInt_row_set, doc=r"""row : ssize_t""")
+    col = property(_coda_types.RowColInt_col_get, _coda_types.RowColInt_col_set, doc=r"""col : ssize_t""")
 
     def __init__(self, *args):
+        r"""
+        __init__(RowColInt self) -> RowColInt
+        __init__(RowColInt self, ssize_t r, ssize_t c) -> RowColInt
+        __init__(RowColInt self, std::pair< ssize_t,ssize_t > const & p) -> RowColInt
         """
-        __init__(types::RowCol<(sys::SSize_T)> self) -> RowColInt
-        __init__(types::RowCol<(sys::SSize_T)> self, ssize_t r, ssize_t c) -> RowColInt
-        __init__(types::RowCol<(sys::SSize_T)> self, std::pair< ssize_t,ssize_t > const & p) -> RowColInt
-        """
-        this = _coda_types.new_RowColInt(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def __iadd__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T > &":
-        """__iadd__(RowColInt self, ssize_t scalar) -> RowColInt"""
-        return _coda_types.RowColInt___iadd__(self, scalar)
+        _coda_types.RowColInt_swiginit(self, _coda_types.new_RowColInt(*args))
 
+    def __iadd__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T > &":
+        r"""__iadd__(RowColInt self, ssize_t scalar) -> RowColInt"""
+        return _coda_types.RowColInt___iadd__(self, scalar)
 
-    def __add__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T >":
-        """__add__(RowColInt self, ssize_t scalar) -> RowColInt"""
+    def __add__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T >":
+        r"""__add__(RowColInt self, ssize_t scalar) -> RowColInt"""
         return _coda_types.RowColInt___add__(self, scalar)
 
-
-    def __isub__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T > &":
-        """__isub__(RowColInt self, ssize_t scalar) -> RowColInt"""
+    def __isub__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T > &":
+        r"""__isub__(RowColInt self, ssize_t scalar) -> RowColInt"""
         return _coda_types.RowColInt___isub__(self, scalar)
 
-
-    def __sub__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T >":
-        """__sub__(RowColInt self, ssize_t scalar) -> RowColInt"""
+    def __sub__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T >":
+        r"""__sub__(RowColInt self, ssize_t scalar) -> RowColInt"""
         return _coda_types.RowColInt___sub__(self, scalar)
 
-
-    def __imul__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T > &":
-        """__imul__(RowColInt self, ssize_t scalar) -> RowColInt"""
+    def __imul__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T > &":
+        r"""__imul__(RowColInt self, ssize_t scalar) -> RowColInt"""
         return _coda_types.RowColInt___imul__(self, scalar)
 
-
-    def __mul__(self, scalar: 'ssize_t') -> "types::RowCol< sys::SSize_T >":
-        """__mul__(RowColInt self, ssize_t scalar) -> RowColInt"""
+    def __mul__(self, scalar: "ssize_t") -> "types::RowCol< sys::SSize_T >":
+        r"""__mul__(RowColInt self, ssize_t scalar) -> RowColInt"""
         return _coda_types.RowColInt___mul__(self, scalar)
 
-
     def __itruediv__(self, *args):
         return _coda_types.RowColInt___itruediv__(self, *args)
     __idiv__ = __itruediv__
@@ -379,26 +278,22 @@ class RowColInt(_object):
 
 
 
-    def __eq__(self, p: 'RowColInt') -> "bool":
-        """__eq__(RowColInt self, RowColInt p) -> bool"""
+    def __eq__(self, p: "RowColInt") -> "bool":
+        r"""__eq__(RowColInt self, RowColInt p) -> bool"""
         return _coda_types.RowColInt___eq__(self, p)
 
-
-    def __ne__(self, p: 'RowColInt') -> "bool":
-        """__ne__(RowColInt self, RowColInt p) -> bool"""
+    def __ne__(self, p: "RowColInt") -> "bool":
+        r"""__ne__(RowColInt self, RowColInt p) -> bool"""
         return _coda_types.RowColInt___ne__(self, p)
 
-
     def area(self) -> "ssize_t":
-        """area(RowColInt self) -> ssize_t"""
+        r"""area(RowColInt self) -> ssize_t"""
         return _coda_types.RowColInt_area(self)
 
-
     def normL2(self) -> "ssize_t":
-        """normL2(RowColInt self) -> ssize_t"""
+        r"""normL2(RowColInt self) -> ssize_t"""
         return _coda_types.RowColInt_normL2(self)
 
-
     def __getstate__(self):
         return (self.row, self.col)
 
@@ -406,69 +301,50 @@ class RowColInt(_object):
         self.__init__(state[0], state[1])
 
     __swig_destroy__ = _coda_types.delete_RowColInt
-    __del__ = lambda self: None
-RowColInt_swigregister = _coda_types.RowColInt_swigregister
-RowColInt_swigregister(RowColInt)
 
-class RowColSizeT(_object):
-    """Proxy of C++ types::RowCol<(size_t)> class."""
+# Register RowColInt in _coda_types:
+_coda_types.RowColInt_swigregister(RowColInt)
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, RowColSizeT, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, RowColSizeT, name)
+class RowColSizeT(object):
+    r"""Proxy of C++ types::RowCol< size_t > class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["row"] = _coda_types.RowColSizeT_row_set
-    __swig_getmethods__["row"] = _coda_types.RowColSizeT_row_get
-    if _newclass:
-        row = _swig_property(_coda_types.RowColSizeT_row_get, _coda_types.RowColSizeT_row_set)
-    __swig_setmethods__["col"] = _coda_types.RowColSizeT_col_set
-    __swig_getmethods__["col"] = _coda_types.RowColSizeT_col_get
-    if _newclass:
-        col = _swig_property(_coda_types.RowColSizeT_col_get, _coda_types.RowColSizeT_col_set)
+    row = property(_coda_types.RowColSizeT_row_get, _coda_types.RowColSizeT_row_set, doc=r"""row : size_t""")
+    col = property(_coda_types.RowColSizeT_col_get, _coda_types.RowColSizeT_col_set, doc=r"""col : size_t""")
 
     def __init__(self, *args):
+        r"""
+        __init__(RowColSizeT self) -> RowColSizeT
+        __init__(RowColSizeT self, size_t r, size_t c) -> RowColSizeT
+        __init__(RowColSizeT self, std::pair< size_t,size_t > const & p) -> RowColSizeT
         """
-        __init__(types::RowCol<(size_t)> self) -> RowColSizeT
-        __init__(types::RowCol<(size_t)> self, size_t r, size_t c) -> RowColSizeT
-        __init__(types::RowCol<(size_t)> self, std::pair< size_t,size_t > const & p) -> RowColSizeT
-        """
-        this = _coda_types.new_RowColSizeT(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def __iadd__(self, scalar: 'size_t') -> "types::RowCol< size_t > &":
-        """__iadd__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
-        return _coda_types.RowColSizeT___iadd__(self, scalar)
+        _coda_types.RowColSizeT_swiginit(self, _coda_types.new_RowColSizeT(*args))
 
+    def __iadd__(self, scalar: "size_t") -> "types::RowCol< size_t > &":
+        r"""__iadd__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
+        return _coda_types.RowColSizeT___iadd__(self, scalar)
 
-    def __add__(self, scalar: 'size_t') -> "types::RowCol< size_t >":
-        """__add__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
+    def __add__(self, scalar: "size_t") -> "types::RowCol< size_t >":
+        r"""__add__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
         return _coda_types.RowColSizeT___add__(self, scalar)
 
-
-    def __isub__(self, scalar: 'size_t') -> "types::RowCol< size_t > &":
-        """__isub__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
+    def __isub__(self, scalar: "size_t") -> "types::RowCol< size_t > &":
+        r"""__isub__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
         return _coda_types.RowColSizeT___isub__(self, scalar)
 
-
-    def __sub__(self, scalar: 'size_t') -> "types::RowCol< size_t >":
-        """__sub__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
+    def __sub__(self, scalar: "size_t") -> "types::RowCol< size_t >":
+        r"""__sub__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
         return _coda_types.RowColSizeT___sub__(self, scalar)
 
-
-    def __imul__(self, scalar: 'size_t') -> "types::RowCol< size_t > &":
-        """__imul__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
+    def __imul__(self, scalar: "size_t") -> "types::RowCol< size_t > &":
+        r"""__imul__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
         return _coda_types.RowColSizeT___imul__(self, scalar)
 
-
-    def __mul__(self, scalar: 'size_t') -> "types::RowCol< size_t >":
-        """__mul__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
+    def __mul__(self, scalar: "size_t") -> "types::RowCol< size_t >":
+        r"""__mul__(RowColSizeT self, size_t scalar) -> RowColSizeT"""
         return _coda_types.RowColSizeT___mul__(self, scalar)
 
-
     def __itruediv__(self, *args):
         return _coda_types.RowColSizeT___itruediv__(self, *args)
     __idiv__ = __itruediv__
@@ -481,26 +357,22 @@ class RowColSizeT(_object):
 
 
 
-    def __eq__(self, p: 'RowColSizeT') -> "bool":
-        """__eq__(RowColSizeT self, RowColSizeT p) -> bool"""
+    def __eq__(self, p: "RowColSizeT") -> "bool":
+        r"""__eq__(RowColSizeT self, RowColSizeT p) -> bool"""
         return _coda_types.RowColSizeT___eq__(self, p)
 
-
-    def __ne__(self, p: 'RowColSizeT') -> "bool":
-        """__ne__(RowColSizeT self, RowColSizeT p) -> bool"""
+    def __ne__(self, p: "RowColSizeT") -> "bool":
+        r"""__ne__(RowColSizeT self, RowColSizeT p) -> bool"""
         return _coda_types.RowColSizeT___ne__(self, p)
 
-
     def area(self) -> "size_t":
-        """area(RowColSizeT self) -> size_t"""
+        r"""area(RowColSizeT self) -> size_t"""
         return _coda_types.RowColSizeT_area(self)
 
-
     def normL2(self) -> "size_t":
-        """normL2(RowColSizeT self) -> size_t"""
+        r"""normL2(RowColSizeT self) -> size_t"""
         return _coda_types.RowColSizeT_normL2(self)
 
-
     def __getstate__(self):
         return (self.row, self.col)
 
@@ -508,69 +380,50 @@ class RowColSizeT(_object):
         self.__init__(state[0], state[1])
 
     __swig_destroy__ = _coda_types.delete_RowColSizeT
-    __del__ = lambda self: None
-RowColSizeT_swigregister = _coda_types.RowColSizeT_swigregister
-RowColSizeT_swigregister(RowColSizeT)
 
-class RgAzDouble(_object):
-    """Proxy of C++ types::RgAz<(double)> class."""
+# Register RowColSizeT in _coda_types:
+_coda_types.RowColSizeT_swigregister(RowColSizeT)
+
+class RgAzDouble(object):
+    r"""Proxy of C++ types::RgAz< double > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, RgAzDouble, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, RgAzDouble, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["rg"] = _coda_types.RgAzDouble_rg_set
-    __swig_getmethods__["rg"] = _coda_types.RgAzDouble_rg_get
-    if _newclass:
-        rg = _swig_property(_coda_types.RgAzDouble_rg_get, _coda_types.RgAzDouble_rg_set)
-    __swig_setmethods__["az"] = _coda_types.RgAzDouble_az_set
-    __swig_getmethods__["az"] = _coda_types.RgAzDouble_az_get
-    if _newclass:
-        az = _swig_property(_coda_types.RgAzDouble_az_get, _coda_types.RgAzDouble_az_set)
+    rg = property(_coda_types.RgAzDouble_rg_get, _coda_types.RgAzDouble_rg_set, doc=r"""rg : double""")
+    az = property(_coda_types.RgAzDouble_az_get, _coda_types.RgAzDouble_az_set, doc=r"""az : double""")
 
     def __init__(self, *args):
+        r"""
+        __init__(RgAzDouble self) -> RgAzDouble
+        __init__(RgAzDouble self, double r, double c) -> RgAzDouble
+        __init__(RgAzDouble self, std::pair< double,double > const & p) -> RgAzDouble
         """
-        __init__(types::RgAz<(double)> self) -> RgAzDouble
-        __init__(types::RgAz<(double)> self, double r, double c) -> RgAzDouble
-        __init__(types::RgAz<(double)> self, std::pair< double,double > const & p) -> RgAzDouble
-        """
-        this = _coda_types.new_RgAzDouble(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def __iadd__(self, scalar: 'double') -> "types::RgAz< double > &":
-        """__iadd__(RgAzDouble self, double scalar) -> RgAzDouble"""
-        return _coda_types.RgAzDouble___iadd__(self, scalar)
+        _coda_types.RgAzDouble_swiginit(self, _coda_types.new_RgAzDouble(*args))
 
+    def __iadd__(self, scalar: "double") -> "types::RgAz< double > &":
+        r"""__iadd__(RgAzDouble self, double scalar) -> RgAzDouble"""
+        return _coda_types.RgAzDouble___iadd__(self, scalar)
 
-    def __add__(self, scalar: 'double') -> "types::RgAz< double >":
-        """__add__(RgAzDouble self, double scalar) -> RgAzDouble"""
+    def __add__(self, scalar: "double") -> "types::RgAz< double >":
+        r"""__add__(RgAzDouble self, double scalar) -> RgAzDouble"""
         return _coda_types.RgAzDouble___add__(self, scalar)
 
-
-    def __isub__(self, scalar: 'double') -> "types::RgAz< double > &":
-        """__isub__(RgAzDouble self, double scalar) -> RgAzDouble"""
+    def __isub__(self, scalar: "double") -> "types::RgAz< double > &":
+        r"""__isub__(RgAzDouble self, double scalar) -> RgAzDouble"""
         return _coda_types.RgAzDouble___isub__(self, scalar)
 
-
-    def __sub__(self, scalar: 'double') -> "types::RgAz< double >":
-        """__sub__(RgAzDouble self, double scalar) -> RgAzDouble"""
+    def __sub__(self, scalar: "double") -> "types::RgAz< double >":
+        r"""__sub__(RgAzDouble self, double scalar) -> RgAzDouble"""
         return _coda_types.RgAzDouble___sub__(self, scalar)
 
-
-    def __imul__(self, scalar: 'double') -> "types::RgAz< double > &":
-        """__imul__(RgAzDouble self, double scalar) -> RgAzDouble"""
+    def __imul__(self, scalar: "double") -> "types::RgAz< double > &":
+        r"""__imul__(RgAzDouble self, double scalar) -> RgAzDouble"""
         return _coda_types.RgAzDouble___imul__(self, scalar)
 
-
-    def __mul__(self, scalar: 'double') -> "types::RgAz< double >":
-        """__mul__(RgAzDouble self, double scalar) -> RgAzDouble"""
+    def __mul__(self, scalar: "double") -> "types::RgAz< double >":
+        r"""__mul__(RgAzDouble self, double scalar) -> RgAzDouble"""
         return _coda_types.RgAzDouble___mul__(self, scalar)
 
-
     def __itruediv__(self, *args):
         return _coda_types.RgAzDouble___itruediv__(self, *args)
     __idiv__ = __itruediv__
@@ -583,16 +436,14 @@ class RgAzDouble(_object):
 
 
 
-    def __eq__(self, p: 'RgAzDouble') -> "bool":
-        """__eq__(RgAzDouble self, RgAzDouble p) -> bool"""
+    def __eq__(self, p: "RgAzDouble") -> "bool":
+        r"""__eq__(RgAzDouble self, RgAzDouble p) -> bool"""
         return _coda_types.RgAzDouble___eq__(self, p)
 
-
-    def __ne__(self, p: 'RgAzDouble') -> "bool":
-        """__ne__(RgAzDouble self, RgAzDouble p) -> bool"""
+    def __ne__(self, p: "RgAzDouble") -> "bool":
+        r"""__ne__(RgAzDouble self, RgAzDouble p) -> bool"""
         return _coda_types.RgAzDouble___ne__(self, p)
 
-
     def __getstate__(self):
         return (self.rg, self.az)
 
@@ -600,211 +451,173 @@ class RgAzDouble(_object):
         self.__init__(state[0], state[1])
 
     __swig_destroy__ = _coda_types.delete_RgAzDouble
-    __del__ = lambda self: None
-RgAzDouble_swigregister = _coda_types.RgAzDouble_swigregister
-RgAzDouble_swigregister(RgAzDouble)
 
-class VectorRowColInt(_object):
-    """Proxy of C++ std::vector<(types::RowCol<(sys::SSize_T)>)> class."""
+# Register RgAzDouble in _coda_types:
+_coda_types.RgAzDouble_swigregister(RgAzDouble)
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRowColInt, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, VectorRowColInt, name)
+class VectorRowColInt(object):
+    r"""Proxy of C++ std::vector< types::RowCol< sys::SSize_T > > class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def iterator(self) -> "swig::SwigPyIterator *":
-        """iterator(VectorRowColInt self) -> SwigPyIterator"""
+        r"""iterator(VectorRowColInt self) -> SwigPyIterator"""
         return _coda_types.VectorRowColInt_iterator(self)
-
     def __iter__(self):
         return self.iterator()
 
     def __nonzero__(self) -> "bool":
-        """__nonzero__(VectorRowColInt self) -> bool"""
+        r"""__nonzero__(VectorRowColInt self) -> bool"""
         return _coda_types.VectorRowColInt___nonzero__(self)
 
-
     def __bool__(self) -> "bool":
-        """__bool__(VectorRowColInt self) -> bool"""
+        r"""__bool__(VectorRowColInt self) -> bool"""
         return _coda_types.VectorRowColInt___bool__(self)
 
-
     def __len__(self) -> "std::vector< types::RowCol< ssize_t > >::size_type":
-        """__len__(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
+        r"""__len__(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
         return _coda_types.VectorRowColInt___len__(self)
 
-
-    def __getslice__(self, i: 'std::vector< types::RowCol< ssize_t > >::difference_type', j: 'std::vector< types::RowCol< ssize_t > >::difference_type') -> "std::vector< types::RowCol< sys::SSize_T >,std::allocator< types::RowCol< sys::SSize_T > > > *":
-        """__getslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j) -> VectorRowColInt"""
+    def __getslice__(self, i: "std::vector< types::RowCol< ssize_t > >::difference_type", j: "std::vector< types::RowCol< ssize_t > >::difference_type") -> "std::vector< types::RowCol< sys::SSize_T >,std::allocator< types::RowCol< sys::SSize_T > > > *":
+        r"""__getslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j) -> VectorRowColInt"""
         return _coda_types.VectorRowColInt___getslice__(self, i, j)
 
-
     def __setslice__(self, *args) -> "void":
-        """
+        r"""
         __setslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j)
         __setslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j, VectorRowColInt v)
         """
         return _coda_types.VectorRowColInt___setslice__(self, *args)
 
-
-    def __delslice__(self, i: 'std::vector< types::RowCol< ssize_t > >::difference_type', j: 'std::vector< types::RowCol< ssize_t > >::difference_type') -> "void":
-        """__delslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j)"""
+    def __delslice__(self, i: "std::vector< types::RowCol< ssize_t > >::difference_type", j: "std::vector< types::RowCol< ssize_t > >::difference_type") -> "void":
+        r"""__delslice__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, std::vector< types::RowCol< ssize_t > >::difference_type j)"""
         return _coda_types.VectorRowColInt___delslice__(self, i, j)
 
-
     def __delitem__(self, *args) -> "void":
-        """
+        r"""
         __delitem__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i)
         __delitem__(VectorRowColInt self, PySliceObject * slice)
         """
         return _coda_types.VectorRowColInt___delitem__(self, *args)
 
-
     def __getitem__(self, *args) -> "std::vector< types::RowCol< ssize_t > >::value_type const &":
-        """
+        r"""
         __getitem__(VectorRowColInt self, PySliceObject * slice) -> VectorRowColInt
         __getitem__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i) -> RowColInt
         """
         return _coda_types.VectorRowColInt___getitem__(self, *args)
 
-
     def __setitem__(self, *args) -> "void":
-        """
+        r"""
         __setitem__(VectorRowColInt self, PySliceObject * slice, VectorRowColInt v)
         __setitem__(VectorRowColInt self, PySliceObject * slice)
         __setitem__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::difference_type i, RowColInt x)
         """
         return _coda_types.VectorRowColInt___setitem__(self, *args)
 
-
     def pop(self) -> "std::vector< types::RowCol< ssize_t > >::value_type":
-        """pop(VectorRowColInt self) -> RowColInt"""
+        r"""pop(VectorRowColInt self) -> RowColInt"""
         return _coda_types.VectorRowColInt_pop(self)
 
-
-    def append(self, x: 'RowColInt') -> "void":
-        """append(VectorRowColInt self, RowColInt x)"""
+    def append(self, x: "RowColInt") -> "void":
+        r"""append(VectorRowColInt self, RowColInt x)"""
         return _coda_types.VectorRowColInt_append(self, x)
 
-
     def empty(self) -> "bool":
-        """empty(VectorRowColInt self) -> bool"""
+        r"""empty(VectorRowColInt self) -> bool"""
         return _coda_types.VectorRowColInt_empty(self)
 
-
     def size(self) -> "std::vector< types::RowCol< ssize_t > >::size_type":
-        """size(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
+        r"""size(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
         return _coda_types.VectorRowColInt_size(self)
 
-
-    def swap(self, v: 'VectorRowColInt') -> "void":
-        """swap(VectorRowColInt self, VectorRowColInt v)"""
+    def swap(self, v: "VectorRowColInt") -> "void":
+        r"""swap(VectorRowColInt self, VectorRowColInt v)"""
         return _coda_types.VectorRowColInt_swap(self, v)
 
-
     def begin(self) -> "std::vector< types::RowCol< ssize_t > >::iterator":
-        """begin(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::iterator"""
+        r"""begin(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::iterator"""
         return _coda_types.VectorRowColInt_begin(self)
 
-
     def end(self) -> "std::vector< types::RowCol< ssize_t > >::iterator":
-        """end(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::iterator"""
+        r"""end(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::iterator"""
         return _coda_types.VectorRowColInt_end(self)
 
-
     def rbegin(self) -> "std::vector< types::RowCol< ssize_t > >::reverse_iterator":
-        """rbegin(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::reverse_iterator"""
+        r"""rbegin(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::reverse_iterator"""
         return _coda_types.VectorRowColInt_rbegin(self)
 
-
     def rend(self) -> "std::vector< types::RowCol< ssize_t > >::reverse_iterator":
-        """rend(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::reverse_iterator"""
+        r"""rend(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::reverse_iterator"""
         return _coda_types.VectorRowColInt_rend(self)
 
-
     def clear(self) -> "void":
-        """clear(VectorRowColInt self)"""
+        r"""clear(VectorRowColInt self)"""
         return _coda_types.VectorRowColInt_clear(self)
 
-
     def get_allocator(self) -> "std::vector< types::RowCol< ssize_t > >::allocator_type":
-        """get_allocator(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::allocator_type"""
+        r"""get_allocator(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::allocator_type"""
         return _coda_types.VectorRowColInt_get_allocator(self)
 
-
     def pop_back(self) -> "void":
-        """pop_back(VectorRowColInt self)"""
+        r"""pop_back(VectorRowColInt self)"""
         return _coda_types.VectorRowColInt_pop_back(self)
 
-
     def erase(self, *args) -> "std::vector< types::RowCol< ssize_t > >::iterator":
-        """
+        r"""
         erase(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator pos) -> std::vector< types::RowCol< ssize_t > >::iterator
         erase(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator first, std::vector< types::RowCol< ssize_t > >::iterator last) -> std::vector< types::RowCol< ssize_t > >::iterator
         """
         return _coda_types.VectorRowColInt_erase(self, *args)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(VectorRowColInt self) -> VectorRowColInt
+        __init__(VectorRowColInt self, VectorRowColInt other) -> VectorRowColInt
+        __init__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type size) -> VectorRowColInt
+        __init__(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type size, RowColInt value) -> VectorRowColInt
         """
-        __init__(std::vector<(types::RowCol<(sys::SSize_T)>)> self) -> VectorRowColInt
-        __init__(std::vector<(types::RowCol<(sys::SSize_T)>)> self, VectorRowColInt arg2) -> VectorRowColInt
-        __init__(std::vector<(types::RowCol<(sys::SSize_T)>)> self, std::vector< types::RowCol< ssize_t > >::size_type size) -> VectorRowColInt
-        __init__(std::vector<(types::RowCol<(sys::SSize_T)>)> self, std::vector< types::RowCol< ssize_t > >::size_type size, RowColInt value) -> VectorRowColInt
-        """
-        this = _coda_types.new_VectorRowColInt(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def push_back(self, x: 'RowColInt') -> "void":
-        """push_back(VectorRowColInt self, RowColInt x)"""
-        return _coda_types.VectorRowColInt_push_back(self, x)
+        _coda_types.VectorRowColInt_swiginit(self, _coda_types.new_VectorRowColInt(*args))
 
+    def push_back(self, x: "RowColInt") -> "void":
+        r"""push_back(VectorRowColInt self, RowColInt x)"""
+        return _coda_types.VectorRowColInt_push_back(self, x)
 
     def front(self) -> "std::vector< types::RowCol< ssize_t > >::value_type const &":
-        """front(VectorRowColInt self) -> RowColInt"""
+        r"""front(VectorRowColInt self) -> RowColInt"""
         return _coda_types.VectorRowColInt_front(self)
 
-
     def back(self) -> "std::vector< types::RowCol< ssize_t > >::value_type const &":
-        """back(VectorRowColInt self) -> RowColInt"""
+        r"""back(VectorRowColInt self) -> RowColInt"""
         return _coda_types.VectorRowColInt_back(self)
 
-
-    def assign(self, n: 'std::vector< types::RowCol< ssize_t > >::size_type', x: 'RowColInt') -> "void":
-        """assign(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type n, RowColInt x)"""
+    def assign(self, n: "std::vector< types::RowCol< ssize_t > >::size_type", x: "RowColInt") -> "void":
+        r"""assign(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type n, RowColInt x)"""
         return _coda_types.VectorRowColInt_assign(self, n, x)
 
-
     def resize(self, *args) -> "void":
-        """
+        r"""
         resize(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type new_size)
         resize(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type new_size, RowColInt x)
         """
         return _coda_types.VectorRowColInt_resize(self, *args)
 
-
     def insert(self, *args) -> "void":
-        """
+        r"""
         insert(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator pos, RowColInt x) -> std::vector< types::RowCol< ssize_t > >::iterator
         insert(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::iterator pos, std::vector< types::RowCol< ssize_t > >::size_type n, RowColInt x)
         """
         return _coda_types.VectorRowColInt_insert(self, *args)
 
-
-    def reserve(self, n: 'std::vector< types::RowCol< ssize_t > >::size_type') -> "void":
-        """reserve(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type n)"""
+    def reserve(self, n: "std::vector< types::RowCol< ssize_t > >::size_type") -> "void":
+        r"""reserve(VectorRowColInt self, std::vector< types::RowCol< ssize_t > >::size_type n)"""
         return _coda_types.VectorRowColInt_reserve(self, n)
 
-
     def capacity(self) -> "std::vector< types::RowCol< ssize_t > >::size_type":
-        """capacity(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
+        r"""capacity(VectorRowColInt self) -> std::vector< types::RowCol< ssize_t > >::size_type"""
         return _coda_types.VectorRowColInt_capacity(self)
 
-
     def __getstate__(self):
     # Return a nonempty (thus non-false) tuple with dummy value in first position
         return (-1, tuple(pickle.dumps(elem) for elem in self))
@@ -816,211 +629,173 @@ class VectorRowColInt(_object):
             self.push_back(pickle.loads(elem))
 
     __swig_destroy__ = _coda_types.delete_VectorRowColInt
-    __del__ = lambda self: None
-VectorRowColInt_swigregister = _coda_types.VectorRowColInt_swigregister
-VectorRowColInt_swigregister(VectorRowColInt)
 
-class VectorRowColDouble(_object):
-    """Proxy of C++ std::vector<(types::RowCol<(double)>)> class."""
+# Register VectorRowColInt in _coda_types:
+_coda_types.VectorRowColInt_swigregister(VectorRowColInt)
+
+class VectorRowColDouble(object):
+    r"""Proxy of C++ std::vector< types::RowCol< double > > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRowColDouble, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, VectorRowColDouble, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def iterator(self) -> "swig::SwigPyIterator *":
-        """iterator(VectorRowColDouble self) -> SwigPyIterator"""
+        r"""iterator(VectorRowColDouble self) -> SwigPyIterator"""
         return _coda_types.VectorRowColDouble_iterator(self)
-
     def __iter__(self):
         return self.iterator()
 
     def __nonzero__(self) -> "bool":
-        """__nonzero__(VectorRowColDouble self) -> bool"""
+        r"""__nonzero__(VectorRowColDouble self) -> bool"""
         return _coda_types.VectorRowColDouble___nonzero__(self)
 
-
     def __bool__(self) -> "bool":
-        """__bool__(VectorRowColDouble self) -> bool"""
+        r"""__bool__(VectorRowColDouble self) -> bool"""
         return _coda_types.VectorRowColDouble___bool__(self)
 
-
     def __len__(self) -> "std::vector< types::RowCol< double > >::size_type":
-        """__len__(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
+        r"""__len__(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
         return _coda_types.VectorRowColDouble___len__(self)
 
-
-    def __getslice__(self, i: 'std::vector< types::RowCol< double > >::difference_type', j: 'std::vector< types::RowCol< double > >::difference_type') -> "std::vector< types::RowCol< double >,std::allocator< types::RowCol< double > > > *":
-        """__getslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j) -> VectorRowColDouble"""
+    def __getslice__(self, i: "std::vector< types::RowCol< double > >::difference_type", j: "std::vector< types::RowCol< double > >::difference_type") -> "std::vector< types::RowCol< double >,std::allocator< types::RowCol< double > > > *":
+        r"""__getslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j) -> VectorRowColDouble"""
         return _coda_types.VectorRowColDouble___getslice__(self, i, j)
 
-
     def __setslice__(self, *args) -> "void":
-        """
+        r"""
         __setslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j)
         __setslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j, VectorRowColDouble v)
         """
         return _coda_types.VectorRowColDouble___setslice__(self, *args)
 
-
-    def __delslice__(self, i: 'std::vector< types::RowCol< double > >::difference_type', j: 'std::vector< types::RowCol< double > >::difference_type') -> "void":
-        """__delslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j)"""
+    def __delslice__(self, i: "std::vector< types::RowCol< double > >::difference_type", j: "std::vector< types::RowCol< double > >::difference_type") -> "void":
+        r"""__delslice__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, std::vector< types::RowCol< double > >::difference_type j)"""
         return _coda_types.VectorRowColDouble___delslice__(self, i, j)
 
-
     def __delitem__(self, *args) -> "void":
-        """
+        r"""
         __delitem__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i)
         __delitem__(VectorRowColDouble self, PySliceObject * slice)
         """
         return _coda_types.VectorRowColDouble___delitem__(self, *args)
 
-
     def __getitem__(self, *args) -> "std::vector< types::RowCol< double > >::value_type const &":
-        """
+        r"""
         __getitem__(VectorRowColDouble self, PySliceObject * slice) -> VectorRowColDouble
         __getitem__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i) -> RowColDouble
         """
         return _coda_types.VectorRowColDouble___getitem__(self, *args)
 
-
     def __setitem__(self, *args) -> "void":
-        """
+        r"""
         __setitem__(VectorRowColDouble self, PySliceObject * slice, VectorRowColDouble v)
         __setitem__(VectorRowColDouble self, PySliceObject * slice)
         __setitem__(VectorRowColDouble self, std::vector< types::RowCol< double > >::difference_type i, RowColDouble x)
         """
         return _coda_types.VectorRowColDouble___setitem__(self, *args)
 
-
     def pop(self) -> "std::vector< types::RowCol< double > >::value_type":
-        """pop(VectorRowColDouble self) -> RowColDouble"""
+        r"""pop(VectorRowColDouble self) -> RowColDouble"""
         return _coda_types.VectorRowColDouble_pop(self)
 
-
-    def append(self, x: 'RowColDouble') -> "void":
-        """append(VectorRowColDouble self, RowColDouble x)"""
+    def append(self, x: "RowColDouble") -> "void":
+        r"""append(VectorRowColDouble self, RowColDouble x)"""
         return _coda_types.VectorRowColDouble_append(self, x)
 
-
     def empty(self) -> "bool":
-        """empty(VectorRowColDouble self) -> bool"""
+        r"""empty(VectorRowColDouble self) -> bool"""
         return _coda_types.VectorRowColDouble_empty(self)
 
-
     def size(self) -> "std::vector< types::RowCol< double > >::size_type":
-        """size(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
+        r"""size(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
         return _coda_types.VectorRowColDouble_size(self)
 
-
-    def swap(self, v: 'VectorRowColDouble') -> "void":
-        """swap(VectorRowColDouble self, VectorRowColDouble v)"""
+    def swap(self, v: "VectorRowColDouble") -> "void":
+        r"""swap(VectorRowColDouble self, VectorRowColDouble v)"""
         return _coda_types.VectorRowColDouble_swap(self, v)
 
-
     def begin(self) -> "std::vector< types::RowCol< double > >::iterator":
-        """begin(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::iterator"""
+        r"""begin(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::iterator"""
         return _coda_types.VectorRowColDouble_begin(self)
 
-
     def end(self) -> "std::vector< types::RowCol< double > >::iterator":
-        """end(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::iterator"""
+        r"""end(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::iterator"""
         return _coda_types.VectorRowColDouble_end(self)
 
-
     def rbegin(self) -> "std::vector< types::RowCol< double > >::reverse_iterator":
-        """rbegin(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::reverse_iterator"""
+        r"""rbegin(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::reverse_iterator"""
         return _coda_types.VectorRowColDouble_rbegin(self)
 
-
     def rend(self) -> "std::vector< types::RowCol< double > >::reverse_iterator":
-        """rend(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::reverse_iterator"""
+        r"""rend(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::reverse_iterator"""
         return _coda_types.VectorRowColDouble_rend(self)
 
-
     def clear(self) -> "void":
-        """clear(VectorRowColDouble self)"""
+        r"""clear(VectorRowColDouble self)"""
         return _coda_types.VectorRowColDouble_clear(self)
 
-
     def get_allocator(self) -> "std::vector< types::RowCol< double > >::allocator_type":
-        """get_allocator(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::allocator_type"""
+        r"""get_allocator(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::allocator_type"""
         return _coda_types.VectorRowColDouble_get_allocator(self)
 
-
     def pop_back(self) -> "void":
-        """pop_back(VectorRowColDouble self)"""
+        r"""pop_back(VectorRowColDouble self)"""
         return _coda_types.VectorRowColDouble_pop_back(self)
 
-
     def erase(self, *args) -> "std::vector< types::RowCol< double > >::iterator":
-        """
+        r"""
         erase(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator pos) -> std::vector< types::RowCol< double > >::iterator
         erase(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator first, std::vector< types::RowCol< double > >::iterator last) -> std::vector< types::RowCol< double > >::iterator
         """
         return _coda_types.VectorRowColDouble_erase(self, *args)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(VectorRowColDouble self) -> VectorRowColDouble
+        __init__(VectorRowColDouble self, VectorRowColDouble other) -> VectorRowColDouble
+        __init__(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type size) -> VectorRowColDouble
+        __init__(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type size, RowColDouble value) -> VectorRowColDouble
         """
-        __init__(std::vector<(types::RowCol<(double)>)> self) -> VectorRowColDouble
-        __init__(std::vector<(types::RowCol<(double)>)> self, VectorRowColDouble arg2) -> VectorRowColDouble
-        __init__(std::vector<(types::RowCol<(double)>)> self, std::vector< types::RowCol< double > >::size_type size) -> VectorRowColDouble
-        __init__(std::vector<(types::RowCol<(double)>)> self, std::vector< types::RowCol< double > >::size_type size, RowColDouble value) -> VectorRowColDouble
-        """
-        this = _coda_types.new_VectorRowColDouble(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def push_back(self, x: 'RowColDouble') -> "void":
-        """push_back(VectorRowColDouble self, RowColDouble x)"""
-        return _coda_types.VectorRowColDouble_push_back(self, x)
+        _coda_types.VectorRowColDouble_swiginit(self, _coda_types.new_VectorRowColDouble(*args))
 
+    def push_back(self, x: "RowColDouble") -> "void":
+        r"""push_back(VectorRowColDouble self, RowColDouble x)"""
+        return _coda_types.VectorRowColDouble_push_back(self, x)
 
     def front(self) -> "std::vector< types::RowCol< double > >::value_type const &":
-        """front(VectorRowColDouble self) -> RowColDouble"""
+        r"""front(VectorRowColDouble self) -> RowColDouble"""
         return _coda_types.VectorRowColDouble_front(self)
 
-
     def back(self) -> "std::vector< types::RowCol< double > >::value_type const &":
-        """back(VectorRowColDouble self) -> RowColDouble"""
+        r"""back(VectorRowColDouble self) -> RowColDouble"""
         return _coda_types.VectorRowColDouble_back(self)
 
-
-    def assign(self, n: 'std::vector< types::RowCol< double > >::size_type', x: 'RowColDouble') -> "void":
-        """assign(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type n, RowColDouble x)"""
+    def assign(self, n: "std::vector< types::RowCol< double > >::size_type", x: "RowColDouble") -> "void":
+        r"""assign(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type n, RowColDouble x)"""
         return _coda_types.VectorRowColDouble_assign(self, n, x)
 
-
     def resize(self, *args) -> "void":
-        """
+        r"""
         resize(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type new_size)
         resize(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type new_size, RowColDouble x)
         """
         return _coda_types.VectorRowColDouble_resize(self, *args)
 
-
     def insert(self, *args) -> "void":
-        """
+        r"""
         insert(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator pos, RowColDouble x) -> std::vector< types::RowCol< double > >::iterator
         insert(VectorRowColDouble self, std::vector< types::RowCol< double > >::iterator pos, std::vector< types::RowCol< double > >::size_type n, RowColDouble x)
         """
         return _coda_types.VectorRowColDouble_insert(self, *args)
 
-
-    def reserve(self, n: 'std::vector< types::RowCol< double > >::size_type') -> "void":
-        """reserve(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type n)"""
+    def reserve(self, n: "std::vector< types::RowCol< double > >::size_type") -> "void":
+        r"""reserve(VectorRowColDouble self, std::vector< types::RowCol< double > >::size_type n)"""
         return _coda_types.VectorRowColDouble_reserve(self, n)
 
-
     def capacity(self) -> "std::vector< types::RowCol< double > >::size_type":
-        """capacity(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
+        r"""capacity(VectorRowColDouble self) -> std::vector< types::RowCol< double > >::size_type"""
         return _coda_types.VectorRowColDouble_capacity(self)
 
-
     def __getstate__(self):
     # Return a nonempty (thus non-false) tuple with dummy value in first position
         return (-1, tuple(pickle.dumps(elem) for elem in self))
@@ -1032,211 +807,173 @@ class VectorRowColDouble(_object):
             self.push_back(pickle.loads(elem))
 
     __swig_destroy__ = _coda_types.delete_VectorRowColDouble
-    __del__ = lambda self: None
-VectorRowColDouble_swigregister = _coda_types.VectorRowColDouble_swigregister
-VectorRowColDouble_swigregister(VectorRowColDouble)
 
-class VectorSizeT(_object):
-    """Proxy of C++ std::vector<(size_t)> class."""
+# Register VectorRowColDouble in _coda_types:
+_coda_types.VectorRowColDouble_swigregister(VectorRowColDouble)
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorSizeT, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, VectorSizeT, name)
+class VectorSizeT(object):
+    r"""Proxy of C++ std::vector< size_t > class."""
+
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def iterator(self) -> "swig::SwigPyIterator *":
-        """iterator(VectorSizeT self) -> SwigPyIterator"""
+        r"""iterator(VectorSizeT self) -> SwigPyIterator"""
         return _coda_types.VectorSizeT_iterator(self)
-
     def __iter__(self):
         return self.iterator()
 
     def __nonzero__(self) -> "bool":
-        """__nonzero__(VectorSizeT self) -> bool"""
+        r"""__nonzero__(VectorSizeT self) -> bool"""
         return _coda_types.VectorSizeT___nonzero__(self)
 
-
     def __bool__(self) -> "bool":
-        """__bool__(VectorSizeT self) -> bool"""
+        r"""__bool__(VectorSizeT self) -> bool"""
         return _coda_types.VectorSizeT___bool__(self)
 
-
     def __len__(self) -> "std::vector< size_t >::size_type":
-        """__len__(VectorSizeT self) -> std::vector< size_t >::size_type"""
+        r"""__len__(VectorSizeT self) -> std::vector< size_t >::size_type"""
         return _coda_types.VectorSizeT___len__(self)
 
-
-    def __getslice__(self, i: 'std::vector< size_t >::difference_type', j: 'std::vector< size_t >::difference_type') -> "std::vector< size_t,std::allocator< size_t > > *":
-        """__getslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j) -> VectorSizeT"""
+    def __getslice__(self, i: "std::vector< size_t >::difference_type", j: "std::vector< size_t >::difference_type") -> "std::vector< size_t,std::allocator< size_t > > *":
+        r"""__getslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j) -> VectorSizeT"""
         return _coda_types.VectorSizeT___getslice__(self, i, j)
 
-
     def __setslice__(self, *args) -> "void":
-        """
+        r"""
         __setslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)
         __setslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j, VectorSizeT v)
         """
         return _coda_types.VectorSizeT___setslice__(self, *args)
 
-
-    def __delslice__(self, i: 'std::vector< size_t >::difference_type', j: 'std::vector< size_t >::difference_type') -> "void":
-        """__delslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)"""
+    def __delslice__(self, i: "std::vector< size_t >::difference_type", j: "std::vector< size_t >::difference_type") -> "void":
+        r"""__delslice__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)"""
         return _coda_types.VectorSizeT___delslice__(self, i, j)
 
-
     def __delitem__(self, *args) -> "void":
-        """
+        r"""
         __delitem__(VectorSizeT self, std::vector< size_t >::difference_type i)
         __delitem__(VectorSizeT self, PySliceObject * slice)
         """
         return _coda_types.VectorSizeT___delitem__(self, *args)
 
-
     def __getitem__(self, *args) -> "std::vector< size_t >::value_type const &":
-        """
+        r"""
         __getitem__(VectorSizeT self, PySliceObject * slice) -> VectorSizeT
         __getitem__(VectorSizeT self, std::vector< size_t >::difference_type i) -> std::vector< size_t >::value_type const &
         """
         return _coda_types.VectorSizeT___getitem__(self, *args)
 
-
     def __setitem__(self, *args) -> "void":
-        """
+        r"""
         __setitem__(VectorSizeT self, PySliceObject * slice, VectorSizeT v)
         __setitem__(VectorSizeT self, PySliceObject * slice)
         __setitem__(VectorSizeT self, std::vector< size_t >::difference_type i, std::vector< size_t >::value_type const & x)
         """
         return _coda_types.VectorSizeT___setitem__(self, *args)
 
-
     def pop(self) -> "std::vector< size_t >::value_type":
-        """pop(VectorSizeT self) -> std::vector< size_t >::value_type"""
+        r"""pop(VectorSizeT self) -> std::vector< size_t >::value_type"""
         return _coda_types.VectorSizeT_pop(self)
 
-
-    def append(self, x: 'std::vector< size_t >::value_type const &') -> "void":
-        """append(VectorSizeT self, std::vector< size_t >::value_type const & x)"""
+    def append(self, x: "std::vector< size_t >::value_type const &") -> "void":
+        r"""append(VectorSizeT self, std::vector< size_t >::value_type const & x)"""
         return _coda_types.VectorSizeT_append(self, x)
 
-
     def empty(self) -> "bool":
-        """empty(VectorSizeT self) -> bool"""
+        r"""empty(VectorSizeT self) -> bool"""
         return _coda_types.VectorSizeT_empty(self)
 
-
     def size(self) -> "std::vector< size_t >::size_type":
-        """size(VectorSizeT self) -> std::vector< size_t >::size_type"""
+        r"""size(VectorSizeT self) -> std::vector< size_t >::size_type"""
         return _coda_types.VectorSizeT_size(self)
 
-
-    def swap(self, v: 'VectorSizeT') -> "void":
-        """swap(VectorSizeT self, VectorSizeT v)"""
+    def swap(self, v: "VectorSizeT") -> "void":
+        r"""swap(VectorSizeT self, VectorSizeT v)"""
         return _coda_types.VectorSizeT_swap(self, v)
 
-
     def begin(self) -> "std::vector< size_t >::iterator":
-        """begin(VectorSizeT self) -> std::vector< size_t >::iterator"""
+        r"""begin(VectorSizeT self) -> std::vector< size_t >::iterator"""
         return _coda_types.VectorSizeT_begin(self)
 
-
     def end(self) -> "std::vector< size_t >::iterator":
-        """end(VectorSizeT self) -> std::vector< size_t >::iterator"""
+        r"""end(VectorSizeT self) -> std::vector< size_t >::iterator"""
         return _coda_types.VectorSizeT_end(self)
 
-
     def rbegin(self) -> "std::vector< size_t >::reverse_iterator":
-        """rbegin(VectorSizeT self) -> std::vector< size_t >::reverse_iterator"""
+        r"""rbegin(VectorSizeT self) -> std::vector< size_t >::reverse_iterator"""
         return _coda_types.VectorSizeT_rbegin(self)
 
-
     def rend(self) -> "std::vector< size_t >::reverse_iterator":
-        """rend(VectorSizeT self) -> std::vector< size_t >::reverse_iterator"""
+        r"""rend(VectorSizeT self) -> std::vector< size_t >::reverse_iterator"""
         return _coda_types.VectorSizeT_rend(self)
 
-
     def clear(self) -> "void":
-        """clear(VectorSizeT self)"""
+        r"""clear(VectorSizeT self)"""
         return _coda_types.VectorSizeT_clear(self)
 
-
     def get_allocator(self) -> "std::vector< size_t >::allocator_type":
-        """get_allocator(VectorSizeT self) -> std::vector< size_t >::allocator_type"""
+        r"""get_allocator(VectorSizeT self) -> std::vector< size_t >::allocator_type"""
         return _coda_types.VectorSizeT_get_allocator(self)
 
-
     def pop_back(self) -> "void":
-        """pop_back(VectorSizeT self)"""
+        r"""pop_back(VectorSizeT self)"""
         return _coda_types.VectorSizeT_pop_back(self)
 
-
     def erase(self, *args) -> "std::vector< size_t >::iterator":
-        """
+        r"""
         erase(VectorSizeT self, std::vector< size_t >::iterator pos) -> std::vector< size_t >::iterator
         erase(VectorSizeT self, std::vector< size_t >::iterator first, std::vector< size_t >::iterator last) -> std::vector< size_t >::iterator
         """
         return _coda_types.VectorSizeT_erase(self, *args)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(VectorSizeT self) -> VectorSizeT
+        __init__(VectorSizeT self, VectorSizeT other) -> VectorSizeT
+        __init__(VectorSizeT self, std::vector< size_t >::size_type size) -> VectorSizeT
+        __init__(VectorSizeT self, std::vector< size_t >::size_type size, std::vector< size_t >::value_type const & value) -> VectorSizeT
         """
-        __init__(std::vector<(size_t)> self) -> VectorSizeT
-        __init__(std::vector<(size_t)> self, VectorSizeT arg2) -> VectorSizeT
-        __init__(std::vector<(size_t)> self, std::vector< size_t >::size_type size) -> VectorSizeT
-        __init__(std::vector<(size_t)> self, std::vector< size_t >::size_type size, std::vector< size_t >::value_type const & value) -> VectorSizeT
-        """
-        this = _coda_types.new_VectorSizeT(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def push_back(self, x: 'std::vector< size_t >::value_type const &') -> "void":
-        """push_back(VectorSizeT self, std::vector< size_t >::value_type const & x)"""
-        return _coda_types.VectorSizeT_push_back(self, x)
+        _coda_types.VectorSizeT_swiginit(self, _coda_types.new_VectorSizeT(*args))
 
+    def push_back(self, x: "std::vector< size_t >::value_type const &") -> "void":
+        r"""push_back(VectorSizeT self, std::vector< size_t >::value_type const & x)"""
+        return _coda_types.VectorSizeT_push_back(self, x)
 
     def front(self) -> "std::vector< size_t >::value_type const &":
-        """front(VectorSizeT self) -> std::vector< size_t >::value_type const &"""
+        r"""front(VectorSizeT self) -> std::vector< size_t >::value_type const &"""
         return _coda_types.VectorSizeT_front(self)
 
-
     def back(self) -> "std::vector< size_t >::value_type const &":
-        """back(VectorSizeT self) -> std::vector< size_t >::value_type const &"""
+        r"""back(VectorSizeT self) -> std::vector< size_t >::value_type const &"""
         return _coda_types.VectorSizeT_back(self)
 
-
-    def assign(self, n: 'std::vector< size_t >::size_type', x: 'std::vector< size_t >::value_type const &') -> "void":
-        """assign(VectorSizeT self, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)"""
+    def assign(self, n: "std::vector< size_t >::size_type", x: "std::vector< size_t >::value_type const &") -> "void":
+        r"""assign(VectorSizeT self, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)"""
         return _coda_types.VectorSizeT_assign(self, n, x)
 
-
     def resize(self, *args) -> "void":
-        """
+        r"""
         resize(VectorSizeT self, std::vector< size_t >::size_type new_size)
         resize(VectorSizeT self, std::vector< size_t >::size_type new_size, std::vector< size_t >::value_type const & x)
         """
         return _coda_types.VectorSizeT_resize(self, *args)
 
-
     def insert(self, *args) -> "void":
-        """
+        r"""
         insert(VectorSizeT self, std::vector< size_t >::iterator pos, std::vector< size_t >::value_type const & x) -> std::vector< size_t >::iterator
         insert(VectorSizeT self, std::vector< size_t >::iterator pos, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)
         """
         return _coda_types.VectorSizeT_insert(self, *args)
 
-
-    def reserve(self, n: 'std::vector< size_t >::size_type') -> "void":
-        """reserve(VectorSizeT self, std::vector< size_t >::size_type n)"""
+    def reserve(self, n: "std::vector< size_t >::size_type") -> "void":
+        r"""reserve(VectorSizeT self, std::vector< size_t >::size_type n)"""
         return _coda_types.VectorSizeT_reserve(self, n)
 
-
     def capacity(self) -> "std::vector< size_t >::size_type":
-        """capacity(VectorSizeT self) -> std::vector< size_t >::size_type"""
+        r"""capacity(VectorSizeT self) -> std::vector< size_t >::size_type"""
         return _coda_types.VectorSizeT_capacity(self)
 
-
     def __getstate__(self):
     # Return a nonempty (thus non-false) tuple with dummy value in first position
         return (-1, tuple(pickle.dumps(elem) for elem in self))
@@ -1248,211 +985,173 @@ class VectorSizeT(_object):
             self.push_back(pickle.loads(elem))
 
     __swig_destroy__ = _coda_types.delete_VectorSizeT
-    __del__ = lambda self: None
-VectorSizeT_swigregister = _coda_types.VectorSizeT_swigregister
-VectorSizeT_swigregister(VectorSizeT)
 
-class VectorString(_object):
-    """Proxy of C++ std::vector<(std::string)> class."""
+# Register VectorSizeT in _coda_types:
+_coda_types.VectorSizeT_swigregister(VectorSizeT)
+
+class VectorString(object):
+    r"""Proxy of C++ std::vector< std::string > class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
     def iterator(self) -> "swig::SwigPyIterator *":
-        """iterator(VectorString self) -> SwigPyIterator"""
+        r"""iterator(VectorString self) -> SwigPyIterator"""
         return _coda_types.VectorString_iterator(self)
-
     def __iter__(self):
         return self.iterator()
 
     def __nonzero__(self) -> "bool":
-        """__nonzero__(VectorString self) -> bool"""
+        r"""__nonzero__(VectorString self) -> bool"""
         return _coda_types.VectorString___nonzero__(self)
 
-
     def __bool__(self) -> "bool":
-        """__bool__(VectorString self) -> bool"""
+        r"""__bool__(VectorString self) -> bool"""
         return _coda_types.VectorString___bool__(self)
 
-
     def __len__(self) -> "std::vector< std::string >::size_type":
-        """__len__(VectorString self) -> std::vector< std::string >::size_type"""
+        r"""__len__(VectorString self) -> std::vector< std::string >::size_type"""
         return _coda_types.VectorString___len__(self)
 
-
-    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
-        """__getslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> VectorString"""
+    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
+        r"""__getslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> VectorString"""
         return _coda_types.VectorString___getslice__(self, i, j)
 
-
     def __setslice__(self, *args) -> "void":
-        """
+        r"""
         __setslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
         __setslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, VectorString v)
         """
         return _coda_types.VectorString___setslice__(self, *args)
 
-
-    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
-        """__delslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
+    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
+        r"""__delslice__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
         return _coda_types.VectorString___delslice__(self, i, j)
 
-
     def __delitem__(self, *args) -> "void":
-        """
+        r"""
         __delitem__(VectorString self, std::vector< std::string >::difference_type i)
         __delitem__(VectorString self, PySliceObject * slice)
         """
         return _coda_types.VectorString___delitem__(self, *args)
 
-
     def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
-        """
+        r"""
         __getitem__(VectorString self, PySliceObject * slice) -> VectorString
         __getitem__(VectorString self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
         """
         return _coda_types.VectorString___getitem__(self, *args)
 
-
     def __setitem__(self, *args) -> "void":
-        """
+        r"""
         __setitem__(VectorString self, PySliceObject * slice, VectorString v)
         __setitem__(VectorString self, PySliceObject * slice)
         __setitem__(VectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
         """
         return _coda_types.VectorString___setitem__(self, *args)
 
-
     def pop(self) -> "std::vector< std::string >::value_type":
-        """pop(VectorString self) -> std::vector< std::string >::value_type"""
+        r"""pop(VectorString self) -> std::vector< std::string >::value_type"""
         return _coda_types.VectorString_pop(self)
 
-
-    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
-        """append(VectorString self, std::vector< std::string >::value_type const & x)"""
+    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
+        r"""append(VectorString self, std::vector< std::string >::value_type const & x)"""
         return _coda_types.VectorString_append(self, x)
 
-
     def empty(self) -> "bool":
-        """empty(VectorString self) -> bool"""
+        r"""empty(VectorString self) -> bool"""
         return _coda_types.VectorString_empty(self)
 
-
     def size(self) -> "std::vector< std::string >::size_type":
-        """size(VectorString self) -> std::vector< std::string >::size_type"""
+        r"""size(VectorString self) -> std::vector< std::string >::size_type"""
         return _coda_types.VectorString_size(self)
 
-
-    def swap(self, v: 'VectorString') -> "void":
-        """swap(VectorString self, VectorString v)"""
+    def swap(self, v: "VectorString") -> "void":
+        r"""swap(VectorString self, VectorString v)"""
         return _coda_types.VectorString_swap(self, v)
 
-
     def begin(self) -> "std::vector< std::string >::iterator":
-        """begin(VectorString self) -> std::vector< std::string >::iterator"""
+        r"""begin(VectorString self) -> std::vector< std::string >::iterator"""
         return _coda_types.VectorString_begin(self)
 
-
     def end(self) -> "std::vector< std::string >::iterator":
-        """end(VectorString self) -> std::vector< std::string >::iterator"""
+        r"""end(VectorString self) -> std::vector< std::string >::iterator"""
         return _coda_types.VectorString_end(self)
 
-
     def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
-        """rbegin(VectorString self) -> std::vector< std::string >::reverse_iterator"""
+        r"""rbegin(VectorString self) -> std::vector< std::string >::reverse_iterator"""
         return _coda_types.VectorString_rbegin(self)
 
-
     def rend(self) -> "std::vector< std::string >::reverse_iterator":
-        """rend(VectorString self) -> std::vector< std::string >::reverse_iterator"""
+        r"""rend(VectorString self) -> std::vector< std::string >::reverse_iterator"""
         return _coda_types.VectorString_rend(self)
 
-
     def clear(self) -> "void":
-        """clear(VectorString self)"""
+        r"""clear(VectorString self)"""
         return _coda_types.VectorString_clear(self)
 
-
     def get_allocator(self) -> "std::vector< std::string >::allocator_type":
-        """get_allocator(VectorString self) -> std::vector< std::string >::allocator_type"""
+        r"""get_allocator(VectorString self) -> std::vector< std::string >::allocator_type"""
         return _coda_types.VectorString_get_allocator(self)
 
-
     def pop_back(self) -> "void":
-        """pop_back(VectorString self)"""
+        r"""pop_back(VectorString self)"""
         return _coda_types.VectorString_pop_back(self)
 
-
     def erase(self, *args) -> "std::vector< std::string >::iterator":
-        """
+        r"""
         erase(VectorString self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
         erase(VectorString self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
         """
         return _coda_types.VectorString_erase(self, *args)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(VectorString self) -> VectorString
+        __init__(VectorString self, VectorString other) -> VectorString
+        __init__(VectorString self, std::vector< std::string >::size_type size) -> VectorString
+        __init__(VectorString self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> VectorString
         """
-        __init__(std::vector<(std::string)> self) -> VectorString
-        __init__(std::vector<(std::string)> self, VectorString arg2) -> VectorString
-        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> VectorString
-        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> VectorString
-        """
-        this = _coda_types.new_VectorString(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
-        """push_back(VectorString self, std::vector< std::string >::value_type const & x)"""
-        return _coda_types.VectorString_push_back(self, x)
+        _coda_types.VectorString_swiginit(self, _coda_types.new_VectorString(*args))
 
+    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
+        r"""push_back(VectorString self, std::vector< std::string >::value_type const & x)"""
+        return _coda_types.VectorString_push_back(self, x)
 
     def front(self) -> "std::vector< std::string >::value_type const &":
-        """front(VectorString self) -> std::vector< std::string >::value_type const &"""
+        r"""front(VectorString self) -> std::vector< std::string >::value_type const &"""
         return _coda_types.VectorString_front(self)
 
-
     def back(self) -> "std::vector< std::string >::value_type const &":
-        """back(VectorString self) -> std::vector< std::string >::value_type const &"""
+        r"""back(VectorString self) -> std::vector< std::string >::value_type const &"""
         return _coda_types.VectorString_back(self)
 
-
-    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
-        """assign(VectorString self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
+    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
+        r"""assign(VectorString self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
         return _coda_types.VectorString_assign(self, n, x)
 
-
     def resize(self, *args) -> "void":
-        """
+        r"""
         resize(VectorString self, std::vector< std::string >::size_type new_size)
         resize(VectorString self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
         """
         return _coda_types.VectorString_resize(self, *args)
 
-
     def insert(self, *args) -> "void":
-        """
+        r"""
         insert(VectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
         insert(VectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
         """
         return _coda_types.VectorString_insert(self, *args)
 
-
-    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
-        """reserve(VectorString self, std::vector< std::string >::size_type n)"""
+    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
+        r"""reserve(VectorString self, std::vector< std::string >::size_type n)"""
         return _coda_types.VectorString_reserve(self, n)
 
-
     def capacity(self) -> "std::vector< std::string >::size_type":
-        """capacity(VectorString self) -> std::vector< std::string >::size_type"""
+        r"""capacity(VectorString self) -> std::vector< std::string >::size_type"""
         return _coda_types.VectorString_capacity(self)
 
-
     def __getstate__(self):
     # Return a nonempty (thus non-false) tuple with dummy value in first position
         return (-1, tuple(pickle.dumps(elem) for elem in self))
@@ -1464,10 +1163,9 @@ class VectorString(_object):
             self.push_back(pickle.loads(elem))
 
     __swig_destroy__ = _coda_types.delete_VectorString
-    __del__ = lambda self: None
-VectorString_swigregister = _coda_types.VectorString_swigregister
-VectorString_swigregister(VectorString)
 
-# This file is compatible with both classic and new-style classes.
+# Register VectorString in _coda_types:
+_coda_types.VectorString_swigregister(VectorString)
+
 
 
diff --git a/externals/coda-oss/modules/python/xml.lite/source/generated/xml_lite.py b/externals/coda-oss/modules/python/xml.lite/source/generated/xml_lite.py
index 7be272a1..24642750 100644
--- a/externals/coda-oss/modules/python/xml.lite/source/generated/xml_lite.py
+++ b/externals/coda-oss/modules/python/xml.lite/source/generated/xml_lite.py
@@ -1,498 +1,360 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_xml_lite')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_xml_lite')
-    _xml_lite = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_xml_lite', [dirname(__file__)])
-        except ImportError:
-            import _xml_lite
-            return _xml_lite
-        try:
-            _mod = imp.load_module('_xml_lite', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _xml_lite = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _xml_lite
 else:
     import _xml_lite
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
+        else:
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
+
+
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class Element(object):
+    r"""Proxy of C++ xml::lite::Element class."""
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
-
-class Element(_object):
-    """Proxy of C++ xml::lite::Element class."""
-
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Element, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Element, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
     __swig_destroy__ = _xml_lite.delete_Element
-    __del__ = lambda self: None
 
     def destroyChildren(self) -> "void":
-        """destroyChildren(Element self)"""
+        r"""destroyChildren(Element self)"""
         return _xml_lite.Element_destroyChildren(self)
 
-
     def __init__(self, *args):
+        r"""
+        __init__(Element self) -> Element
+        __init__(Element self, std::string const & qname, std::string const & uri="", std::string const & characterData="") -> Element
+        __init__(Element self, xml::lite::QName const & qname, coda_oss::u8string const & characterData) -> Element
+        __init__(Element self, Element arg2) -> Element
+        __init__(Element self, Element arg2) -> Element
         """
-        __init__(xml::lite::Element self) -> Element
-        __init__(xml::lite::Element self, std::string const & qname, std::string const & uri, std::string const & characterData) -> Element
-        __init__(xml::lite::Element self, std::string const & qname, std::string const & uri) -> Element
-        __init__(xml::lite::Element self, std::string const & qname) -> Element
-        __init__(xml::lite::Element self, xml::lite::QName const & qname, coda_oss::u8string const & characterData) -> Element
-        __init__(xml::lite::Element self, Element arg2) -> Element
-        __init__(xml::lite::Element self, Element arg2) -> Element
-        """
-        this = _xml_lite.new_Element(*args)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
-
-    def clone(self, element: 'Element') -> "void":
-        """clone(Element self, Element element)"""
-        return _xml_lite.Element_clone(self, element)
+        _xml_lite.Element_swiginit(self, _xml_lite.new_Element(*args))
 
+    def clone(self, element: "Element") -> "void":
+        r"""clone(Element self, Element element)"""
+        return _xml_lite.Element_clone(self, element)
 
-    def attribute(self, s: 'std::string const &') -> "std::string &":
-        """attribute(Element self, std::string const & s) -> std::string &"""
+    def attribute(self, s: "std::string const &") -> "std::string &":
+        r"""attribute(Element self, std::string const & s) -> std::string &"""
         return _xml_lite.Element_attribute(self, s)
 
-
     def getElementByTagNameNS(self, *args) -> "xml::lite::Element &":
-        """
+        r"""
         getElementByTagNameNS(Element self, std::nothrow_t arg2, std::string const & qname, bool recurse=False) -> Element
-        getElementByTagNameNS(Element self, std::nothrow_t arg2, std::string const & qname) -> Element
         getElementByTagNameNS(Element self, std::string const & qname, bool recurse=False) -> Element
-        getElementByTagNameNS(Element self, std::string const & qname) -> Element
         """
         return _xml_lite.Element_getElementByTagNameNS(self, *args)
 
-
     def getElementsByTagNameNS(self, *args) -> "std::vector< xml::lite::Element * >":
-        """
+        r"""
         getElementsByTagNameNS(Element self, std::string const & qname, std::vector< xml::lite::Element * > & elements, bool recurse=False)
-        getElementsByTagNameNS(Element self, std::string const & qname, std::vector< xml::lite::Element * > & elements)
         getElementsByTagNameNS(Element self, std::string const & qname, bool recurse=False) -> std::vector< xml::lite::Element * >
-        getElementsByTagNameNS(Element self, std::string const & qname) -> std::vector< xml::lite::Element * >
         """
         return _xml_lite.Element_getElementsByTagNameNS(self, *args)
 
-
     def getElementByTagName(self, *args) -> "xml::lite::Element &":
-        """
+        r"""
         getElementByTagName(Element self, std::nothrow_t arg2, std::string const & localName, bool recurse=False) -> Element
-        getElementByTagName(Element self, std::nothrow_t arg2, std::string const & localName) -> Element
         getElementByTagName(Element self, std::string const & localName, bool recurse=False) -> Element
-        getElementByTagName(Element self, std::string const & localName) -> Element
         getElementByTagName(Element self, std::nothrow_t arg2, xml::lite::QName const & arg3, bool recurse=False) -> Element
-        getElementByTagName(Element self, std::nothrow_t arg2, xml::lite::QName const & arg3) -> Element
         getElementByTagName(Element self, std::nothrow_t t, std::string const & uri, std::string const & localName, bool recurse=False) -> Element
-        getElementByTagName(Element self, std::nothrow_t t, std::string const & uri, std::string const & localName) -> Element
         getElementByTagName(Element self, xml::lite::QName const & arg2, bool recurse=False) -> Element
-        getElementByTagName(Element self, xml::lite::QName const & arg2) -> Element
         getElementByTagName(Element self, std::string const & uri, std::string const & localName, bool recurse=False) -> Element
-        getElementByTagName(Element self, std::string const & uri, std::string const & localName) -> Element
         """
         return _xml_lite.Element_getElementByTagName(self, *args)
 
-
     def getElementsByTagName(self, *args) -> "std::vector< xml::lite::Element * >":
-        """
+        r"""
         getElementsByTagName(Element self, std::string const & localName, std::vector< xml::lite::Element * > & elements, bool recurse=False)
-        getElementsByTagName(Element self, std::string const & localName, std::vector< xml::lite::Element * > & elements)
         getElementsByTagName(Element self, std::string const & localName, bool recurse=False) -> std::vector< xml::lite::Element * >
-        getElementsByTagName(Element self, std::string const & localName) -> std::vector< xml::lite::Element * >
         getElementsByTagName(Element self, xml::lite::QName const & name, std::vector< xml::lite::Element * > & elements, bool recurse=False)
-        getElementsByTagName(Element self, xml::lite::QName const & name, std::vector< xml::lite::Element * > & elements)
         getElementsByTagName(Element self, std::string const & uri, std::string const & localName, std::vector< xml::lite::Element * > & elements, bool recurse=False)
-        getElementsByTagName(Element self, std::string const & uri, std::string const & localName, std::vector< xml::lite::Element * > & elements)
         getElementsByTagName(Element self, xml::lite::QName const & name, bool recurse=False) -> std::vector< xml::lite::Element * >
-        getElementsByTagName(Element self, xml::lite::QName const & name) -> std::vector< xml::lite::Element * >
         getElementsByTagName(Element self, std::string const & uri, std::string const & localName, bool recurse=False) -> std::vector< xml::lite::Element * >
-        getElementsByTagName(Element self, std::string const & uri, std::string const & localName) -> std::vector< xml::lite::Element * >
         """
         return _xml_lite.Element_getElementsByTagName(self, *args)
 
-
     def setNamespacePrefix(self, *args) -> "void":
-        """
+        r"""
         setNamespacePrefix(Element self, std::string prefix, xml::lite::Uri const & arg3)
         setNamespacePrefix(Element self, std::string prefix, std::string uri)
         """
         return _xml_lite.Element_setNamespacePrefix(self, *args)
 
-
     def setNamespaceURI(self, *args) -> "void":
-        """
+        r"""
         setNamespaceURI(Element self, std::string prefix, xml::lite::Uri const & arg3)
         setNamespaceURI(Element self, std::string prefix, std::string uri)
         """
         return _xml_lite.Element_setNamespaceURI(self, *args)
 
-
-    def _print(self, stream: 'io::OutputStream &') -> "void":
-        """_print(Element self, io::OutputStream & stream)"""
+    def _print(self, stream: "io::OutputStream &") -> "void":
+        r"""_print(Element self, io::OutputStream & stream)"""
         return _xml_lite.Element__print(self, stream)
 
-
     def prettyPrint(self, *args) -> "void":
-        """
-        prettyPrint(Element self, io::OutputStream & stream, std::string const & formatter)
-        prettyPrint(Element self, io::OutputStream & stream)
-        """
+        r"""prettyPrint(Element self, io::OutputStream & stream, std::string const & formatter="    ")"""
         return _xml_lite.Element_prettyPrint(self, *args)
 
-
-    def consoleOutput_(self, stream: 'io::OutputStream &') -> "void":
-        """consoleOutput_(Element self, io::OutputStream & stream)"""
+    def consoleOutput_(self, stream: "io::OutputStream &") -> "void":
+        r"""consoleOutput_(Element self, io::OutputStream & stream)"""
         return _xml_lite.Element_consoleOutput_(self, stream)
 
-
     def prettyConsoleOutput_(self, *args) -> "void":
-        """
-        prettyConsoleOutput_(Element self, io::OutputStream & stream, std::string const & formatter)
-        prettyConsoleOutput_(Element self, io::OutputStream & stream)
-        """
+        r"""prettyConsoleOutput_(Element self, io::OutputStream & stream, std::string const & formatter="    ")"""
         return _xml_lite.Element_prettyConsoleOutput_(self, *args)
 
-
     def hasElement(self, *args) -> "bool":
-        """
+        r"""
         hasElement(Element self, std::string const & localName) -> bool
         hasElement(Element self, xml::lite::QName const & arg2) -> bool
         hasElement(Element self, std::string const & uri, std::string const & localName) -> bool
         """
         return _xml_lite.Element_hasElement(self, *args)
 
-
     def getCharacterData(self, *args) -> "coda_oss::u8string &":
-        """
+        r"""
         getCharacterData(Element self) -> std::string
         getCharacterData(Element self, coda_oss::u8string & result) -> coda_oss::u8string &
         """
         return _xml_lite.Element_getCharacterData(self, *args)
 
-
     def setCharacterData(self, *args) -> "void":
-        """
+        r"""
         setCharacterData(Element self, std::string const & arg2)
         setCharacterData(Element self, coda_oss::u8string s)
         """
         return _xml_lite.Element_setCharacterData(self, *args)
 
-
-    def setLocalName(self, localName: 'std::string const &') -> "void":
-        """setLocalName(Element self, std::string const & localName)"""
+    def setLocalName(self, localName: "std::string const &") -> "void":
+        r"""setLocalName(Element self, std::string const & localName)"""
         return _xml_lite.Element_setLocalName(self, localName)
 
-
     def getLocalName(self) -> "std::string":
-        """getLocalName(Element self) -> std::string"""
+        r"""getLocalName(Element self) -> std::string"""
         return _xml_lite.Element_getLocalName(self)
 
-
     def setQName(self, *args) -> "void":
-        """
+        r"""
         setQName(Element self, std::string const & qname)
         setQName(Element self, xml::lite::QName const & qname)
         """
         return _xml_lite.Element_setQName(self, *args)
 
-
     def getQName(self, *args) -> "void":
-        """
+        r"""
         getQName(Element self) -> std::string
         getQName(Element self, xml::lite::QName & result)
         """
         return _xml_lite.Element_getQName(self, *args)
 
-
     def setUri(self, *args) -> "void":
-        """
+        r"""
         setUri(Element self, xml::lite::Uri const & uri)
         setUri(Element self, std::string const & uri)
         """
         return _xml_lite.Element_setUri(self, *args)
 
-
     def getUri(self, *args) -> "void":
-        """
+        r"""
         getUri(Element self) -> std::string
         getUri(Element self, xml::lite::Uri & result)
         """
         return _xml_lite.Element_getUri(self, *args)
 
-
-    def setPrefix(self, prefix: 'std::string const &') -> "void":
-        """setPrefix(Element self, std::string const & prefix)"""
+    def setPrefix(self, prefix: "std::string const &") -> "void":
+        r"""setPrefix(Element self, std::string const & prefix)"""
         return _xml_lite.Element_setPrefix(self, prefix)
 
-
     def getChildren(self, *args) -> "std::vector< xml::lite::Element * > const &":
-        """
+        r"""
         getChildren(Element self) -> std::vector< xml::lite::Element * >
         getChildren(Element self) -> std::vector< xml::lite::Element * > const &
         """
         return _xml_lite.Element_getChildren(self, *args)
 
-
     def clearChildren(self) -> "void":
-        """clearChildren(Element self)"""
+        r"""clearChildren(Element self)"""
         return _xml_lite.Element_clearChildren(self)
 
-
     def getParent(self) -> "xml::lite::Element *":
-        """getParent(Element self) -> Element"""
+        r"""getParent(Element self) -> Element"""
         return _xml_lite.Element_getParent(self)
 
-
-    def setParent(self, parent: 'Element') -> "void":
-        """setParent(Element self, Element parent)"""
+    def setParent(self, parent: "Element") -> "void":
+        r"""setParent(Element self, Element parent)"""
         return _xml_lite.Element_setParent(self, parent)
 
-Element_swigregister = _xml_lite.Element_swigregister
-Element_swigregister(Element)
+# Register Element in _xml_lite:
+_xml_lite.Element_swigregister(Element)
 
 
-def add(arg1: 'xml::lite::QName const &', value: 'std::string const &', parent: 'Element') -> "xml::lite::Element &":
-    """add(xml::lite::QName const & arg1, std::string const & value, Element parent) -> Element"""
+def add(arg1: "xml::lite::QName const &", value: "std::string const &", parent: "Element") -> "xml::lite::Element &":
+    r"""add(xml::lite::QName const & arg1, std::string const & value, Element parent) -> Element"""
     return _xml_lite.add(arg1, value, parent)
-class Document(_object):
-    """Proxy of C++ xml::lite::Document class."""
+class Document(object):
+    r"""Proxy of C++ xml::lite::Document class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
-    def __init__(self, rootNode: 'Element'=None, own: 'bool'=True):
-        """
-        __init__(xml::lite::Document self, Element rootNode=None, bool own=True) -> Document
-        __init__(xml::lite::Document self, Element rootNode=None) -> Document
-        __init__(xml::lite::Document self) -> Document
-        """
-        this = _xml_lite.new_Document(rootNode, own)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+    def __init__(self, rootNode: "Element"=None, own: "bool"=True):
+        r"""__init__(Document self, Element rootNode=None, bool own=True) -> Document"""
+        _xml_lite.Document_swiginit(self, _xml_lite.new_Document(rootNode, own))
     __swig_destroy__ = _xml_lite.delete_Document
-    __del__ = lambda self: None
 
     def createElement(self, *args) -> "xml::lite::Element *":
-        """
-        createElement(Document self, std::string const & qname, std::string const & uri, std::string characterData) -> Element
-        createElement(Document self, std::string const & qname, std::string const & uri) -> Element
-        """
+        r"""createElement(Document self, std::string const & qname, std::string const & uri, std::string characterData="") -> Element"""
         return _xml_lite.Document_createElement(self, *args)
 
-
     def destroy(self) -> "void":
-        """destroy(Document self)"""
+        r"""destroy(Document self)"""
         return _xml_lite.Document_destroy(self)
 
-
-    def insert(self, element: 'Element', underThis: 'Element') -> "void":
-        """insert(Document self, Element element, Element underThis)"""
+    def insert(self, element: "Element", underThis: "Element") -> "void":
+        r"""insert(Document self, Element element, Element underThis)"""
         return _xml_lite.Document_insert(self, element, underThis)
 
-
     def remove(self, *args) -> "void":
-        """
+        r"""
         remove(Document self, Element toDelete)
         remove(Document self, Element toDelete, Element fromHere)
         """
         return _xml_lite.Document_remove(self, *args)
 
-
-    def setRootElement(self, element: 'Element', own: 'bool'=True) -> "void":
-        """
-        setRootElement(Document self, Element element, bool own=True)
-        setRootElement(Document self, Element element)
-        """
+    def setRootElement(self, element: "Element", own: "bool"=True) -> "void":
+        r"""setRootElement(Document self, Element element, bool own=True)"""
         return _xml_lite.Document_setRootElement(self, element, own)
 
-
     def getRootElement(self, *args) -> "xml::lite::Element *":
-        """
+        r"""
         getRootElement(Document self, bool steal=False) -> Element
         getRootElement(Document self) -> Element
-        getRootElement(Document self) -> Element
         """
         return _xml_lite.Document_getRootElement(self, *args)
 
-Document_swigregister = _xml_lite.Document_swigregister
-Document_swigregister(Document)
+# Register Document in _xml_lite:
+_xml_lite.Document_swigregister(Document)
 
 
 def getRootElement(*args) -> "xml::lite::Element const &":
-    """
+    r"""
     getRootElement(Document doc) -> Element
     getRootElement(Document doc) -> Element
     getRootElement(Document pDoc) -> Element
     getRootElement(Document pDoc) -> Element
     """
     return _xml_lite.getRootElement(*args)
-class MinidomParser(_object):
-    """Proxy of C++ xml::lite::MinidomParser class."""
+class MinidomParser(object):
+    r"""Proxy of C++ xml::lite::MinidomParser class."""
 
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, MinidomParser, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, MinidomParser, name)
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
 
-    def __init__(self, storeEncoding: 'bool'=True):
-        """
-        __init__(xml::lite::MinidomParser self, bool storeEncoding=True) -> MinidomParser
-        __init__(xml::lite::MinidomParser self) -> MinidomParser
-        """
-        this = _xml_lite.new_MinidomParser(storeEncoding)
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+    def __init__(self, storeEncoding: "bool"=True):
+        r"""__init__(MinidomParser self, bool storeEncoding=True) -> MinidomParser"""
+        _xml_lite.MinidomParser_swiginit(self, _xml_lite.new_MinidomParser(storeEncoding))
     __swig_destroy__ = _xml_lite.delete_MinidomParser
-    __del__ = lambda self: None
 
     def parse(self, *args) -> "void":
-        """
-        parse(MinidomParser self, io::InputStream & arg2, int size)
-        parse(MinidomParser self, io::InputStream & arg2)
-        parse(MinidomParser self, io::InputStream & arg2, void const * pInitialEncoding, void const * pFallbackEncoding, int size)
-        parse(MinidomParser self, io::InputStream & arg2, void const * pInitialEncoding, void const * pFallbackEncoding)
+        r"""
+        parse(MinidomParser self, io::InputStream & _is, int size=io::InputStream::IS_END)
+        parse(MinidomParser self, io::InputStream & _is, void const * pInitialEncoding, void const * pFallbackEncoding, int size=io::InputStream::IS_END)
         """
         return _xml_lite.MinidomParser_parse(self, *args)
 
-
     def clear(self) -> "void":
-        """clear(MinidomParser self)"""
+        r"""clear(MinidomParser self)"""
         return _xml_lite.MinidomParser_clear(self)
 
-
     def getDocument(self, *args) -> "std::unique_ptr< xml::lite::Document > &":
-        """
+        r"""
         getDocument(MinidomParser self) -> Document
         getDocument(MinidomParser self, bool steal=False) -> Document
-        getDocument(MinidomParser self) -> Document
         getDocument(MinidomParser self, std::unique_ptr< xml::lite::Document > & arg2) -> std::unique_ptr< xml::lite::Document > &
         """
         return _xml_lite.MinidomParser_getDocument(self, *args)
 
-
     def getReader(self, *args) -> "XMLReader &":
-        """
+        r"""
         getReader(MinidomParser self) -> XMLReader const
         getReader(MinidomParser self) -> XMLReader &
         """
         return _xml_lite.MinidomParser_getReader(self, *args)
 
-
     def getHandler(self) -> "MinidomHandler &":
-        """getHandler(MinidomParser self) -> MinidomHandler &"""
+        r"""getHandler(MinidomParser self) -> MinidomHandler &"""
         return _xml_lite.MinidomParser_getHandler(self)
 
-
     def setDocument(self, *args) -> "void":
-        """
+        r"""
         setDocument(MinidomParser self, Document newDocument, bool own=True)
-        setDocument(MinidomParser self, Document newDocument)
         setDocument(MinidomParser self, std::unique_ptr< xml::lite::Document > && arg2)
         """
         return _xml_lite.MinidomParser_setDocument(self, *args)
 
-
-    def preserveCharacterData(self, preserve: 'bool') -> "void":
-        """preserveCharacterData(MinidomParser self, bool preserve)"""
+    def preserveCharacterData(self, preserve: "bool") -> "void":
+        r"""preserveCharacterData(MinidomParser self, bool preserve)"""
         return _xml_lite.MinidomParser_preserveCharacterData(self, preserve)
 
-MinidomParser_swigregister = _xml_lite.MinidomParser_swigregister
-MinidomParser_swigregister(MinidomParser)
+# Register MinidomParser in _xml_lite:
+_xml_lite.MinidomParser_swigregister(MinidomParser)
 
 
-def getDocument(xmlParser: 'MinidomParser') -> "xml::lite::Document &":
-    """getDocument(MinidomParser xmlParser) -> Document"""
+def getDocument(xmlParser: "MinidomParser") -> "xml::lite::Document &":
+    r"""getDocument(MinidomParser xmlParser) -> Document"""
     return _xml_lite.getDocument(xmlParser)
-# This file is compatible with both classic and new-style classes.
 
 
diff --git a/externals/coda-oss/test_package/CMakeLists.txt b/externals/coda-oss/test_package/CMakeLists.txt
index 4d239e67..0d5b0fd0 100644
--- a/externals/coda-oss/test_package/CMakeLists.txt
+++ b/externals/coda-oss/test_package/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.14)
+cmake_minimum_required(VERSION 3.6)
 project(coda-oss-test_package)
 set(CMAKE_CXX_STANDARD 11)
 
@@ -11,3 +11,4 @@ find_package(coda-oss)
 
 add_executable(test test.cpp)
 target_link_libraries(test types-c++ str-c++)
+set_target_properties(test PROPERTIES EXCLUDE_FROM_ALL True)
\ No newline at end of file
diff --git a/modules/python/nitf/source/generated/nitropy.py b/modules/python/nitf/source/generated/nitropy.py
index 4af29e4a..5451c2b5 100644
--- a/modules/python/nitf/source/generated/nitropy.py
+++ b/modules/python/nitf/source/generated/nitropy.py
@@ -1,99 +1,65 @@
 # This file was automatically generated by SWIG (http://www.swig.org).
-# Version 3.0.12
+# Version 4.0.2
 #
 # Do not make changes to this file unless you know what you are doing--modify
 # the SWIG interface file instead.
 
 from sys import version_info as _swig_python_version_info
-if _swig_python_version_info >= (2, 7, 0):
-    def swig_import_helper():
-        import importlib
-        pkg = __name__.rpartition('.')[0]
-        mname = '.'.join((pkg, '_nitropy')).lstrip('.')
-        try:
-            return importlib.import_module(mname)
-        except ImportError:
-            return importlib.import_module('_nitropy')
-    _nitropy = swig_import_helper()
-    del swig_import_helper
-elif _swig_python_version_info >= (2, 6, 0):
-    def swig_import_helper():
-        from os.path import dirname
-        import imp
-        fp = None
-        try:
-            fp, pathname, description = imp.find_module('_nitropy', [dirname(__file__)])
-        except ImportError:
-            import _nitropy
-            return _nitropy
-        try:
-            _mod = imp.load_module('_nitropy', fp, pathname, description)
-        finally:
-            if fp is not None:
-                fp.close()
-        return _mod
-    _nitropy = swig_import_helper()
-    del swig_import_helper
+if _swig_python_version_info < (2, 7, 0):
+    raise RuntimeError("Python 2.7 or later required")
+
+# Import the low-level C/C++ module
+if __package__ or "." in __name__:
+    from . import _nitropy
 else:
     import _nitropy
-del _swig_python_version_info
-
-try:
-    _swig_property = property
-except NameError:
-    pass  # Python < 2.2 doesn't have 'property'.
 
 try:
     import builtins as __builtin__
 except ImportError:
     import __builtin__
 
-def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
-    if (name == "thisown"):
-        return self.this.own(value)
-    if (name == "this"):
-        if type(value).__name__ == 'SwigPyObject':
-            self.__dict__[name] = value
-            return
-    method = class_type.__swig_setmethods__.get(name, None)
-    if method:
-        return method(self, value)
-    if (not static):
-        if _newclass:
-            object.__setattr__(self, name, value)
+def _swig_repr(self):
+    try:
+        strthis = "proxy of " + self.this.__repr__()
+    except __builtin__.Exception:
+        strthis = ""
+    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+
+
+def _swig_setattr_nondynamic_instance_variable(set):
+    def set_instance_attr(self, name, value):
+        if name == "thisown":
+            self.this.own(value)
+        elif name == "this":
+            set(self, name, value)
+        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
+            set(self, name, value)
         else:
-            self.__dict__[name] = value
-    else:
-        raise AttributeError("You cannot add attributes to %s" % self)
+            raise AttributeError("You cannot add instance attributes to %s" % self)
+    return set_instance_attr
 
 
-def _swig_setattr(self, class_type, name, value):
-    return _swig_setattr_nondynamic(self, class_type, name, value, 0)
+def _swig_setattr_nondynamic_class_variable(set):
+    def set_class_attr(cls, name, value):
+        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
+            set(cls, name, value)
+        else:
+            raise AttributeError("You cannot add class attributes to %s" % cls)
+    return set_class_attr
 
 
-def _swig_getattr(self, class_type, name):
-    if (name == "thisown"):
-        return self.this.own()
-    method = class_type.__swig_getmethods__.get(name, None)
-    if method:
-        return method(self)
-    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))
+def _swig_add_metaclass(metaclass):
+    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
+    def wrapper(cls):
+        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
+    return wrapper
 
 
-def _swig_repr(self):
-    try:
-        strthis = "proxy of " + self.this.__repr__()
-    except __builtin__.Exception:
-        strthis = ""
-    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)
+class _SwigNonDynamicMeta(type):
+    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
+    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)
 
-try:
-    _object = object
-    _newclass = 1
-except __builtin__.Exception:
-    class _object:
-        pass
-    _newclass = 0
 
 NRT_DEFAULT_PERM = _nitropy.NRT_DEFAULT_PERM
 NRT_INVALID_HANDLE_VALUE = _nitropy.NRT_INVALID_HANDLE_VALUE
@@ -110,21 +76,17 @@ NRT_CORNERS_UTM_UPS_N = _nitropy.NRT_CORNERS_UTM_UPS_N
 NRT_CORNERS_GEO = _nitropy.NRT_CORNERS_GEO
 NRT_CORNERS_DECIMAL = _nitropy.NRT_CORNERS_DECIMAL
 
-def nrt_System_swap16(ins: 'uint16_t') -> "uint16_t":
+def nrt_System_swap16(ins: "uint16_t") -> "uint16_t":
     return _nitropy.nrt_System_swap16(ins)
-nrt_System_swap16 = _nitropy.nrt_System_swap16
 
-def nrt_System_swap32(inl: 'uint32_t') -> "uint32_t":
+def nrt_System_swap32(inl: "uint32_t") -> "uint32_t":
     return _nitropy.nrt_System_swap32(inl)
-nrt_System_swap32 = _nitropy.nrt_System_swap32
 
-def nrt_System_swap64(inl: 'uint64_t') -> "uint64_t":
+def nrt_System_swap64(inl: "uint64_t") -> "uint64_t":
     return _nitropy.nrt_System_swap64(inl)
-nrt_System_swap64 = _nitropy.nrt_System_swap64
 
-def nrt_System_swap64c(inl: 'uint64_t') -> "uint64_t":
+def nrt_System_swap64c(inl: "uint64_t") -> "uint64_t":
     return _nitropy.nrt_System_swap64c(inl)
-nrt_System_swap64c = _nitropy.nrt_System_swap64c
 NITF_VER_20 = _nitropy.NITF_VER_20
 NITF_VER_21 = _nitropy.NITF_VER_21
 NITF_VER_UNKNOWN = _nitropy.NITF_VER_UNKNOWN
@@ -148,229 +110,134 @@ NRT_ERR_DECOMPRESSION = _nitropy.NRT_ERR_DECOMPRESSION
 NRT_ERR_PARSING_FILE = _nitropy.NRT_ERR_PARSING_FILE
 NRT_ERR_INT_STACK_OVERFLOW = _nitropy.NRT_ERR_INT_STACK_OVERFLOW
 NRT_ERR_UNK = _nitropy.NRT_ERR_UNK
-class nrt_Error(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_Error, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nrt_Error, name)
+class nrt_Error(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["message"] = _nitropy.nrt_Error_message_set
-    __swig_getmethods__["message"] = _nitropy.nrt_Error_message_get
-    if _newclass:
-        message = _swig_property(_nitropy.nrt_Error_message_get, _nitropy.nrt_Error_message_set)
-    __swig_setmethods__["file"] = _nitropy.nrt_Error_file_set
-    __swig_getmethods__["file"] = _nitropy.nrt_Error_file_get
-    if _newclass:
-        file = _swig_property(_nitropy.nrt_Error_file_get, _nitropy.nrt_Error_file_set)
-    __swig_setmethods__["line"] = _nitropy.nrt_Error_line_set
-    __swig_getmethods__["line"] = _nitropy.nrt_Error_line_get
-    if _newclass:
-        line = _swig_property(_nitropy.nrt_Error_line_get, _nitropy.nrt_Error_line_set)
-    __swig_setmethods__["func"] = _nitropy.nrt_Error_func_set
-    __swig_getmethods__["func"] = _nitropy.nrt_Error_func_get
-    if _newclass:
-        func = _swig_property(_nitropy.nrt_Error_func_get, _nitropy.nrt_Error_func_set)
-    __swig_setmethods__["level"] = _nitropy.nrt_Error_level_set
-    __swig_getmethods__["level"] = _nitropy.nrt_Error_level_get
-    if _newclass:
-        level = _swig_property(_nitropy.nrt_Error_level_get, _nitropy.nrt_Error_level_set)
+    message = property(_nitropy.nrt_Error_message_get, _nitropy.nrt_Error_message_set)
+    file = property(_nitropy.nrt_Error_file_get, _nitropy.nrt_Error_file_set)
+    line = property(_nitropy.nrt_Error_line_get, _nitropy.nrt_Error_line_set)
+    func = property(_nitropy.nrt_Error_func_get, _nitropy.nrt_Error_func_set)
+    level = property(_nitropy.nrt_Error_level_get, _nitropy.nrt_Error_level_set)
 
     def __init__(self):
-        this = _nitropy.new_nrt_Error()
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _nitropy.nrt_Error_swiginit(self, _nitropy.new_nrt_Error())
     __swig_destroy__ = _nitropy.delete_nrt_Error
-    __del__ = lambda self: None
-nrt_Error_swigregister = _nitropy.nrt_Error_swigregister
-nrt_Error_swigregister(nrt_Error)
+
+# Register nrt_Error in _nitropy:
+_nitropy.nrt_Error_swigregister(nrt_Error)
 
 
-def nrt_Error_init(error: 'nrt_Error', message: 'char const *', file: 'char const *', line: 'int', func: 'char const *', level: 'int') -> "void":
+def nrt_Error_init(error: "nrt_Error", message: "char const *", file: "char const *", line: "int", func: "char const *", level: "int") -> "void":
     return _nitropy.nrt_Error_init(error, message, file, line, func, level)
-nrt_Error_init = _nitropy.nrt_Error_init
 
-def nrt_Error_flogf(error: 'nrt_Error', file: 'FILE *', level: 'int', format: 'char const *') -> "void":
-    return _nitropy.nrt_Error_flogf(error, file, level, format)
-nrt_Error_flogf = _nitropy.nrt_Error_flogf
+def nrt_Error_flogf(*args) -> "void":
+    return _nitropy.nrt_Error_flogf(*args)
 
-def nrt_Error_fprintf(error: 'nrt_Error', file: 'FILE *', format: 'char const *') -> "void":
-    return _nitropy.nrt_Error_fprintf(error, file, format)
-nrt_Error_fprintf = _nitropy.nrt_Error_fprintf
+def nrt_Error_fprintf(*args) -> "void":
+    return _nitropy.nrt_Error_fprintf(*args)
 
-def nrt_Error_initf(error: 'nrt_Error', file: 'char const *', line: 'int', func: 'char const *', level: 'int', format: 'char const *') -> "void":
-    return _nitropy.nrt_Error_initf(error, file, line, func, level, format)
-nrt_Error_initf = _nitropy.nrt_Error_initf
+def nrt_Error_initf(*args) -> "void":
+    return _nitropy.nrt_Error_initf(*args)
 
-def nrt_Error_print(error: 'nrt_Error', file: 'FILE *', userMessage: 'char const *') -> "void":
+def nrt_Error_print(error: "nrt_Error", file: "FILE *", userMessage: "char const *") -> "void":
     return _nitropy.nrt_Error_print(error, file, userMessage)
-nrt_Error_print = _nitropy.nrt_Error_print
 
-def nrt_strerror(errnum: 'int') -> "char *":
+def nrt_strerror(errnum: "int") -> "char *":
     return _nitropy.nrt_strerror(errnum)
-nrt_strerror = _nitropy.nrt_strerror
 NRT_MAX_READ_ATTEMPTS = _nitropy.NRT_MAX_READ_ATTEMPTS
 
-def nrt_IOHandle_create(fname: 'char const *', access: 'nrt_AccessFlags', creation: 'nrt_CreationFlags', error: 'nrt_Error') -> "nrt_IOHandle":
+def nrt_IOHandle_create(fname: "char const *", access: "nrt_AccessFlags", creation: "nrt_CreationFlags", error: "nrt_Error") -> "nrt_IOHandle":
     return _nitropy.nrt_IOHandle_create(fname, access, creation, error)
-nrt_IOHandle_create = _nitropy.nrt_IOHandle_create
 
-def nrt_IOHandle_read(handle: 'nrt_IOHandle', buf: 'void *', size: 'size_t', error: 'nrt_Error') -> "bool":
+def nrt_IOHandle_read(handle: "nrt_IOHandle", buf: "void *", size: "size_t", error: "nrt_Error") -> "bool":
     return _nitropy.nrt_IOHandle_read(handle, buf, size, error)
-nrt_IOHandle_read = _nitropy.nrt_IOHandle_read
 
-def nrt_IOHandle_write(handle: 'nrt_IOHandle', buf: 'void const *', size: 'size_t', error: 'nrt_Error') -> "bool":
+def nrt_IOHandle_write(handle: "nrt_IOHandle", buf: "void const *", size: "size_t", error: "nrt_Error") -> "bool":
     return _nitropy.nrt_IOHandle_write(handle, buf, size, error)
-nrt_IOHandle_write = _nitropy.nrt_IOHandle_write
 
-def nrt_IOHandle_seek(handle: 'nrt_IOHandle', offset: 'nrt_Off', whence: 'int', error: 'nrt_Error') -> "nrt_Off":
+def nrt_IOHandle_seek(handle: "nrt_IOHandle", offset: "nrt_Off", whence: "int", error: "nrt_Error") -> "nrt_Off":
     return _nitropy.nrt_IOHandle_seek(handle, offset, whence, error)
-nrt_IOHandle_seek = _nitropy.nrt_IOHandle_seek
 
-def nrt_IOHandle_tell(handle: 'nrt_IOHandle', error: 'nrt_Error') -> "nrt_Off":
+def nrt_IOHandle_tell(handle: "nrt_IOHandle", error: "nrt_Error") -> "nrt_Off":
     return _nitropy.nrt_IOHandle_tell(handle, error)
-nrt_IOHandle_tell = _nitropy.nrt_IOHandle_tell
 
-def nrt_IOHandle_getSize(handle: 'nrt_IOHandle', error: 'nrt_Error') -> "nrt_Off":
+def nrt_IOHandle_getSize(handle: "nrt_IOHandle", error: "nrt_Error") -> "nrt_Off":
     return _nitropy.nrt_IOHandle_getSize(handle, error)
-nrt_IOHandle_getSize = _nitropy.nrt_IOHandle_getSize
 
-def nrt_IOHandle_close(handle: 'nrt_IOHandle') -> "void":
+def nrt_IOHandle_close(handle: "nrt_IOHandle") -> "void":
     return _nitropy.nrt_IOHandle_close(handle)
-nrt_IOHandle_close = _nitropy.nrt_IOHandle_close
-class nrt_IIOInterface(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_IIOInterface, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nrt_IIOInterface, name)
+class nrt_IIOInterface(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["read"] = _nitropy.nrt_IIOInterface_read_set
-    __swig_getmethods__["read"] = _nitropy.nrt_IIOInterface_read_get
-    if _newclass:
-        read = _swig_property(_nitropy.nrt_IIOInterface_read_get, _nitropy.nrt_IIOInterface_read_set)
-    __swig_setmethods__["write"] = _nitropy.nrt_IIOInterface_write_set
-    __swig_getmethods__["write"] = _nitropy.nrt_IIOInterface_write_get
-    if _newclass:
-        write = _swig_property(_nitropy.nrt_IIOInterface_write_get, _nitropy.nrt_IIOInterface_write_set)
-    __swig_setmethods__["canSeek"] = _nitropy.nrt_IIOInterface_canSeek_set
-    __swig_getmethods__["canSeek"] = _nitropy.nrt_IIOInterface_canSeek_get
-    if _newclass:
-        canSeek = _swig_property(_nitropy.nrt_IIOInterface_canSeek_get, _nitropy.nrt_IIOInterface_canSeek_set)
-    __swig_setmethods__["seek"] = _nitropy.nrt_IIOInterface_seek_set
-    __swig_getmethods__["seek"] = _nitropy.nrt_IIOInterface_seek_get
-    if _newclass:
-        seek = _swig_property(_nitropy.nrt_IIOInterface_seek_get, _nitropy.nrt_IIOInterface_seek_set)
-    __swig_setmethods__["tell"] = _nitropy.nrt_IIOInterface_tell_set
-    __swig_getmethods__["tell"] = _nitropy.nrt_IIOInterface_tell_get
-    if _newclass:
-        tell = _swig_property(_nitropy.nrt_IIOInterface_tell_get, _nitropy.nrt_IIOInterface_tell_set)
-    __swig_setmethods__["getSize"] = _nitropy.nrt_IIOInterface_getSize_set
-    __swig_getmethods__["getSize"] = _nitropy.nrt_IIOInterface_getSize_get
-    if _newclass:
-        getSize = _swig_property(_nitropy.nrt_IIOInterface_getSize_get, _nitropy.nrt_IIOInterface_getSize_set)
-    __swig_setmethods__["getMode"] = _nitropy.nrt_IIOInterface_getMode_set
-    __swig_getmethods__["getMode"] = _nitropy.nrt_IIOInterface_getMode_get
-    if _newclass:
-        getMode = _swig_property(_nitropy.nrt_IIOInterface_getMode_get, _nitropy.nrt_IIOInterface_getMode_set)
-    __swig_setmethods__["close"] = _nitropy.nrt_IIOInterface_close_set
-    __swig_getmethods__["close"] = _nitropy.nrt_IIOInterface_close_get
-    if _newclass:
-        close = _swig_property(_nitropy.nrt_IIOInterface_close_get, _nitropy.nrt_IIOInterface_close_set)
-    __swig_setmethods__["destruct"] = _nitropy.nrt_IIOInterface_destruct_set
-    __swig_getmethods__["destruct"] = _nitropy.nrt_IIOInterface_destruct_get
-    if _newclass:
-        destruct = _swig_property(_nitropy.nrt_IIOInterface_destruct_get, _nitropy.nrt_IIOInterface_destruct_set)
+    read = property(_nitropy.nrt_IIOInterface_read_get, _nitropy.nrt_IIOInterface_read_set)
+    write = property(_nitropy.nrt_IIOInterface_write_get, _nitropy.nrt_IIOInterface_write_set)
+    canSeek = property(_nitropy.nrt_IIOInterface_canSeek_get, _nitropy.nrt_IIOInterface_canSeek_set)
+    seek = property(_nitropy.nrt_IIOInterface_seek_get, _nitropy.nrt_IIOInterface_seek_set)
+    tell = property(_nitropy.nrt_IIOInterface_tell_get, _nitropy.nrt_IIOInterface_tell_set)
+    getSize = property(_nitropy.nrt_IIOInterface_getSize_get, _nitropy.nrt_IIOInterface_getSize_set)
+    getMode = property(_nitropy.nrt_IIOInterface_getMode_get, _nitropy.nrt_IIOInterface_getMode_set)
+    close = property(_nitropy.nrt_IIOInterface_close_get, _nitropy.nrt_IIOInterface_close_set)
+    destruct = property(_nitropy.nrt_IIOInterface_destruct_get, _nitropy.nrt_IIOInterface_destruct_set)
 
     def __init__(self):
-        this = _nitropy.new_nrt_IIOInterface()
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _nitropy.nrt_IIOInterface_swiginit(self, _nitropy.new_nrt_IIOInterface())
     __swig_destroy__ = _nitropy.delete_nrt_IIOInterface
-    __del__ = lambda self: None
-nrt_IIOInterface_swigregister = _nitropy.nrt_IIOInterface_swigregister
-nrt_IIOInterface_swigregister(nrt_IIOInterface)
-
-class nrt_IOInterface(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_IOInterface, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nrt_IOInterface, name)
+
+# Register nrt_IIOInterface in _nitropy:
+_nitropy.nrt_IIOInterface_swigregister(nrt_IIOInterface)
+
+class nrt_IOInterface(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
     __repr__ = _swig_repr
-    __swig_setmethods__["data"] = _nitropy.nrt_IOInterface_data_set
-    __swig_getmethods__["data"] = _nitropy.nrt_IOInterface_data_get
-    if _newclass:
-        data = _swig_property(_nitropy.nrt_IOInterface_data_get, _nitropy.nrt_IOInterface_data_set)
-    __swig_setmethods__["iface"] = _nitropy.nrt_IOInterface_iface_set
-    __swig_getmethods__["iface"] = _nitropy.nrt_IOInterface_iface_get
-    if _newclass:
-        iface = _swig_property(_nitropy.nrt_IOInterface_iface_get, _nitropy.nrt_IOInterface_iface_set)
+    data = property(_nitropy.nrt_IOInterface_data_get, _nitropy.nrt_IOInterface_data_set)
+    iface = property(_nitropy.nrt_IOInterface_iface_get, _nitropy.nrt_IOInterface_iface_set)
 
     def __init__(self):
-        this = _nitropy.new_nrt_IOInterface()
-        try:
-            self.this.append(this)
-        except __builtin__.Exception:
-            self.this = this
+        _nitropy.nrt_IOInterface_swiginit(self, _nitropy.new_nrt_IOInterface())
     __swig_destroy__ = _nitropy.delete_nrt_IOInterface
-    __del__ = lambda self: None
-nrt_IOInterface_swigregister = _nitropy.nrt_IOInterface_swigregister
-nrt_IOInterface_swigregister(nrt_IOInterface)
 
+# Register nrt_IOInterface in _nitropy:
+_nitropy.nrt_IOInterface_swigregister(nrt_IOInterface)
 
-def nrt_IOInterface_read(arg1: 'nrt_IOInterface', buf: 'void *', size: 'size_t', error: 'nrt_Error') -> "bool":
+
+def nrt_IOInterface_read(arg1: "nrt_IOInterface", buf: "void *", size: "size_t", error: "nrt_Error") -> "bool":
     return _nitropy.nrt_IOInterface_read(arg1, buf, size, error)
-nrt_IOInterface_read = _nitropy.nrt_IOInterface_read
 
-def nrt_IOInterface_write(io: 'nrt_IOInterface', buf: 'void const *', size: 'size_t', error: 'nrt_Error') -> "bool":
+def nrt_IOInterface_write(io: "nrt_IOInterface", buf: "void const *", size: "size_t", error: "nrt_Error") -> "bool":
     return _nitropy.nrt_IOInterface_write(io, buf, size, error)
-nrt_IOInterface_write = _nitropy.nrt_IOInterface_write
 
-def nrt_IOInterface_canSeek(io: 'nrt_IOInterface', arg2: 'nrt_Error') -> "bool":
+def nrt_IOInterface_canSeek(io: "nrt_IOInterface", arg2: "nrt_Error") -> "bool":
     return _nitropy.nrt_IOInterface_canSeek(io, arg2)
-nrt_IOInterface_canSeek = _nitropy.nrt_IOInterface_canSeek
 
-def nrt_IOInterface_seek(io: 'nrt_IOInterface', offset: 'nrt_Off', whence: 'int', error: 'nrt_Error') -> "nrt_Off":
+def nrt_IOInterface_seek(io: "nrt_IOInterface", offset: "nrt_Off", whence: "int", error: "nrt_Error") -> "nrt_Off":
     return _nitropy.nrt_IOInterface_seek(io, offset, whence, error)
-nrt_IOInterface_seek = _nitropy.nrt_IOInterface_seek
 
-def nrt_IOInterface_tell(io: 'nrt_IOInterface', error: 'nrt_Error') -> "nrt_Off":
+def nrt_IOInterface_tell(io: "nrt_IOInterface", error: "nrt_Error") -> "nrt_Off":
     return _nitropy.nrt_IOInterface_tell(io, error)
-nrt_IOInterface_tell = _nitropy.nrt_IOInterface_tell
 
-def nrt_IOInterface_getSize(io: 'nrt_IOInterface', error: 'nrt_Error') -> "nrt_Off":
+def nrt_IOInterface_getSize(io: "nrt_IOInterface", error: "nrt_Error") -> "nrt_Off":
     return _nitropy.nrt_IOInterface_getSize(io, error)
-nrt_IOInterface_getSize = _nitropy.nrt_IOInterface_getSize
 
-def nrt_IOInterface_getMode(io: 'nrt_IOInterface', error: 'nrt_Error') -> "int":
+def nrt_IOInterface_getMode(io: "nrt_IOInterface", error: "nrt_Error") -> "int":
     return _nitropy.nrt_IOInterface_getMode(io, error)
-nrt_IOInterface_getMode = _nitropy.nrt_IOInterface_getMode
 
-def nrt_IOInterface_close(io: 'nrt_IOInterface', error: 'nrt_Error') -> "bool":
+def nrt_IOInterface_close(io: "nrt_IOInterface", error: "nrt_Error") -> "bool":
     return _nitropy.nrt_IOInterface_close(io, error)
-nrt_IOInterface_close = _nitropy.nrt_IOInterface_close
 
-def nrt_IOInterface_destruct(io: 'nrt_IOInterface **') -> "void":
+def nrt_IOInterface_destruct(io: "nrt_IOInterface **") -> "void":
     return _nitropy.nrt_IOInterface_destruct(io)
-nrt_IOInterface_destruct = _nitropy.nrt_IOInterface_destruct
 
-def nrt_IOHandleAdapter_construct(handle: 'nrt_IOHandle', accessMode: 'int', error: 'nrt_Error') -> "nrt_IOInterface *":
+def nrt_IOHandleAdapter_construct(handle: "nrt_IOHandle", accessMode: "int", error: "nrt_Error") -> "nrt_IOInterface *":
     return _nitropy.nrt_IOHandleAdapter_construct(handle, accessMode, error)
-nrt_IOHandleAdapter_construct = _nitropy.nrt_IOHandleAdapter_construct
 
-def nrt_IOHandleAdapter_open(fname: 'char const *', accessFlags: 'int', creationFlags: 'int', error: 'nrt_Error') -> "nrt_IOInterface *":
+def nrt_IOHandleAdapter_open(fname: "char const *", accessFlags: "int", creationFlags: "int", error: "nrt_Error") -> "nrt_IOInterface *":
     return _nitropy.nrt_IOHandleAdapter_open(fname, accessFlags, creationFlags, error)
-nrt_IOHandleAdapter_open = _nitropy.nrt_IOHandleAdapter_open
 
-def nrt_BufferAdapter_construct(buf: 'char *', size: 'size_t', ownBuf: 'bool', error: 'nrt_Error') -> "nrt_IOInterface *":
+def nrt_BufferAdapter_construct(buf: "char const *", size: "size_t", ownBuf: "bool", error: "nrt_Error") -> "nrt_IOInterface *":
     return _nitropy.nrt_BufferAdapter_construct(buf, size, ownBuf, error)
-nrt_BufferAdapter_construct = _nitropy.nrt_BufferAdapter_construct
 
-def nitf_strdup(src: 'char const *') -> "char *":
+def nitf_strdup(src: "char const *") -> "char *":
     return _nitropy.nitf_strdup(src)
-nitf_strdup = _nitropy.nitf_strdup
 NITF_MAX_PATH = _nitropy.NITF_MAX_PATH
 NITF_DEFAULT_PERM = _nitropy.NITF_DEFAULT_PERM
 NITF_INVALID_HANDLE_VALUE = _nitropy.NITF_INVALID_HANDLE_VALUE
@@ -382,261 +249,180 @@ NITF_MAX_READ_ATTEMPTS = _nitropy.NITF_MAX_READ_ATTEMPTS
 NITF_DATE_FORMAT_20 = _nitropy.NITF_DATE_FORMAT_20
 NITF_DATE_FORMAT_21 = _nitropy.NITF_DATE_FORMAT_21
 NITF_TRE_HASH_SIZE = _nitropy.NITF_TRE_HASH_SIZE
-HAVE_CLOCK_GETTIME = _nitropy.HAVE_CLOCK_GETTIME
-HAVE_SYS_TIME_H = _nitropy.HAVE_SYS_TIME_H
 NRT_LIB_VERSION = _nitropy.NRT_LIB_VERSION
 NITF_LIB_VERSION = _nitropy.NITF_LIB_VERSION
 NITF_COMPRESSION_HASH_SIZE = _nitropy.NITF_COMPRESSION_HASH_SIZE
 NITF_DECOMPRESSION_HASH_SIZE = _nitropy.NITF_DECOMPRESSION_HASH_SIZE
 NITF_PLUGIN_PATH = _nitropy.NITF_PLUGIN_PATH
-class nitf_PluginRegistry(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_PluginRegistry, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_PluginRegistry, name)
+class nitf_PluginRegistry(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["path"] = _nitropy.nitf_PluginRegistry_path_set
-    __swig_getmethods__["path"] = _nitropy.nitf_PluginRegistry_path_get
-    if _newclass:
-        path = _swig_property(_nitropy.nitf_PluginRegistry_path_get, _nitropy.nitf_PluginRegistry_path_set)
-    __swig_setmethods__["treHandlers"] = _nitropy.nitf_PluginRegistry_treHandlers_set
-    __swig_getmethods__["treHandlers"] = _nitropy.nitf_PluginRegistry_treHandlers_get
-    if _newclass:
-        treHandlers = _swig_property(_nitropy.nitf_PluginRegistry_treHandlers_get, _nitropy.nitf_PluginRegistry_treHandlers_set)
-    __swig_setmethods__["compressionHandlers"] = _nitropy.nitf_PluginRegistry_compressionHandlers_set
-    __swig_getmethods__["compressionHandlers"] = _nitropy.nitf_PluginRegistry_compressionHandlers_get
-    if _newclass:
-        compressionHandlers = _swig_property(_nitropy.nitf_PluginRegistry_compressionHandlers_get, _nitropy.nitf_PluginRegistry_compressionHandlers_set)
-    __swig_setmethods__["decompressionHandlers"] = _nitropy.nitf_PluginRegistry_decompressionHandlers_set
-    __swig_getmethods__["decompressionHandlers"] = _nitropy.nitf_PluginRegistry_decompressionHandlers_get
-    if _newclass:
-        decompressionHandlers = _swig_property(_nitropy.nitf_PluginRegistry_decompressionHandlers_get, _nitropy.nitf_PluginRegistry_decompressionHandlers_set)
-    __swig_setmethods__["dsos"] = _nitropy.nitf_PluginRegistry_dsos_set
-    __swig_getmethods__["dsos"] = _nitropy.nitf_PluginRegistry_dsos_get
-    if _newclass:
-        dsos = _swig_property(_nitropy.nitf_PluginRegistry_dsos_get, _nitropy.nitf_PluginRegistry_dsos_set)
+    path = property(_nitropy.nitf_PluginRegistry_path_get, _nitropy.nitf_PluginRegistry_path_set)
+    treHandlers = property(_nitropy.nitf_PluginRegistry_treHandlers_get, _nitropy.nitf_PluginRegistry_treHandlers_set)
+    compressionHandlers = property(_nitropy.nitf_PluginRegistry_compressionHandlers_get, _nitropy.nitf_PluginRegistry_compressionHandlers_set)
+    decompressionHandlers = property(_nitropy.nitf_PluginRegistry_decompressionHandlers_get, _nitropy.nitf_PluginRegistry_decompressionHandlers_set)
+    dsos = property(_nitropy.nitf_PluginRegistry_dsos_get, _nitropy.nitf_PluginRegistry_dsos_set)
     __swig_destroy__ = _nitropy.delete_nitf_PluginRegistry
-    __del__ = lambda self: None
-nitf_PluginRegistry_swigregister = _nitropy.nitf_PluginRegistry_swigregister
-nitf_PluginRegistry_swigregister(nitf_PluginRegistry)
+
+# Register nitf_PluginRegistry in _nitropy:
+_nitropy.nitf_PluginRegistry_swigregister(nitf_PluginRegistry)
 
 
-def nitf_PluginRegistry_getInstance(error: 'nrt_Error') -> "nitf_PluginRegistry *":
+def nitf_PluginRegistry_getInstance(error: "nrt_Error") -> "nitf_PluginRegistry *":
     return _nitropy.nitf_PluginRegistry_getInstance(error)
-nitf_PluginRegistry_getInstance = _nitropy.nitf_PluginRegistry_getInstance
 
-def nitf_PluginRegistry_load(reg: 'nitf_PluginRegistry', error: 'nrt_Error') -> "bool":
+def nitf_PluginRegistry_getInstanceLog(error: "nrt_Error", log: "FILE *") -> "nitf_PluginRegistry *":
+    return _nitropy.nitf_PluginRegistry_getInstanceLog(error, log)
+
+def nitf_PluginRegistry_load(reg: "nitf_PluginRegistry", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_PluginRegistry_load(reg, error)
-nitf_PluginRegistry_load = _nitropy.nitf_PluginRegistry_load
 
-def nitf_PluginRegistry_registerTREHandler(init: 'NITF_PLUGIN_INIT_FUNCTION', handler: 'NITF_PLUGIN_TRE_HANDLER_FUNCTION', error: 'nrt_Error') -> "bool":
+def nitf_PluginRegistry_registerTREHandler(init: "NITF_PLUGIN_INIT_FUNCTION", handler: "NITF_PLUGIN_TRE_HANDLER_FUNCTION", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_PluginRegistry_registerTREHandler(init, handler, error)
-nitf_PluginRegistry_registerTREHandler = _nitropy.nitf_PluginRegistry_registerTREHandler
 
-def nitf_PluginRegistry_registerCompressionHandler(init: 'NITF_PLUGIN_INIT_FUNCTION', handler: 'NITF_PLUGIN_COMPRESSION_CONSTRUCT_FUNCTION', error: 'nrt_Error') -> "bool":
+def nitf_PluginRegistry_registerCompressionHandler(init: "NITF_PLUGIN_INIT_FUNCTION", handler: "NITF_PLUGIN_COMPRESSION_CONSTRUCT_FUNCTION", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_PluginRegistry_registerCompressionHandler(init, handler, error)
-nitf_PluginRegistry_registerCompressionHandler = _nitropy.nitf_PluginRegistry_registerCompressionHandler
 
-def nitf_PluginRegistry_registerDecompressionHandler(init: 'NITF_PLUGIN_INIT_FUNCTION', handler: 'NITF_PLUGIN_COMPRESSION_CONSTRUCT_FUNCTION', error: 'nrt_Error') -> "bool":
+def nitf_PluginRegistry_registerDecompressionHandler(init: "NITF_PLUGIN_INIT_FUNCTION", handler: "NITF_PLUGIN_COMPRESSION_CONSTRUCT_FUNCTION", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_PluginRegistry_registerDecompressionHandler(init, handler, error)
-nitf_PluginRegistry_registerDecompressionHandler = _nitropy.nitf_PluginRegistry_registerDecompressionHandler
 
-def nitf_PluginRegistry_loadDir(dirName: 'char const *', error: 'nrt_Error') -> "bool":
+def nitf_PluginRegistry_loadDir(dirName: "char const *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_PluginRegistry_loadDir(dirName, error)
-nitf_PluginRegistry_loadDir = _nitropy.nitf_PluginRegistry_loadDir
 
-def nitf_PluginRegistry_loadPlugin(fullPathName: 'char const *', error: 'nrt_Error') -> "bool":
+def nitf_PluginRegistry_loadPlugin(fullPathName: "char const *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_PluginRegistry_loadPlugin(fullPathName, error)
-nitf_PluginRegistry_loadPlugin = _nitropy.nitf_PluginRegistry_loadPlugin
 
-def nitf_PluginRegistry_TREHandlerExists(ident: 'char const *') -> "bool":
+def nitf_PluginRegistry_TREHandlerExists(ident: "char const *") -> "bool":
     return _nitropy.nitf_PluginRegistry_TREHandlerExists(ident)
-nitf_PluginRegistry_TREHandlerExists = _nitropy.nitf_PluginRegistry_TREHandlerExists
 
-def nitf_PluginRegistry_compressionHandlerExists(ident: 'char const *') -> "bool":
+def nitf_PluginRegistry_TREHandlerExistsLog(ident: "char const *", log: "FILE *") -> "bool":
+    return _nitropy.nitf_PluginRegistry_TREHandlerExistsLog(ident, log)
+
+def nitf_PluginRegistry_compressionHandlerExists(ident: "char const *") -> "bool":
     return _nitropy.nitf_PluginRegistry_compressionHandlerExists(ident)
-nitf_PluginRegistry_compressionHandlerExists = _nitropy.nitf_PluginRegistry_compressionHandlerExists
 
-def nitf_PluginRegistry_decompressionHandlerExists(ident: 'char const *') -> "bool":
+def nitf_PluginRegistry_decompressionHandlerExists(ident: "char const *") -> "bool":
     return _nitropy.nitf_PluginRegistry_decompressionHandlerExists(ident)
-nitf_PluginRegistry_decompressionHandlerExists = _nitropy.nitf_PluginRegistry_decompressionHandlerExists
 
-def nitf_PluginRegistry_unload(reg: 'nitf_PluginRegistry', error: 'nrt_Error') -> "bool":
+def nitf_PluginRegistry_unload(reg: "nitf_PluginRegistry", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_PluginRegistry_unload(reg, error)
-nitf_PluginRegistry_unload = _nitropy.nitf_PluginRegistry_unload
 
-def nitf_PluginRegistry_retrieveTREHandler(reg: 'nitf_PluginRegistry', ident: 'char const *', hadError: 'int *', error: 'nrt_Error') -> "nitf_TREHandler *":
+def nitf_PluginRegistry_retrieveTREHandler(reg: "nitf_PluginRegistry", ident: "char const *", hadError: "int *", error: "nrt_Error") -> "nitf_TREHandler *":
     return _nitropy.nitf_PluginRegistry_retrieveTREHandler(reg, ident, hadError, error)
-nitf_PluginRegistry_retrieveTREHandler = _nitropy.nitf_PluginRegistry_retrieveTREHandler
 
-def nitf_PluginRegistry_retrieveDecompConstructor(reg: 'nitf_PluginRegistry', ident: 'char const *', hadError: 'int *', error: 'nrt_Error') -> "NITF_PLUGIN_DECOMPRESSION_CONSTRUCT_FUNCTION":
+def nitf_PluginRegistry_retrieveDecompConstructor(reg: "nitf_PluginRegistry", ident: "char const *", hadError: "int *", error: "nrt_Error") -> "NITF_PLUGIN_DECOMPRESSION_CONSTRUCT_FUNCTION":
     return _nitropy.nitf_PluginRegistry_retrieveDecompConstructor(reg, ident, hadError, error)
-nitf_PluginRegistry_retrieveDecompConstructor = _nitropy.nitf_PluginRegistry_retrieveDecompConstructor
 
-def nitf_PluginRegistry_retrieveCompConstructor(reg: 'nitf_PluginRegistry', ident: 'char const *', hadError: 'int *', error: 'nrt_Error') -> "NITF_PLUGIN_COMPRESSION_CONSTRUCT_FUNCTION":
+def nitf_PluginRegistry_retrieveCompConstructor(reg: "nitf_PluginRegistry", ident: "char const *", hadError: "int *", error: "nrt_Error") -> "NITF_PLUGIN_COMPRESSION_CONSTRUCT_FUNCTION":
     return _nitropy.nitf_PluginRegistry_retrieveCompConstructor(reg, ident, hadError, error)
-nitf_PluginRegistry_retrieveCompConstructor = _nitropy.nitf_PluginRegistry_retrieveCompConstructor
 
-def nitf_PluginRegistry_retrieveCompInterface(comp: 'char const *', error: 'nrt_Error') -> "nitf_CompressionInterface *":
+def nitf_PluginRegistry_retrieveCompInterface(comp: "char const *", error: "nrt_Error") -> "nitf_CompressionInterface *":
     return _nitropy.nitf_PluginRegistry_retrieveCompInterface(comp, error)
-nitf_PluginRegistry_retrieveCompInterface = _nitropy.nitf_PluginRegistry_retrieveCompInterface
-class nitf_Record(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_Record, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_Record, name)
+class nitf_Record(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["header"] = _nitropy.nitf_Record_header_set
-    __swig_getmethods__["header"] = _nitropy.nitf_Record_header_get
-    if _newclass:
-        header = _swig_property(_nitropy.nitf_Record_header_get, _nitropy.nitf_Record_header_set)
-    __swig_setmethods__["images"] = _nitropy.nitf_Record_images_set
-    __swig_getmethods__["images"] = _nitropy.nitf_Record_images_get
-    if _newclass:
-        images = _swig_property(_nitropy.nitf_Record_images_get, _nitropy.nitf_Record_images_set)
-    __swig_setmethods__["graphics"] = _nitropy.nitf_Record_graphics_set
-    __swig_getmethods__["graphics"] = _nitropy.nitf_Record_graphics_get
-    if _newclass:
-        graphics = _swig_property(_nitropy.nitf_Record_graphics_get, _nitropy.nitf_Record_graphics_set)
-    __swig_setmethods__["labels"] = _nitropy.nitf_Record_labels_set
-    __swig_getmethods__["labels"] = _nitropy.nitf_Record_labels_get
-    if _newclass:
-        labels = _swig_property(_nitropy.nitf_Record_labels_get, _nitropy.nitf_Record_labels_set)
-    __swig_setmethods__["texts"] = _nitropy.nitf_Record_texts_set
-    __swig_getmethods__["texts"] = _nitropy.nitf_Record_texts_get
-    if _newclass:
-        texts = _swig_property(_nitropy.nitf_Record_texts_get, _nitropy.nitf_Record_texts_set)
-    __swig_setmethods__["dataExtensions"] = _nitropy.nitf_Record_dataExtensions_set
-    __swig_getmethods__["dataExtensions"] = _nitropy.nitf_Record_dataExtensions_get
-    if _newclass:
-        dataExtensions = _swig_property(_nitropy.nitf_Record_dataExtensions_get, _nitropy.nitf_Record_dataExtensions_set)
-    __swig_setmethods__["reservedExtensions"] = _nitropy.nitf_Record_reservedExtensions_set
-    __swig_getmethods__["reservedExtensions"] = _nitropy.nitf_Record_reservedExtensions_get
-    if _newclass:
-        reservedExtensions = _swig_property(_nitropy.nitf_Record_reservedExtensions_get, _nitropy.nitf_Record_reservedExtensions_set)
+    header = property(_nitropy.nitf_Record_header_get, _nitropy.nitf_Record_header_set)
+    images = property(_nitropy.nitf_Record_images_get, _nitropy.nitf_Record_images_set)
+    graphics = property(_nitropy.nitf_Record_graphics_get, _nitropy.nitf_Record_graphics_set)
+    labels = property(_nitropy.nitf_Record_labels_get, _nitropy.nitf_Record_labels_set)
+    texts = property(_nitropy.nitf_Record_texts_get, _nitropy.nitf_Record_texts_set)
+    dataExtensions = property(_nitropy.nitf_Record_dataExtensions_get, _nitropy.nitf_Record_dataExtensions_set)
+    reservedExtensions = property(_nitropy.nitf_Record_reservedExtensions_get, _nitropy.nitf_Record_reservedExtensions_set)
     __swig_destroy__ = _nitropy.delete_nitf_Record
-    __del__ = lambda self: None
-nitf_Record_swigregister = _nitropy.nitf_Record_swigregister
-nitf_Record_swigregister(nitf_Record)
 
+# Register nitf_Record in _nitropy:
+_nitropy.nitf_Record_swigregister(nitf_Record)
 
-def nitf_Record_construct(version: 'nitf_Version', error: 'nrt_Error') -> "nitf_Record *":
+
+def nitf_Record_construct(version: "nitf_Version", error: "nrt_Error") -> "nitf_Record *":
     return _nitropy.nitf_Record_construct(version, error)
-nitf_Record_construct = _nitropy.nitf_Record_construct
 
-def nitf_Record_clone(source: 'nitf_Record', error: 'nrt_Error') -> "nitf_Record *":
+def nitf_Record_clone(source: "nitf_Record", error: "nrt_Error") -> "nitf_Record *":
     return _nitropy.nitf_Record_clone(source, error)
-nitf_Record_clone = _nitropy.nitf_Record_clone
 
-def nitf_Record_destruct(record: 'nitf_Record **') -> "void":
+def nitf_Record_destruct(record: "nitf_Record **") -> "void":
     return _nitropy.nitf_Record_destruct(record)
-nitf_Record_destruct = _nitropy.nitf_Record_destruct
 
-def nitf_Record_getVersion(record: 'nitf_Record') -> "nitf_Version":
+def nitf_Record_getVersion(record: "nitf_Record") -> "nitf_Version":
     return _nitropy.nitf_Record_getVersion(record)
-nitf_Record_getVersion = _nitropy.nitf_Record_getVersion
 
-def nitf_Record_getNumImages(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
+def nitf_Record_getNumImages(record: "nitf_Record", error: "nrt_Error") -> "uint32_t":
     return _nitropy.nitf_Record_getNumImages(record, error)
-nitf_Record_getNumImages = _nitropy.nitf_Record_getNumImages
 
-def nitf_Record_newImageSegment(record: 'nitf_Record', error: 'nrt_Error') -> "nitf_ImageSegment *":
+def nitf_Record_newImageSegment(record: "nitf_Record", error: "nrt_Error") -> "nitf_ImageSegment *":
     return _nitropy.nitf_Record_newImageSegment(record, error)
-nitf_Record_newImageSegment = _nitropy.nitf_Record_newImageSegment
 
-def nitf_Record_getNumGraphics(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
+def nitf_Record_getNumGraphics(record: "nitf_Record", error: "nrt_Error") -> "uint32_t":
     return _nitropy.nitf_Record_getNumGraphics(record, error)
-nitf_Record_getNumGraphics = _nitropy.nitf_Record_getNumGraphics
 
-def nitf_Record_newGraphicSegment(record: 'nitf_Record', error: 'nrt_Error') -> "nitf_GraphicSegment *":
+def nitf_Record_newGraphicSegment(record: "nitf_Record", error: "nrt_Error") -> "nitf_GraphicSegment *":
     return _nitropy.nitf_Record_newGraphicSegment(record, error)
-nitf_Record_newGraphicSegment = _nitropy.nitf_Record_newGraphicSegment
 
-def nitf_Record_getNumTexts(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
+def nitf_Record_getNumTexts(record: "nitf_Record", error: "nrt_Error") -> "uint32_t":
     return _nitropy.nitf_Record_getNumTexts(record, error)
-nitf_Record_getNumTexts = _nitropy.nitf_Record_getNumTexts
 
-def nitf_Record_newTextSegment(record: 'nitf_Record', error: 'nrt_Error') -> "nitf_TextSegment *":
+def nitf_Record_newTextSegment(record: "nitf_Record", error: "nrt_Error") -> "nitf_TextSegment *":
     return _nitropy.nitf_Record_newTextSegment(record, error)
-nitf_Record_newTextSegment = _nitropy.nitf_Record_newTextSegment
 
-def nitf_Record_getNumDataExtensions(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
+def nitf_Record_getNumDataExtensions(record: "nitf_Record", error: "nrt_Error") -> "uint32_t":
     return _nitropy.nitf_Record_getNumDataExtensions(record, error)
-nitf_Record_getNumDataExtensions = _nitropy.nitf_Record_getNumDataExtensions
 
-def nitf_Record_newDataExtensionSegment(record: 'nitf_Record', error: 'nrt_Error') -> "nitf_DESegment *":
+def nitf_Record_newDataExtensionSegment(record: "nitf_Record", error: "nrt_Error") -> "nitf_DESegment *":
     return _nitropy.nitf_Record_newDataExtensionSegment(record, error)
-nitf_Record_newDataExtensionSegment = _nitropy.nitf_Record_newDataExtensionSegment
 
-def nitf_Record_removeImageSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_removeImageSegment(record: "nitf_Record", segmentNumber: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_removeImageSegment(record, segmentNumber, error)
-nitf_Record_removeImageSegment = _nitropy.nitf_Record_removeImageSegment
 
-def nitf_Record_removeGraphicSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_removeGraphicSegment(record: "nitf_Record", segmentNumber: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_removeGraphicSegment(record, segmentNumber, error)
-nitf_Record_removeGraphicSegment = _nitropy.nitf_Record_removeGraphicSegment
 
-def nitf_Record_getNumLabels(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
+def nitf_Record_getNumLabels(record: "nitf_Record", error: "nrt_Error") -> "uint32_t":
     return _nitropy.nitf_Record_getNumLabels(record, error)
-nitf_Record_getNumLabels = _nitropy.nitf_Record_getNumLabels
 
-def nitf_Record_removeLabelSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_removeLabelSegment(record: "nitf_Record", segmentNumber: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_removeLabelSegment(record, segmentNumber, error)
-nitf_Record_removeLabelSegment = _nitropy.nitf_Record_removeLabelSegment
 
-def nitf_Record_removeTextSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_removeTextSegment(record: "nitf_Record", segmentNumber: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_removeTextSegment(record, segmentNumber, error)
-nitf_Record_removeTextSegment = _nitropy.nitf_Record_removeTextSegment
 
-def nitf_Record_removeDataExtensionSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_removeDataExtensionSegment(record: "nitf_Record", segmentNumber: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_removeDataExtensionSegment(record, segmentNumber, error)
-nitf_Record_removeDataExtensionSegment = _nitropy.nitf_Record_removeDataExtensionSegment
 
-def nitf_Record_getNumReservedExtensions(record: 'nitf_Record', error: 'nrt_Error') -> "uint32_t":
+def nitf_Record_getNumReservedExtensions(record: "nitf_Record", error: "nrt_Error") -> "uint32_t":
     return _nitropy.nitf_Record_getNumReservedExtensions(record, error)
-nitf_Record_getNumReservedExtensions = _nitropy.nitf_Record_getNumReservedExtensions
 
-def nitf_Record_removeReservedExtensionSegment(record: 'nitf_Record', segmentNumber: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_removeReservedExtensionSegment(record: "nitf_Record", segmentNumber: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_removeReservedExtensionSegment(record, segmentNumber, error)
-nitf_Record_removeReservedExtensionSegment = _nitropy.nitf_Record_removeReservedExtensionSegment
 
-def nitf_Record_moveImageSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_moveImageSegment(record: "nitf_Record", oldIndex: "uint32_t", newIndex: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_moveImageSegment(record, oldIndex, newIndex, error)
-nitf_Record_moveImageSegment = _nitropy.nitf_Record_moveImageSegment
 
-def nitf_Record_moveGraphicSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_moveGraphicSegment(record: "nitf_Record", oldIndex: "uint32_t", newIndex: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_moveGraphicSegment(record, oldIndex, newIndex, error)
-nitf_Record_moveGraphicSegment = _nitropy.nitf_Record_moveGraphicSegment
 
-def nitf_Record_moveLabelSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_moveLabelSegment(record: "nitf_Record", oldIndex: "uint32_t", newIndex: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_moveLabelSegment(record, oldIndex, newIndex, error)
-nitf_Record_moveLabelSegment = _nitropy.nitf_Record_moveLabelSegment
 
-def nitf_Record_moveTextSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_moveTextSegment(record: "nitf_Record", oldIndex: "uint32_t", newIndex: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_moveTextSegment(record, oldIndex, newIndex, error)
-nitf_Record_moveTextSegment = _nitropy.nitf_Record_moveTextSegment
 
-def nitf_Record_moveDataExtensionSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_moveDataExtensionSegment(record: "nitf_Record", oldIndex: "uint32_t", newIndex: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_moveDataExtensionSegment(record, oldIndex, newIndex, error)
-nitf_Record_moveDataExtensionSegment = _nitropy.nitf_Record_moveDataExtensionSegment
 
-def nitf_Record_moveReservedExtensionSegment(record: 'nitf_Record', oldIndex: 'uint32_t', newIndex: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Record_moveReservedExtensionSegment(record: "nitf_Record", oldIndex: "uint32_t", newIndex: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_moveReservedExtensionSegment(record, oldIndex, newIndex, error)
-nitf_Record_moveReservedExtensionSegment = _nitropy.nitf_Record_moveReservedExtensionSegment
 
-def nitf_Record_mergeTREs(record: 'nitf_Record', error: 'nrt_Error') -> "bool":
+def nitf_Record_mergeTREs(record: "nitf_Record", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_mergeTREs(record, error)
-nitf_Record_mergeTREs = _nitropy.nitf_Record_mergeTREs
 
-def nitf_Record_unmergeTREs(record: 'nitf_Record', error: 'nrt_Error') -> "bool":
+def nitf_Record_unmergeTREs(record: "nitf_Record", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Record_unmergeTREs(record, error)
-nitf_Record_unmergeTREs = _nitropy.nitf_Record_unmergeTREs
 NITF_CONV_UINT = _nitropy.NITF_CONV_UINT
 NITF_CONV_INT = _nitropy.NITF_CONV_INT
 NITF_CONV_REAL = _nitropy.NITF_CONV_REAL
@@ -649,108 +435,75 @@ NITF_INT64_SZ = _nitropy.NITF_INT64_SZ
 NITF_BCS_A = _nitropy.NITF_BCS_A
 NITF_BCS_N = _nitropy.NITF_BCS_N
 NITF_BINARY = _nitropy.NITF_BINARY
-class nitf_Field(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_Field, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_Field, name)
+class nitf_Field(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["type"] = _nitropy.nitf_Field_type_set
-    __swig_getmethods__["type"] = _nitropy.nitf_Field_type_get
-    if _newclass:
-        type = _swig_property(_nitropy.nitf_Field_type_get, _nitropy.nitf_Field_type_set)
-    __swig_setmethods__["raw"] = _nitropy.nitf_Field_raw_set
-    __swig_getmethods__["raw"] = _nitropy.nitf_Field_raw_get
-    if _newclass:
-        raw = _swig_property(_nitropy.nitf_Field_raw_get, _nitropy.nitf_Field_raw_set)
-    __swig_setmethods__["length"] = _nitropy.nitf_Field_length_set
-    __swig_getmethods__["length"] = _nitropy.nitf_Field_length_get
-    if _newclass:
-        length = _swig_property(_nitropy.nitf_Field_length_get, _nitropy.nitf_Field_length_set)
-    __swig_setmethods__["resizable"] = _nitropy.nitf_Field_resizable_set
-    __swig_getmethods__["resizable"] = _nitropy.nitf_Field_resizable_get
-    if _newclass:
-        resizable = _swig_property(_nitropy.nitf_Field_resizable_get, _nitropy.nitf_Field_resizable_set)
+    type = property(_nitropy.nitf_Field_type_get, _nitropy.nitf_Field_type_set)
+    raw = property(_nitropy.nitf_Field_raw_get, _nitropy.nitf_Field_raw_set)
+    length = property(_nitropy.nitf_Field_length_get, _nitropy.nitf_Field_length_set)
+    resizable = property(_nitropy.nitf_Field_resizable_get, _nitropy.nitf_Field_resizable_set)
     __swig_destroy__ = _nitropy.delete_nitf_Field
-    __del__ = lambda self: None
-nitf_Field_swigregister = _nitropy.nitf_Field_swigregister
-nitf_Field_swigregister(nitf_Field)
+
+# Register nitf_Field in _nitropy:
+_nitropy.nitf_Field_swigregister(nitf_Field)
 
 
-def nitf_Field_construct(length: 'size_t', type: 'nitf_FieldType', error: 'nrt_Error') -> "nitf_Field *":
+def nitf_Field_construct(length: "size_t", type: "nitf_FieldType", error: "nrt_Error") -> "nitf_Field *":
     return _nitropy.nitf_Field_construct(length, type, error)
-nitf_Field_construct = _nitropy.nitf_Field_construct
 
-def nitf_Field_setRawData(field: 'nitf_Field', data: 'NITF_DATA *', dataLength: 'size_t', error: 'nrt_Error') -> "bool":
+def nitf_Field_setRawData(field: "nitf_Field", data: "NITF_DATA const *", dataLength: "size_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_setRawData(field, data, dataLength, error)
-nitf_Field_setRawData = _nitropy.nitf_Field_setRawData
 
-def nitf_Field_setUint32(field: 'nitf_Field', number: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Field_setUint32(field: "nitf_Field", number: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_setUint32(field, number, error)
-nitf_Field_setUint32 = _nitropy.nitf_Field_setUint32
 
-def nitf_Field_setUint64(field: 'nitf_Field', number: 'uint64_t', error: 'nrt_Error') -> "bool":
+def nitf_Field_setUint64(field: "nitf_Field", number: "uint64_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_setUint64(field, number, error)
-nitf_Field_setUint64 = _nitropy.nitf_Field_setUint64
 
-def nitf_Field_setInt32(field: 'nitf_Field', number: 'int32_t', error: 'nrt_Error') -> "bool":
+def nitf_Field_setInt32(field: "nitf_Field", number: "int32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_setInt32(field, number, error)
-nitf_Field_setInt32 = _nitropy.nitf_Field_setInt32
 
-def nitf_Field_setInt64(field: 'nitf_Field', number: 'int64_t', error: 'nrt_Error') -> "bool":
+def nitf_Field_setInt64(field: "nitf_Field", number: "int64_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_setInt64(field, number, error)
-nitf_Field_setInt64 = _nitropy.nitf_Field_setInt64
 
-def nitf_Field_trimString(str: 'char *') -> "void":
+def nitf_Field_trimString(str: "char *") -> "void":
     return _nitropy.nitf_Field_trimString(str)
-nitf_Field_trimString = _nitropy.nitf_Field_trimString
 
-def nitf_Field_setString(field: 'nitf_Field', str: 'char const *', error: 'nrt_Error') -> "bool":
+def nitf_Field_setString(field: "nitf_Field", str: "char const *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_setString(field, str, error)
-nitf_Field_setString = _nitropy.nitf_Field_setString
 
-def nitf_Field_setDateTime(field: 'nitf_Field', dateTime: 'nitf_DateTime const *', format: 'char const *', error: 'nrt_Error') -> "bool":
+def nitf_Field_setDateTime(field: "nitf_Field", dateTime: "nitf_DateTime const *", format: "char const *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_setDateTime(field, dateTime, format, error)
-nitf_Field_setDateTime = _nitropy.nitf_Field_setDateTime
 
-def nitf_Field_setReal(field: 'nitf_Field', type: 'char const *', plus: 'bool', value: 'double', error: 'nrt_Error') -> "bool":
+def nitf_Field_setReal(field: "nitf_Field", type: "char const *", plus: "bool", value: "double", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_setReal(field, type, plus, value, error)
-nitf_Field_setReal = _nitropy.nitf_Field_setReal
 
-def nitf_Field_destruct(field: 'nitf_Field **') -> "void":
+def nitf_Field_destruct(field: "nitf_Field **") -> "void":
     return _nitropy.nitf_Field_destruct(field)
-nitf_Field_destruct = _nitropy.nitf_Field_destruct
 
-def nitf_Field_clone(source: 'nitf_Field', error: 'nrt_Error') -> "nitf_Field *":
+def nitf_Field_clone(source: "nitf_Field", error: "nrt_Error") -> "nitf_Field *":
     return _nitropy.nitf_Field_clone(source, error)
-nitf_Field_clone = _nitropy.nitf_Field_clone
 
-def nitf_Field_get(field: 'nitf_Field', outValue: 'NITF_DATA *', convType: 'nitf_ConvType', length: 'size_t', error: 'nrt_Error') -> "bool":
+def nitf_Field_get(field: "nitf_Field", outValue: "NITF_DATA *", convType: "nitf_ConvType", length: "size_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_get(field, outValue, convType, length, error)
-nitf_Field_get = _nitropy.nitf_Field_get
 
-def nitf_Field_asDateTime(field: 'nitf_Field', dateFormat: 'char const *', error: 'nrt_Error') -> "nitf_DateTime *":
+def nitf_Field_asDateTime(field: "nitf_Field", dateFormat: "char const *", error: "nrt_Error") -> "nitf_DateTime *":
     return _nitropy.nitf_Field_asDateTime(field, dateFormat, error)
-nitf_Field_asDateTime = _nitropy.nitf_Field_asDateTime
 
-def nitf_Field_resetLength(field: 'nitf_Field', newLength: 'size_t', keepData: 'bool', error: 'nrt_Error') -> "bool":
+def nitf_Field_resetLength(field: "nitf_Field", newLength: "size_t", keepData: "bool", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_resetLength(field, newLength, keepData, error)
-nitf_Field_resetLength = _nitropy.nitf_Field_resetLength
 
-def nitf_Field_print(field: 'nitf_Field') -> "void":
+def nitf_Field_print(field: "nitf_Field") -> "void":
     return _nitropy.nitf_Field_print(field)
-nitf_Field_print = _nitropy.nitf_Field_print
 
-def nitf_Field_snprint(buffer: 'char *', buf_size: 'size_t', field: 'nitf_Field') -> "void":
+def nitf_Field_snprint(buffer: "char *", buf_size: "size_t", field: "nitf_Field") -> "void":
     return _nitropy.nitf_Field_snprint(buffer, buf_size, field)
-nitf_Field_snprint = _nitropy.nitf_Field_snprint
 
-def nitf_Field_resizeField(field: 'nitf_Field', newLength: 'size_t', error: 'nrt_Error') -> "bool":
+def nitf_Field_resizeField(field: "nitf_Field", newLength: "size_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Field_resizeField(field, newLength, error)
-nitf_Field_resizeField = _nitropy.nitf_Field_resizeField
 NITF_CLSY_SZ = _nitropy.NITF_CLSY_SZ
 NITF_CODE_SZ = _nitropy.NITF_CODE_SZ
 NITF_CTLH_SZ = _nitropy.NITF_CTLH_SZ
@@ -774,96 +527,44 @@ NITF_CAUT_20_SZ = _nitropy.NITF_CAUT_20_SZ
 NITF_CTLN_20_SZ = _nitropy.NITF_CTLN_20_SZ
 NITF_DGDT_20_SZ = _nitropy.NITF_DGDT_20_SZ
 NITF_CLTX_20_SZ = _nitropy.NITF_CLTX_20_SZ
-class nitf_FileSecurity(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_FileSecurity, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_FileSecurity, name)
+class nitf_FileSecurity(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["classificationSystem"] = _nitropy.nitf_FileSecurity_classificationSystem_set
-    __swig_getmethods__["classificationSystem"] = _nitropy.nitf_FileSecurity_classificationSystem_get
-    if _newclass:
-        classificationSystem = _swig_property(_nitropy.nitf_FileSecurity_classificationSystem_get, _nitropy.nitf_FileSecurity_classificationSystem_set)
-    __swig_setmethods__["codewords"] = _nitropy.nitf_FileSecurity_codewords_set
-    __swig_getmethods__["codewords"] = _nitropy.nitf_FileSecurity_codewords_get
-    if _newclass:
-        codewords = _swig_property(_nitropy.nitf_FileSecurity_codewords_get, _nitropy.nitf_FileSecurity_codewords_set)
-    __swig_setmethods__["controlAndHandling"] = _nitropy.nitf_FileSecurity_controlAndHandling_set
-    __swig_getmethods__["controlAndHandling"] = _nitropy.nitf_FileSecurity_controlAndHandling_get
-    if _newclass:
-        controlAndHandling = _swig_property(_nitropy.nitf_FileSecurity_controlAndHandling_get, _nitropy.nitf_FileSecurity_controlAndHandling_set)
-    __swig_setmethods__["releasingInstructions"] = _nitropy.nitf_FileSecurity_releasingInstructions_set
-    __swig_getmethods__["releasingInstructions"] = _nitropy.nitf_FileSecurity_releasingInstructions_get
-    if _newclass:
-        releasingInstructions = _swig_property(_nitropy.nitf_FileSecurity_releasingInstructions_get, _nitropy.nitf_FileSecurity_releasingInstructions_set)
-    __swig_setmethods__["declassificationType"] = _nitropy.nitf_FileSecurity_declassificationType_set
-    __swig_getmethods__["declassificationType"] = _nitropy.nitf_FileSecurity_declassificationType_get
-    if _newclass:
-        declassificationType = _swig_property(_nitropy.nitf_FileSecurity_declassificationType_get, _nitropy.nitf_FileSecurity_declassificationType_set)
-    __swig_setmethods__["declassificationDate"] = _nitropy.nitf_FileSecurity_declassificationDate_set
-    __swig_getmethods__["declassificationDate"] = _nitropy.nitf_FileSecurity_declassificationDate_get
-    if _newclass:
-        declassificationDate = _swig_property(_nitropy.nitf_FileSecurity_declassificationDate_get, _nitropy.nitf_FileSecurity_declassificationDate_set)
-    __swig_setmethods__["declassificationExemption"] = _nitropy.nitf_FileSecurity_declassificationExemption_set
-    __swig_getmethods__["declassificationExemption"] = _nitropy.nitf_FileSecurity_declassificationExemption_get
-    if _newclass:
-        declassificationExemption = _swig_property(_nitropy.nitf_FileSecurity_declassificationExemption_get, _nitropy.nitf_FileSecurity_declassificationExemption_set)
-    __swig_setmethods__["downgrade"] = _nitropy.nitf_FileSecurity_downgrade_set
-    __swig_getmethods__["downgrade"] = _nitropy.nitf_FileSecurity_downgrade_get
-    if _newclass:
-        downgrade = _swig_property(_nitropy.nitf_FileSecurity_downgrade_get, _nitropy.nitf_FileSecurity_downgrade_set)
-    __swig_setmethods__["downgradeDateTime"] = _nitropy.nitf_FileSecurity_downgradeDateTime_set
-    __swig_getmethods__["downgradeDateTime"] = _nitropy.nitf_FileSecurity_downgradeDateTime_get
-    if _newclass:
-        downgradeDateTime = _swig_property(_nitropy.nitf_FileSecurity_downgradeDateTime_get, _nitropy.nitf_FileSecurity_downgradeDateTime_set)
-    __swig_setmethods__["classificationText"] = _nitropy.nitf_FileSecurity_classificationText_set
-    __swig_getmethods__["classificationText"] = _nitropy.nitf_FileSecurity_classificationText_get
-    if _newclass:
-        classificationText = _swig_property(_nitropy.nitf_FileSecurity_classificationText_get, _nitropy.nitf_FileSecurity_classificationText_set)
-    __swig_setmethods__["classificationAuthorityType"] = _nitropy.nitf_FileSecurity_classificationAuthorityType_set
-    __swig_getmethods__["classificationAuthorityType"] = _nitropy.nitf_FileSecurity_classificationAuthorityType_get
-    if _newclass:
-        classificationAuthorityType = _swig_property(_nitropy.nitf_FileSecurity_classificationAuthorityType_get, _nitropy.nitf_FileSecurity_classificationAuthorityType_set)
-    __swig_setmethods__["classificationAuthority"] = _nitropy.nitf_FileSecurity_classificationAuthority_set
-    __swig_getmethods__["classificationAuthority"] = _nitropy.nitf_FileSecurity_classificationAuthority_get
-    if _newclass:
-        classificationAuthority = _swig_property(_nitropy.nitf_FileSecurity_classificationAuthority_get, _nitropy.nitf_FileSecurity_classificationAuthority_set)
-    __swig_setmethods__["classificationReason"] = _nitropy.nitf_FileSecurity_classificationReason_set
-    __swig_getmethods__["classificationReason"] = _nitropy.nitf_FileSecurity_classificationReason_get
-    if _newclass:
-        classificationReason = _swig_property(_nitropy.nitf_FileSecurity_classificationReason_get, _nitropy.nitf_FileSecurity_classificationReason_set)
-    __swig_setmethods__["securitySourceDate"] = _nitropy.nitf_FileSecurity_securitySourceDate_set
-    __swig_getmethods__["securitySourceDate"] = _nitropy.nitf_FileSecurity_securitySourceDate_get
-    if _newclass:
-        securitySourceDate = _swig_property(_nitropy.nitf_FileSecurity_securitySourceDate_get, _nitropy.nitf_FileSecurity_securitySourceDate_set)
-    __swig_setmethods__["securityControlNumber"] = _nitropy.nitf_FileSecurity_securityControlNumber_set
-    __swig_getmethods__["securityControlNumber"] = _nitropy.nitf_FileSecurity_securityControlNumber_get
-    if _newclass:
-        securityControlNumber = _swig_property(_nitropy.nitf_FileSecurity_securityControlNumber_get, _nitropy.nitf_FileSecurity_securityControlNumber_set)
+    classificationSystem = property(_nitropy.nitf_FileSecurity_classificationSystem_get, _nitropy.nitf_FileSecurity_classificationSystem_set)
+    codewords = property(_nitropy.nitf_FileSecurity_codewords_get, _nitropy.nitf_FileSecurity_codewords_set)
+    controlAndHandling = property(_nitropy.nitf_FileSecurity_controlAndHandling_get, _nitropy.nitf_FileSecurity_controlAndHandling_set)
+    releasingInstructions = property(_nitropy.nitf_FileSecurity_releasingInstructions_get, _nitropy.nitf_FileSecurity_releasingInstructions_set)
+    declassificationType = property(_nitropy.nitf_FileSecurity_declassificationType_get, _nitropy.nitf_FileSecurity_declassificationType_set)
+    declassificationDate = property(_nitropy.nitf_FileSecurity_declassificationDate_get, _nitropy.nitf_FileSecurity_declassificationDate_set)
+    declassificationExemption = property(_nitropy.nitf_FileSecurity_declassificationExemption_get, _nitropy.nitf_FileSecurity_declassificationExemption_set)
+    downgrade = property(_nitropy.nitf_FileSecurity_downgrade_get, _nitropy.nitf_FileSecurity_downgrade_set)
+    downgradeDateTime = property(_nitropy.nitf_FileSecurity_downgradeDateTime_get, _nitropy.nitf_FileSecurity_downgradeDateTime_set)
+    classificationText = property(_nitropy.nitf_FileSecurity_classificationText_get, _nitropy.nitf_FileSecurity_classificationText_set)
+    classificationAuthorityType = property(_nitropy.nitf_FileSecurity_classificationAuthorityType_get, _nitropy.nitf_FileSecurity_classificationAuthorityType_set)
+    classificationAuthority = property(_nitropy.nitf_FileSecurity_classificationAuthority_get, _nitropy.nitf_FileSecurity_classificationAuthority_set)
+    classificationReason = property(_nitropy.nitf_FileSecurity_classificationReason_get, _nitropy.nitf_FileSecurity_classificationReason_set)
+    securitySourceDate = property(_nitropy.nitf_FileSecurity_securitySourceDate_get, _nitropy.nitf_FileSecurity_securitySourceDate_set)
+    securityControlNumber = property(_nitropy.nitf_FileSecurity_securityControlNumber_get, _nitropy.nitf_FileSecurity_securityControlNumber_set)
     __swig_destroy__ = _nitropy.delete_nitf_FileSecurity
-    __del__ = lambda self: None
-nitf_FileSecurity_swigregister = _nitropy.nitf_FileSecurity_swigregister
-nitf_FileSecurity_swigregister(nitf_FileSecurity)
 
+# Register nitf_FileSecurity in _nitropy:
+_nitropy.nitf_FileSecurity_swigregister(nitf_FileSecurity)
 
-def nitf_FileSecurity_construct(error: 'nrt_Error') -> "nitf_FileSecurity *":
+
+def nitf_FileSecurity_construct(error: "nrt_Error") -> "nitf_FileSecurity *":
     return _nitropy.nitf_FileSecurity_construct(error)
-nitf_FileSecurity_construct = _nitropy.nitf_FileSecurity_construct
 
-def nitf_FileSecurity_clone(source: 'nitf_FileSecurity', error: 'nrt_Error') -> "nitf_FileSecurity *":
+def nitf_FileSecurity_clone(source: "nitf_FileSecurity", error: "nrt_Error") -> "nitf_FileSecurity *":
     return _nitropy.nitf_FileSecurity_clone(source, error)
-nitf_FileSecurity_clone = _nitropy.nitf_FileSecurity_clone
 
-def nitf_FileSecurity_destruct(fs: 'nitf_FileSecurity **') -> "void":
+def nitf_FileSecurity_destruct(fs: "nitf_FileSecurity **") -> "void":
     return _nitropy.nitf_FileSecurity_destruct(fs)
-nitf_FileSecurity_destruct = _nitropy.nitf_FileSecurity_destruct
 
-def nitf_FileSecurity_resizeForVersion(fs: 'nitf_FileSecurity', ver: 'nitf_Version', error: 'nrt_Error') -> "bool":
+def nitf_FileSecurity_resizeForVersion(fs: "nitf_FileSecurity", ver: "nitf_Version", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_FileSecurity_resizeForVersion(fs, ver, error)
-nitf_FileSecurity_resizeForVersion = _nitropy.nitf_FileSecurity_resizeForVersion
 NITF_TRE_RAW = _nitropy.NITF_TRE_RAW
 NITF_MAX_TAG = _nitropy.NITF_MAX_TAG
 NITF_ETAG_SZ = _nitropy.NITF_ETAG_SZ
@@ -879,562 +580,351 @@ NITF_COMP_LEN = _nitropy.NITF_COMP_LEN
 NITF_END = _nitropy.NITF_END
 NITF_CONST_N = _nitropy.NITF_CONST_N
 NITF_FUNCTION = _nitropy.NITF_FUNCTION
-class nitf_TRE(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_TRE, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_TRE, name)
+class nitf_TRE(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["handler"] = _nitropy.nitf_TRE_handler_set
-    __swig_getmethods__["handler"] = _nitropy.nitf_TRE_handler_get
-    if _newclass:
-        handler = _swig_property(_nitropy.nitf_TRE_handler_get, _nitropy.nitf_TRE_handler_set)
-    __swig_setmethods__["priv"] = _nitropy.nitf_TRE_priv_set
-    __swig_getmethods__["priv"] = _nitropy.nitf_TRE_priv_get
-    if _newclass:
-        priv = _swig_property(_nitropy.nitf_TRE_priv_get, _nitropy.nitf_TRE_priv_set)
-    __swig_setmethods__["tag"] = _nitropy.nitf_TRE_tag_set
-    __swig_getmethods__["tag"] = _nitropy.nitf_TRE_tag_get
-    if _newclass:
-        tag = _swig_property(_nitropy.nitf_TRE_tag_get, _nitropy.nitf_TRE_tag_set)
+    handler = property(_nitropy.nitf_TRE_handler_get, _nitropy.nitf_TRE_handler_set)
+    priv = property(_nitropy.nitf_TRE_priv_get, _nitropy.nitf_TRE_priv_set)
+    tag = property(_nitropy.nitf_TRE_tag_get, _nitropy.nitf_TRE_tag_set)
     __swig_destroy__ = _nitropy.delete_nitf_TRE
-    __del__ = lambda self: None
-nitf_TRE_swigregister = _nitropy.nitf_TRE_swigregister
-nitf_TRE_swigregister(nitf_TRE)
 
-class nitf_TREEnumerator(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_TREEnumerator, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_TREEnumerator, name)
+# Register nitf_TRE in _nitropy:
+_nitropy.nitf_TRE_swigregister(nitf_TRE)
+
+class nitf_TREEnumerator(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["next"] = _nitropy.nitf_TREEnumerator_next_set
-    __swig_getmethods__["next"] = _nitropy.nitf_TREEnumerator_next_get
-    if _newclass:
-        next = _swig_property(_nitropy.nitf_TREEnumerator_next_get, _nitropy.nitf_TREEnumerator_next_set)
-    __swig_setmethods__["hasNext"] = _nitropy.nitf_TREEnumerator_hasNext_set
-    __swig_getmethods__["hasNext"] = _nitropy.nitf_TREEnumerator_hasNext_get
-    if _newclass:
-        hasNext = _swig_property(_nitropy.nitf_TREEnumerator_hasNext_get, _nitropy.nitf_TREEnumerator_hasNext_set)
-    __swig_setmethods__["getFieldDescription"] = _nitropy.nitf_TREEnumerator_getFieldDescription_set
-    __swig_getmethods__["getFieldDescription"] = _nitropy.nitf_TREEnumerator_getFieldDescription_get
-    if _newclass:
-        getFieldDescription = _swig_property(_nitropy.nitf_TREEnumerator_getFieldDescription_get, _nitropy.nitf_TREEnumerator_getFieldDescription_set)
-    __swig_setmethods__["data"] = _nitropy.nitf_TREEnumerator_data_set
-    __swig_getmethods__["data"] = _nitropy.nitf_TREEnumerator_data_get
-    if _newclass:
-        data = _swig_property(_nitropy.nitf_TREEnumerator_data_get, _nitropy.nitf_TREEnumerator_data_set)
+    next = property(_nitropy.nitf_TREEnumerator_next_get, _nitropy.nitf_TREEnumerator_next_set)
+    hasNext = property(_nitropy.nitf_TREEnumerator_hasNext_get, _nitropy.nitf_TREEnumerator_hasNext_set)
+    getFieldDescription = property(_nitropy.nitf_TREEnumerator_getFieldDescription_get, _nitropy.nitf_TREEnumerator_getFieldDescription_set)
+    data = property(_nitropy.nitf_TREEnumerator_data_get, _nitropy.nitf_TREEnumerator_data_set)
     __swig_destroy__ = _nitropy.delete_nitf_TREEnumerator
-    __del__ = lambda self: None
-nitf_TREEnumerator_swigregister = _nitropy.nitf_TREEnumerator_swigregister
-nitf_TREEnumerator_swigregister(nitf_TREEnumerator)
 
-class nitf_TREHandler(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_TREHandler, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_TREHandler, name)
+# Register nitf_TREEnumerator in _nitropy:
+_nitropy.nitf_TREEnumerator_swigregister(nitf_TREEnumerator)
+
+class nitf_TREHandler(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["init"] = _nitropy.nitf_TREHandler_init_set
-    __swig_getmethods__["init"] = _nitropy.nitf_TREHandler_init_get
-    if _newclass:
-        init = _swig_property(_nitropy.nitf_TREHandler_init_get, _nitropy.nitf_TREHandler_init_set)
-    __swig_setmethods__["getID"] = _nitropy.nitf_TREHandler_getID_set
-    __swig_getmethods__["getID"] = _nitropy.nitf_TREHandler_getID_get
-    if _newclass:
-        getID = _swig_property(_nitropy.nitf_TREHandler_getID_get, _nitropy.nitf_TREHandler_getID_set)
-    __swig_setmethods__["read"] = _nitropy.nitf_TREHandler_read_set
-    __swig_getmethods__["read"] = _nitropy.nitf_TREHandler_read_get
-    if _newclass:
-        read = _swig_property(_nitropy.nitf_TREHandler_read_get, _nitropy.nitf_TREHandler_read_set)
-    __swig_setmethods__["setField"] = _nitropy.nitf_TREHandler_setField_set
-    __swig_getmethods__["setField"] = _nitropy.nitf_TREHandler_setField_get
-    if _newclass:
-        setField = _swig_property(_nitropy.nitf_TREHandler_setField_get, _nitropy.nitf_TREHandler_setField_set)
-    __swig_setmethods__["getField"] = _nitropy.nitf_TREHandler_getField_set
-    __swig_getmethods__["getField"] = _nitropy.nitf_TREHandler_getField_get
-    if _newclass:
-        getField = _swig_property(_nitropy.nitf_TREHandler_getField_get, _nitropy.nitf_TREHandler_getField_set)
-    __swig_setmethods__["find"] = _nitropy.nitf_TREHandler_find_set
-    __swig_getmethods__["find"] = _nitropy.nitf_TREHandler_find_get
-    if _newclass:
-        find = _swig_property(_nitropy.nitf_TREHandler_find_get, _nitropy.nitf_TREHandler_find_set)
-    __swig_setmethods__["write"] = _nitropy.nitf_TREHandler_write_set
-    __swig_getmethods__["write"] = _nitropy.nitf_TREHandler_write_get
-    if _newclass:
-        write = _swig_property(_nitropy.nitf_TREHandler_write_get, _nitropy.nitf_TREHandler_write_set)
-    __swig_setmethods__["begin"] = _nitropy.nitf_TREHandler_begin_set
-    __swig_getmethods__["begin"] = _nitropy.nitf_TREHandler_begin_get
-    if _newclass:
-        begin = _swig_property(_nitropy.nitf_TREHandler_begin_get, _nitropy.nitf_TREHandler_begin_set)
-    __swig_setmethods__["getCurrentSize"] = _nitropy.nitf_TREHandler_getCurrentSize_set
-    __swig_getmethods__["getCurrentSize"] = _nitropy.nitf_TREHandler_getCurrentSize_get
-    if _newclass:
-        getCurrentSize = _swig_property(_nitropy.nitf_TREHandler_getCurrentSize_get, _nitropy.nitf_TREHandler_getCurrentSize_set)
-    __swig_setmethods__["clone"] = _nitropy.nitf_TREHandler_clone_set
-    __swig_getmethods__["clone"] = _nitropy.nitf_TREHandler_clone_get
-    if _newclass:
-        clone = _swig_property(_nitropy.nitf_TREHandler_clone_get, _nitropy.nitf_TREHandler_clone_set)
-    __swig_setmethods__["destruct"] = _nitropy.nitf_TREHandler_destruct_set
-    __swig_getmethods__["destruct"] = _nitropy.nitf_TREHandler_destruct_get
-    if _newclass:
-        destruct = _swig_property(_nitropy.nitf_TREHandler_destruct_get, _nitropy.nitf_TREHandler_destruct_set)
-    __swig_setmethods__["data"] = _nitropy.nitf_TREHandler_data_set
-    __swig_getmethods__["data"] = _nitropy.nitf_TREHandler_data_get
-    if _newclass:
-        data = _swig_property(_nitropy.nitf_TREHandler_data_get, _nitropy.nitf_TREHandler_data_set)
+    init = property(_nitropy.nitf_TREHandler_init_get, _nitropy.nitf_TREHandler_init_set)
+    getID = property(_nitropy.nitf_TREHandler_getID_get, _nitropy.nitf_TREHandler_getID_set)
+    read = property(_nitropy.nitf_TREHandler_read_get, _nitropy.nitf_TREHandler_read_set)
+    setField = property(_nitropy.nitf_TREHandler_setField_get, _nitropy.nitf_TREHandler_setField_set)
+    getField = property(_nitropy.nitf_TREHandler_getField_get, _nitropy.nitf_TREHandler_getField_set)
+    find = property(_nitropy.nitf_TREHandler_find_get, _nitropy.nitf_TREHandler_find_set)
+    write = property(_nitropy.nitf_TREHandler_write_get, _nitropy.nitf_TREHandler_write_set)
+    begin = property(_nitropy.nitf_TREHandler_begin_get, _nitropy.nitf_TREHandler_begin_set)
+    getCurrentSize = property(_nitropy.nitf_TREHandler_getCurrentSize_get, _nitropy.nitf_TREHandler_getCurrentSize_set)
+    clone = property(_nitropy.nitf_TREHandler_clone_get, _nitropy.nitf_TREHandler_clone_set)
+    destruct = property(_nitropy.nitf_TREHandler_destruct_get, _nitropy.nitf_TREHandler_destruct_set)
+    data = property(_nitropy.nitf_TREHandler_data_get, _nitropy.nitf_TREHandler_data_set)
     __swig_destroy__ = _nitropy.delete_nitf_TREHandler
-    __del__ = lambda self: None
-nitf_TREHandler_swigregister = _nitropy.nitf_TREHandler_swigregister
-nitf_TREHandler_swigregister(nitf_TREHandler)
 
+# Register nitf_TREHandler in _nitropy:
+_nitropy.nitf_TREHandler_swigregister(nitf_TREHandler)
 
-def nitf_TRE_createSkeleton(tag: 'char const *', error: 'nrt_Error') -> "nitf_TRE *":
+
+def nitf_TRE_createSkeleton(tag: "char const *", error: "nrt_Error") -> "nitf_TRE *":
     return _nitropy.nitf_TRE_createSkeleton(tag, error)
-nitf_TRE_createSkeleton = _nitropy.nitf_TRE_createSkeleton
 
-def nitf_TRE_construct(tag: 'char const *', id: 'char const *', error: 'nrt_Error') -> "nitf_TRE *":
+def nitf_TRE_construct(tag: "char const *", id: "char const *", error: "nrt_Error") -> "nitf_TRE *":
     return _nitropy.nitf_TRE_construct(tag, id, error)
-nitf_TRE_construct = _nitropy.nitf_TRE_construct
 
-def nitf_TRE_clone(tre: 'nitf_TRE', error: 'nrt_Error') -> "nitf_TRE *":
+def nitf_TRE_clone(tre: "nitf_TRE", error: "nrt_Error") -> "nitf_TRE *":
     return _nitropy.nitf_TRE_clone(tre, error)
-nitf_TRE_clone = _nitropy.nitf_TRE_clone
 
-def nitf_TRE_destruct(tre: 'nitf_TRE **') -> "void":
+def nitf_TRE_destruct(tre: "nitf_TRE **") -> "void":
     return _nitropy.nitf_TRE_destruct(tre)
-nitf_TRE_destruct = _nitropy.nitf_TRE_destruct
 
-def nitf_TRE_exists(tre: 'nitf_TRE', tag: 'char const *') -> "bool":
+def nitf_TRE_exists(tre: "nitf_TRE", tag: "char const *") -> "bool":
     return _nitropy.nitf_TRE_exists(tre, tag)
-nitf_TRE_exists = _nitropy.nitf_TRE_exists
 
-def nitf_TRE_setField(tre: 'nitf_TRE', tag: 'char const *', data: 'NITF_DATA const *', dataLength: 'size_t', error: 'nrt_Error') -> "bool":
+def nitf_TRE_setField(tre: "nitf_TRE", tag: "char const *", data: "NITF_DATA const *", dataLength: "size_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_TRE_setField(tre, tag, data, dataLength, error)
-nitf_TRE_setField = _nitropy.nitf_TRE_setField
 
-def nitf_TRE_find(tre: 'nitf_TRE', pattern: 'char const *', error: 'nrt_Error') -> "nitf_List *":
+def nitf_TRE_find(tre: "nitf_TRE", pattern: "char const *", error: "nrt_Error") -> "nitf_List *":
     return _nitropy.nitf_TRE_find(tre, pattern, error)
-nitf_TRE_find = _nitropy.nitf_TRE_find
 
-def nitf_TRE_getField(tre: 'nitf_TRE', tag: 'char const *') -> "nitf_Field *":
+def nitf_TRE_getField(tre: "nitf_TRE", tag: "char const *") -> "nitf_Field *":
     return _nitropy.nitf_TRE_getField(tre, tag)
-nitf_TRE_getField = _nitropy.nitf_TRE_getField
 
-def nitf_TRE_begin(tre: 'nitf_TRE', error: 'nrt_Error') -> "nitf_TREEnumerator *":
+def nitf_TRE_begin(tre: "nitf_TRE", error: "nrt_Error") -> "nitf_TREEnumerator *":
     return _nitropy.nitf_TRE_begin(tre, error)
-nitf_TRE_begin = _nitropy.nitf_TRE_begin
 
-def nitf_TRE_getCurrentSize(tre: 'nitf_TRE', error: 'nrt_Error') -> "int":
+def nitf_TRE_getCurrentSize(tre: "nitf_TRE", error: "nrt_Error") -> "int":
     return _nitropy.nitf_TRE_getCurrentSize(tre, error)
-nitf_TRE_getCurrentSize = _nitropy.nitf_TRE_getCurrentSize
 
-def nitf_TRE_getID(tre: 'nitf_TRE') -> "char const *":
+def nitf_TRE_getID(tre: "nitf_TRE") -> "char const *":
     return _nitropy.nitf_TRE_getID(tre)
-nitf_TRE_getID = _nitropy.nitf_TRE_getID
-class nitf_Extensions(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_Extensions, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_Extensions, name)
+class nitf_Extensions(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["hash"] = _nitropy.nitf_Extensions_hash_set
-    __swig_getmethods__["hash"] = _nitropy.nitf_Extensions_hash_get
-    if _newclass:
-        hash = _swig_property(_nitropy.nitf_Extensions_hash_get, _nitropy.nitf_Extensions_hash_set)
-    __swig_setmethods__["ref"] = _nitropy.nitf_Extensions_ref_set
-    __swig_getmethods__["ref"] = _nitropy.nitf_Extensions_ref_get
-    if _newclass:
-        ref = _swig_property(_nitropy.nitf_Extensions_ref_get, _nitropy.nitf_Extensions_ref_set)
+    hash = property(_nitropy.nitf_Extensions_hash_get, _nitropy.nitf_Extensions_hash_set)
+    ref = property(_nitropy.nitf_Extensions_ref_get, _nitropy.nitf_Extensions_ref_set)
     __swig_destroy__ = _nitropy.delete_nitf_Extensions
-    __del__ = lambda self: None
-nitf_Extensions_swigregister = _nitropy.nitf_Extensions_swigregister
-nitf_Extensions_swigregister(nitf_Extensions)
 
-class nitf_ExtensionsIterator(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ExtensionsIterator, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ExtensionsIterator, name)
+# Register nitf_Extensions in _nitropy:
+_nitropy.nitf_Extensions_swigregister(nitf_Extensions)
+
+class nitf_ExtensionsIterator(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["iter"] = _nitropy.nitf_ExtensionsIterator_iter_set
-    __swig_getmethods__["iter"] = _nitropy.nitf_ExtensionsIterator_iter_get
-    if _newclass:
-        iter = _swig_property(_nitropy.nitf_ExtensionsIterator_iter_get, _nitropy.nitf_ExtensionsIterator_iter_set)
+    iter = property(_nitropy.nitf_ExtensionsIterator_iter_get, _nitropy.nitf_ExtensionsIterator_iter_set)
     __swig_destroy__ = _nitropy.delete_nitf_ExtensionsIterator
-    __del__ = lambda self: None
-nitf_ExtensionsIterator_swigregister = _nitropy.nitf_ExtensionsIterator_swigregister
-nitf_ExtensionsIterator_swigregister(nitf_ExtensionsIterator)
 
+# Register nitf_ExtensionsIterator in _nitropy:
+_nitropy.nitf_ExtensionsIterator_swigregister(nitf_ExtensionsIterator)
 
-def nitf_Extensions_construct(error: 'nrt_Error') -> "nitf_Extensions *":
+
+def nitf_Extensions_construct(error: "nrt_Error") -> "nitf_Extensions *":
     return _nitropy.nitf_Extensions_construct(error)
-nitf_Extensions_construct = _nitropy.nitf_Extensions_construct
 
-def nitf_Extensions_clone(source: 'nitf_Extensions', error: 'nrt_Error') -> "nitf_Extensions *":
+def nitf_Extensions_clone(source: "nitf_Extensions", error: "nrt_Error") -> "nitf_Extensions *":
     return _nitropy.nitf_Extensions_clone(source, error)
-nitf_Extensions_clone = _nitropy.nitf_Extensions_clone
 
-def nitf_Extensions_destruct(ext: 'nitf_Extensions **') -> "void":
+def nitf_Extensions_destruct(ext: "nitf_Extensions **") -> "void":
     return _nitropy.nitf_Extensions_destruct(ext)
-nitf_Extensions_destruct = _nitropy.nitf_Extensions_destruct
 
-def nitf_Extensions_appendTRE(ext: 'nitf_Extensions', tre: 'nitf_TRE', error: 'nrt_Error') -> "bool":
+def nitf_Extensions_appendTRE(ext: "nitf_Extensions", tre: "nitf_TRE", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Extensions_appendTRE(ext, tre, error)
-nitf_Extensions_appendTRE = _nitropy.nitf_Extensions_appendTRE
 
-def nitf_Extensions_getTREsByName(ext: 'nitf_Extensions', name: 'char const *') -> "nitf_List *":
+def nitf_Extensions_getTREsByName(ext: "nitf_Extensions", name: "char const *") -> "nitf_List *":
     return _nitropy.nitf_Extensions_getTREsByName(ext, name)
-nitf_Extensions_getTREsByName = _nitropy.nitf_Extensions_getTREsByName
 
-def nitf_Extensions_removeTREsByName(ext: 'nitf_Extensions', name: 'char const *') -> "void":
+def nitf_Extensions_removeTREsByName(ext: "nitf_Extensions", name: "char const *") -> "void":
     return _nitropy.nitf_Extensions_removeTREsByName(ext, name)
-nitf_Extensions_removeTREsByName = _nitropy.nitf_Extensions_removeTREsByName
 
-def nitf_Extensions_exists(ext: 'nitf_Extensions', name: 'char const *') -> "bool":
+def nitf_Extensions_exists(ext: "nitf_Extensions", name: "char const *") -> "bool":
     return _nitropy.nitf_Extensions_exists(ext, name)
-nitf_Extensions_exists = _nitropy.nitf_Extensions_exists
 
-def nitf_Extensions_begin(ext: 'nitf_Extensions') -> "nitf_ExtensionsIterator":
+def nitf_Extensions_begin(ext: "nitf_Extensions") -> "nitf_ExtensionsIterator":
     return _nitropy.nitf_Extensions_begin(ext)
-nitf_Extensions_begin = _nitropy.nitf_Extensions_begin
 
-def nitf_Extensions_end(ext: 'nitf_Extensions') -> "nitf_ExtensionsIterator":
+def nitf_Extensions_end(ext: "nitf_Extensions") -> "nitf_ExtensionsIterator":
     return _nitropy.nitf_Extensions_end(ext)
-nitf_Extensions_end = _nitropy.nitf_Extensions_end
 
-def nitf_ExtensionsIterator_increment(extIt: 'nitf_ExtensionsIterator') -> "void":
+def nitf_ExtensionsIterator_increment(extIt: "nitf_ExtensionsIterator") -> "void":
     return _nitropy.nitf_ExtensionsIterator_increment(extIt)
-nitf_ExtensionsIterator_increment = _nitropy.nitf_ExtensionsIterator_increment
 
-def nitf_ExtensionsIterator_get(extIt: 'nitf_ExtensionsIterator') -> "nitf_TRE *":
+def nitf_ExtensionsIterator_get(extIt: "nitf_ExtensionsIterator") -> "nitf_TRE *":
     return _nitropy.nitf_ExtensionsIterator_get(extIt)
-nitf_ExtensionsIterator_get = _nitropy.nitf_ExtensionsIterator_get
 
-def nitf_Extensions_insert(ext: 'nitf_Extensions', extIter: 'nitf_ExtensionsIterator', tre: 'nitf_TRE', error: 'nrt_Error') -> "bool":
+def nitf_Extensions_insert(ext: "nitf_Extensions", extIter: "nitf_ExtensionsIterator", tre: "nitf_TRE", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Extensions_insert(ext, extIter, tre, error)
-nitf_Extensions_insert = _nitropy.nitf_Extensions_insert
 
-def nitf_Extensions_remove(ext: 'nitf_Extensions', extIter: 'nitf_ExtensionsIterator', error: 'nrt_Error') -> "nitf_TRE *":
+def nitf_Extensions_remove(ext: "nitf_Extensions", extIter: "nitf_ExtensionsIterator", error: "nrt_Error") -> "nitf_TRE *":
     return _nitropy.nitf_Extensions_remove(ext, extIter, error)
-nitf_Extensions_remove = _nitropy.nitf_Extensions_remove
 
-def nitf_ExtensionsIterator_equals(it1: 'nitf_ExtensionsIterator', it2: 'nitf_ExtensionsIterator') -> "bool":
+def nitf_ExtensionsIterator_equals(it1: "nitf_ExtensionsIterator", it2: "nitf_ExtensionsIterator") -> "bool":
     return _nitropy.nitf_ExtensionsIterator_equals(it1, it2)
-nitf_ExtensionsIterator_equals = _nitropy.nitf_ExtensionsIterator_equals
 
-def nitf_ExtensionsIterator_notEqualTo(it1: 'nitf_ExtensionsIterator', it2: 'nitf_ExtensionsIterator') -> "bool":
+def nitf_ExtensionsIterator_notEqualTo(it1: "nitf_ExtensionsIterator", it2: "nitf_ExtensionsIterator") -> "bool":
     return _nitropy.nitf_ExtensionsIterator_notEqualTo(it1, it2)
-nitf_ExtensionsIterator_notEqualTo = _nitropy.nitf_ExtensionsIterator_notEqualTo
 
-def nitf_Extensions_computeLength(ext: 'nitf_Extensions', fver: 'nitf_Version', error: 'nrt_Error') -> "uint32_t":
+def nitf_Extensions_computeLength(ext: "nitf_Extensions", fver: "nitf_Version", error: "nrt_Error") -> "uint32_t":
     return _nitropy.nitf_Extensions_computeLength(ext, fver, error)
-nitf_Extensions_computeLength = _nitropy.nitf_Extensions_computeLength
 NRT_DATA_RETAIN_OWNER = _nitropy.NRT_DATA_RETAIN_OWNER
 NRT_DATA_ADOPT = _nitropy.NRT_DATA_ADOPT
-class nrt_HashTable(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_HashTable, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nrt_HashTable, name)
+class nrt_HashTable(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["buckets"] = _nitropy.nrt_HashTable_buckets_set
-    __swig_getmethods__["buckets"] = _nitropy.nrt_HashTable_buckets_get
-    if _newclass:
-        buckets = _swig_property(_nitropy.nrt_HashTable_buckets_get, _nitropy.nrt_HashTable_buckets_set)
-    __swig_setmethods__["nbuckets"] = _nitropy.nrt_HashTable_nbuckets_set
-    __swig_getmethods__["nbuckets"] = _nitropy.nrt_HashTable_nbuckets_get
-    if _newclass:
-        nbuckets = _swig_property(_nitropy.nrt_HashTable_nbuckets_get, _nitropy.nrt_HashTable_nbuckets_set)
-    __swig_setmethods__["adopt"] = _nitropy.nrt_HashTable_adopt_set
-    __swig_getmethods__["adopt"] = _nitropy.nrt_HashTable_adopt_get
-    if _newclass:
-        adopt = _swig_property(_nitropy.nrt_HashTable_adopt_get, _nitropy.nrt_HashTable_adopt_set)
-    __swig_setmethods__["hash"] = _nitropy.nrt_HashTable_hash_set
-    __swig_getmethods__["hash"] = _nitropy.nrt_HashTable_hash_get
-    if _newclass:
-        hash = _swig_property(_nitropy.nrt_HashTable_hash_get, _nitropy.nrt_HashTable_hash_set)
+    buckets = property(_nitropy.nrt_HashTable_buckets_get, _nitropy.nrt_HashTable_buckets_set)
+    nbuckets = property(_nitropy.nrt_HashTable_nbuckets_get, _nitropy.nrt_HashTable_nbuckets_set)
+    adopt = property(_nitropy.nrt_HashTable_adopt_get, _nitropy.nrt_HashTable_adopt_set)
+    hash = property(_nitropy.nrt_HashTable_hash_get, _nitropy.nrt_HashTable_hash_set)
     __swig_destroy__ = _nitropy.delete_nrt_HashTable
-    __del__ = lambda self: None
-nrt_HashTable_swigregister = _nitropy.nrt_HashTable_swigregister
-nrt_HashTable_swigregister(nrt_HashTable)
 
-class nrt_HashTableIterator(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_HashTableIterator, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nrt_HashTableIterator, name)
+# Register nrt_HashTable in _nitropy:
+_nitropy.nrt_HashTable_swigregister(nrt_HashTable)
+
+class nrt_HashTableIterator(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["hash"] = _nitropy.nrt_HashTableIterator_hash_set
-    __swig_getmethods__["hash"] = _nitropy.nrt_HashTableIterator_hash_get
-    if _newclass:
-        hash = _swig_property(_nitropy.nrt_HashTableIterator_hash_get, _nitropy.nrt_HashTableIterator_hash_set)
-    __swig_setmethods__["curBucket"] = _nitropy.nrt_HashTableIterator_curBucket_set
-    __swig_getmethods__["curBucket"] = _nitropy.nrt_HashTableIterator_curBucket_get
-    if _newclass:
-        curBucket = _swig_property(_nitropy.nrt_HashTableIterator_curBucket_get, _nitropy.nrt_HashTableIterator_curBucket_set)
-    __swig_setmethods__["listIter"] = _nitropy.nrt_HashTableIterator_listIter_set
-    __swig_getmethods__["listIter"] = _nitropy.nrt_HashTableIterator_listIter_get
-    if _newclass:
-        listIter = _swig_property(_nitropy.nrt_HashTableIterator_listIter_get, _nitropy.nrt_HashTableIterator_listIter_set)
+    hash = property(_nitropy.nrt_HashTableIterator_hash_get, _nitropy.nrt_HashTableIterator_hash_set)
+    curBucket = property(_nitropy.nrt_HashTableIterator_curBucket_get, _nitropy.nrt_HashTableIterator_curBucket_set)
+    listIter = property(_nitropy.nrt_HashTableIterator_listIter_get, _nitropy.nrt_HashTableIterator_listIter_set)
     __swig_destroy__ = _nitropy.delete_nrt_HashTableIterator
-    __del__ = lambda self: None
-nrt_HashTableIterator_swigregister = _nitropy.nrt_HashTableIterator_swigregister
-nrt_HashTableIterator_swigregister(nrt_HashTableIterator)
 
+# Register nrt_HashTableIterator in _nitropy:
+_nitropy.nrt_HashTableIterator_swigregister(nrt_HashTableIterator)
 
-def nrt_HashTable_construct(nbuckets: 'int', error: 'nrt_Error') -> "nrt_HashTable *":
+
+def nrt_HashTable_construct(nbuckets: "int", error: "nrt_Error") -> "nrt_HashTable *":
     return _nitropy.nrt_HashTable_construct(nbuckets, error)
-nrt_HashTable_construct = _nitropy.nrt_HashTable_construct
 
-def nrt_HashTable_clone(source: 'nrt_HashTable', cloner: 'NRT_DATA_ITEM_CLONE', error: 'nrt_Error') -> "nrt_HashTable *":
+def nrt_HashTable_clone(source: "nrt_HashTable", cloner: "NRT_DATA_ITEM_CLONE", error: "nrt_Error") -> "nrt_HashTable *":
     return _nitropy.nrt_HashTable_clone(source, cloner, error)
-nrt_HashTable_clone = _nitropy.nrt_HashTable_clone
 
-def nrt_HashTable_setPolicy(ht: 'nrt_HashTable', policy: 'int') -> "void":
+def nrt_HashTable_setPolicy(ht: "nrt_HashTable", policy: "int") -> "void":
     return _nitropy.nrt_HashTable_setPolicy(ht, policy)
-nrt_HashTable_setPolicy = _nitropy.nrt_HashTable_setPolicy
 
-def nrt_HashTable_remove(ht: 'nrt_HashTable', key: 'char const *') -> "NRT_DATA *":
+def nrt_HashTable_remove(ht: "nrt_HashTable", key: "char const *") -> "NRT_DATA *":
     return _nitropy.nrt_HashTable_remove(ht, key)
-nrt_HashTable_remove = _nitropy.nrt_HashTable_remove
 
-def __NRT_HashTable_defaultHash(ht: 'nrt_HashTable', key: 'char const *') -> "unsigned int":
+def __NRT_HashTable_defaultHash(ht: "nrt_HashTable", key: "char const *") -> "unsigned int":
     return _nitropy.__NRT_HashTable_defaultHash(ht, key)
-__NRT_HashTable_defaultHash = _nitropy.__NRT_HashTable_defaultHash
 
-def nrt_HashTable_initDefaults(ht: 'nrt_HashTable') -> "void":
+def nrt_HashTable_initDefaults(ht: "nrt_HashTable") -> "void":
     return _nitropy.nrt_HashTable_initDefaults(ht)
-nrt_HashTable_initDefaults = _nitropy.nrt_HashTable_initDefaults
 
-def nrt_HashTable_destruct(ht: 'nrt_HashTable **') -> "void":
+def nrt_HashTable_destruct(ht: "nrt_HashTable **") -> "void":
     return _nitropy.nrt_HashTable_destruct(ht)
-nrt_HashTable_destruct = _nitropy.nrt_HashTable_destruct
 
-def nrt_HashTable_exists(ht: 'nrt_HashTable', key: 'char const *') -> "bool":
+def nrt_HashTable_exists(ht: "nrt_HashTable", key: "char const *") -> "bool":
     return _nitropy.nrt_HashTable_exists(ht, key)
-nrt_HashTable_exists = _nitropy.nrt_HashTable_exists
 
-def nrt_HashTable_print(ht: 'nrt_HashTable') -> "void":
+def nrt_HashTable_print(ht: "nrt_HashTable") -> "void":
     return _nitropy.nrt_HashTable_print(ht)
-nrt_HashTable_print = _nitropy.nrt_HashTable_print
 
-def nrt_HashTable_foreach(ht: 'nrt_HashTable', fn: 'NRT_HASH_FUNCTOR', userData: 'NRT_DATA *', error: 'nrt_Error') -> "bool":
+def nrt_HashTable_foreach(ht: "nrt_HashTable", fn: "NRT_HASH_FUNCTOR", userData: "NRT_DATA *", error: "nrt_Error") -> "bool":
     return _nitropy.nrt_HashTable_foreach(ht, fn, userData, error)
-nrt_HashTable_foreach = _nitropy.nrt_HashTable_foreach
 
-def nrt_HashTable_insert(ht: 'nrt_HashTable', key: 'char const *', data: 'NRT_DATA *', error: 'nrt_Error') -> "bool":
+def nrt_HashTable_insert(ht: "nrt_HashTable", key: "char const *", data: "NRT_DATA *", error: "nrt_Error") -> "bool":
     return _nitropy.nrt_HashTable_insert(ht, key, data, error)
-nrt_HashTable_insert = _nitropy.nrt_HashTable_insert
 
-def nrt_HashTable_find(ht: 'nrt_HashTable', key: 'char const *') -> "nrt_Pair *":
+def nrt_HashTable_find(ht: "nrt_HashTable", key: "char const *") -> "nrt_Pair *":
     return _nitropy.nrt_HashTable_find(ht, key)
-nrt_HashTable_find = _nitropy.nrt_HashTable_find
 
-def nrt_HashTableIterator_equals(it1: 'nrt_HashTableIterator', it2: 'nrt_HashTableIterator') -> "bool":
+def nrt_HashTableIterator_equals(it1: "nrt_HashTableIterator", it2: "nrt_HashTableIterator") -> "bool":
     return _nitropy.nrt_HashTableIterator_equals(it1, it2)
-nrt_HashTableIterator_equals = _nitropy.nrt_HashTableIterator_equals
 
-def nrt_HashTableIterator_notEqualTo(it1: 'nrt_HashTableIterator', it2: 'nrt_HashTableIterator') -> "bool":
+def nrt_HashTableIterator_notEqualTo(it1: "nrt_HashTableIterator", it2: "nrt_HashTableIterator") -> "bool":
     return _nitropy.nrt_HashTableIterator_notEqualTo(it1, it2)
-nrt_HashTableIterator_notEqualTo = _nitropy.nrt_HashTableIterator_notEqualTo
 
-def nrt_HashTable_begin(ht: 'nrt_HashTable') -> "nrt_HashTableIterator":
+def nrt_HashTable_begin(ht: "nrt_HashTable") -> "nrt_HashTableIterator":
     return _nitropy.nrt_HashTable_begin(ht)
-nrt_HashTable_begin = _nitropy.nrt_HashTable_begin
 
-def nrt_HashTable_end(ht: 'nrt_HashTable') -> "nrt_HashTableIterator":
+def nrt_HashTable_end(ht: "nrt_HashTable") -> "nrt_HashTableIterator":
     return _nitropy.nrt_HashTable_end(ht)
-nrt_HashTable_end = _nitropy.nrt_HashTable_end
 
-def nrt_HashTableIterator_increment(iter: 'nrt_HashTableIterator') -> "void":
+def nrt_HashTableIterator_increment(iter: "nrt_HashTableIterator") -> "void":
     return _nitropy.nrt_HashTableIterator_increment(iter)
-nrt_HashTableIterator_increment = _nitropy.nrt_HashTableIterator_increment
 
-def nrt_HashTableIterator_get(iter: 'nrt_HashTableIterator') -> "nrt_Pair *":
+def nrt_HashTableIterator_get(iter: "nrt_HashTableIterator") -> "nrt_Pair *":
     return _nitropy.nrt_HashTableIterator_get(iter)
-nrt_HashTableIterator_get = _nitropy.nrt_HashTableIterator_get
-class nrt_Pair(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nrt_Pair, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nrt_Pair, name)
+class nrt_Pair(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["key"] = _nitropy.nrt_Pair_key_set
-    __swig_getmethods__["key"] = _nitropy.nrt_Pair_key_get
-    if _newclass:
-        key = _swig_property(_nitropy.nrt_Pair_key_get, _nitropy.nrt_Pair_key_set)
-    __swig_setmethods__["data"] = _nitropy.nrt_Pair_data_set
-    __swig_getmethods__["data"] = _nitropy.nrt_Pair_data_get
-    if _newclass:
-        data = _swig_property(_nitropy.nrt_Pair_data_get, _nitropy.nrt_Pair_data_set)
+    key = property(_nitropy.nrt_Pair_key_get, _nitropy.nrt_Pair_key_set)
+    data = property(_nitropy.nrt_Pair_data_get, _nitropy.nrt_Pair_data_set)
     __swig_destroy__ = _nitropy.delete_nrt_Pair
-    __del__ = lambda self: None
-nrt_Pair_swigregister = _nitropy.nrt_Pair_swigregister
-nrt_Pair_swigregister(nrt_Pair)
+
+# Register nrt_Pair in _nitropy:
+_nitropy.nrt_Pair_swigregister(nrt_Pair)
 
 
-def nrt_Pair_init(pair: 'nrt_Pair', key: 'char const *', data: 'NRT_DATA *') -> "void":
+def nrt_Pair_init(pair: "nrt_Pair", key: "char const *", data: "NRT_DATA *") -> "void":
     return _nitropy.nrt_Pair_init(pair, key, data)
-nrt_Pair_init = _nitropy.nrt_Pair_init
 
-def nrt_Pair_copy(dst: 'nrt_Pair', src: 'nrt_Pair') -> "void":
+def nrt_Pair_copy(dst: "nrt_Pair", src: "nrt_Pair") -> "void":
     return _nitropy.nrt_Pair_copy(dst, src)
-nrt_Pair_copy = _nitropy.nrt_Pair_copy
-class nitf_ImageSource(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ImageSource, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ImageSource, name)
+class nitf_ImageSource(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["bandSources"] = _nitropy.nitf_ImageSource_bandSources_set
-    __swig_getmethods__["bandSources"] = _nitropy.nitf_ImageSource_bandSources_get
-    if _newclass:
-        bandSources = _swig_property(_nitropy.nitf_ImageSource_bandSources_get, _nitropy.nitf_ImageSource_bandSources_set)
-    __swig_setmethods__["size"] = _nitropy.nitf_ImageSource_size_set
-    __swig_getmethods__["size"] = _nitropy.nitf_ImageSource_size_get
-    if _newclass:
-        size = _swig_property(_nitropy.nitf_ImageSource_size_get, _nitropy.nitf_ImageSource_size_set)
+    bandSources = property(_nitropy.nitf_ImageSource_bandSources_get, _nitropy.nitf_ImageSource_bandSources_set)
+    size = property(_nitropy.nitf_ImageSource_size_get, _nitropy.nitf_ImageSource_size_set)
     __swig_destroy__ = _nitropy.delete_nitf_ImageSource
-    __del__ = lambda self: None
-nitf_ImageSource_swigregister = _nitropy.nitf_ImageSource_swigregister
-nitf_ImageSource_swigregister(nitf_ImageSource)
 
+# Register nitf_ImageSource in _nitropy:
+_nitropy.nitf_ImageSource_swigregister(nitf_ImageSource)
 
-def nitf_ImageSource_construct(error: 'nrt_Error') -> "nitf_ImageSource *":
+
+def nitf_ImageSource_construct(error: "nrt_Error") -> "nitf_ImageSource *":
     return _nitropy.nitf_ImageSource_construct(error)
-nitf_ImageSource_construct = _nitropy.nitf_ImageSource_construct
 
-def nitf_ImageSource_destruct(arg1: 'nitf_ImageSource **') -> "void":
+def nitf_ImageSource_destruct(arg1: "nitf_ImageSource **") -> "void":
     return _nitropy.nitf_ImageSource_destruct(arg1)
-nitf_ImageSource_destruct = _nitropy.nitf_ImageSource_destruct
 
-def nitf_ImageSource_addBand(imageSource: 'nitf_ImageSource', bandSource: 'nitf_DataSource', error: 'nrt_Error') -> "bool":
+def nitf_ImageSource_addBand(imageSource: "nitf_ImageSource", bandSource: "nitf_DataSource", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSource_addBand(imageSource, bandSource, error)
-nitf_ImageSource_addBand = _nitropy.nitf_ImageSource_addBand
 
-def nitf_ImageSource_getBand(imageSource: 'nitf_ImageSource', n: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
+def nitf_ImageSource_getBand(imageSource: "nitf_ImageSource", n: "int", error: "nrt_Error") -> "nitf_BandSource *":
     return _nitropy.nitf_ImageSource_getBand(imageSource, n, error)
-nitf_ImageSource_getBand = _nitropy.nitf_ImageSource_getBand
-class nitf_IDataSource(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_IDataSource, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_IDataSource, name)
+class nitf_IDataSource(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["read"] = _nitropy.nitf_IDataSource_read_set
-    __swig_getmethods__["read"] = _nitropy.nitf_IDataSource_read_get
-    if _newclass:
-        read = _swig_property(_nitropy.nitf_IDataSource_read_get, _nitropy.nitf_IDataSource_read_set)
-    __swig_setmethods__["destruct"] = _nitropy.nitf_IDataSource_destruct_set
-    __swig_getmethods__["destruct"] = _nitropy.nitf_IDataSource_destruct_get
-    if _newclass:
-        destruct = _swig_property(_nitropy.nitf_IDataSource_destruct_get, _nitropy.nitf_IDataSource_destruct_set)
-    __swig_setmethods__["getSize"] = _nitropy.nitf_IDataSource_getSize_set
-    __swig_getmethods__["getSize"] = _nitropy.nitf_IDataSource_getSize_get
-    if _newclass:
-        getSize = _swig_property(_nitropy.nitf_IDataSource_getSize_get, _nitropy.nitf_IDataSource_getSize_set)
-    __swig_setmethods__["setSize"] = _nitropy.nitf_IDataSource_setSize_set
-    __swig_getmethods__["setSize"] = _nitropy.nitf_IDataSource_setSize_get
-    if _newclass:
-        setSize = _swig_property(_nitropy.nitf_IDataSource_setSize_get, _nitropy.nitf_IDataSource_setSize_set)
+    read = property(_nitropy.nitf_IDataSource_read_get, _nitropy.nitf_IDataSource_read_set)
+    destruct = property(_nitropy.nitf_IDataSource_destruct_get, _nitropy.nitf_IDataSource_destruct_set)
+    getSize = property(_nitropy.nitf_IDataSource_getSize_get, _nitropy.nitf_IDataSource_getSize_set)
+    setSize = property(_nitropy.nitf_IDataSource_setSize_get, _nitropy.nitf_IDataSource_setSize_set)
     __swig_destroy__ = _nitropy.delete_nitf_IDataSource
-    __del__ = lambda self: None
-nitf_IDataSource_swigregister = _nitropy.nitf_IDataSource_swigregister
-nitf_IDataSource_swigregister(nitf_IDataSource)
 
-class nitf_DataSource(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_DataSource, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_DataSource, name)
+# Register nitf_IDataSource in _nitropy:
+_nitropy.nitf_IDataSource_swigregister(nitf_IDataSource)
+
+class nitf_DataSource(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["iface"] = _nitropy.nitf_DataSource_iface_set
-    __swig_getmethods__["iface"] = _nitropy.nitf_DataSource_iface_get
-    if _newclass:
-        iface = _swig_property(_nitropy.nitf_DataSource_iface_get, _nitropy.nitf_DataSource_iface_set)
-    __swig_setmethods__["data"] = _nitropy.nitf_DataSource_data_set
-    __swig_getmethods__["data"] = _nitropy.nitf_DataSource_data_get
-    if _newclass:
-        data = _swig_property(_nitropy.nitf_DataSource_data_get, _nitropy.nitf_DataSource_data_set)
+    iface = property(_nitropy.nitf_DataSource_iface_get, _nitropy.nitf_DataSource_iface_set)
+    data = property(_nitropy.nitf_DataSource_data_get, _nitropy.nitf_DataSource_data_set)
     __swig_destroy__ = _nitropy.delete_nitf_DataSource
-    __del__ = lambda self: None
-nitf_DataSource_swigregister = _nitropy.nitf_DataSource_swigregister
-nitf_DataSource_swigregister(nitf_DataSource)
 
+# Register nitf_DataSource in _nitropy:
+_nitropy.nitf_DataSource_swigregister(nitf_DataSource)
 
-def nitf_DataSource_destruct(dataSource: 'nitf_DataSource **') -> "void":
+
+def nitf_DataSource_destruct(dataSource: "nitf_DataSource **") -> "void":
     return _nitropy.nitf_DataSource_destruct(dataSource)
-nitf_DataSource_destruct = _nitropy.nitf_DataSource_destruct
 
-def nitf_MemorySource_construct(data: 'void const *', size: 'nitf_Off', start: 'nitf_Off', numBytesPerPixel: 'int', pixelSkip: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
+def nitf_MemorySource_construct(data: "void const *", size: "nitf_Off", start: "nitf_Off", numBytesPerPixel: "int", pixelSkip: "int", error: "nrt_Error") -> "nitf_BandSource *":
     return _nitropy.nitf_MemorySource_construct(data, size, start, numBytesPerPixel, pixelSkip, error)
-nitf_MemorySource_construct = _nitropy.nitf_MemorySource_construct
 
-def nitf_FileSource_construct(arg1: 'nitf_IOHandle', start: 'nitf_Off', numBytesPerPixel: 'int', pixelSkip: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
+def nitf_FileSource_construct(arg1: "nitf_IOHandle", start: "nitf_Off", numBytesPerPixel: "int", pixelSkip: "int", error: "nrt_Error") -> "nitf_BandSource *":
     return _nitropy.nitf_FileSource_construct(arg1, start, numBytesPerPixel, pixelSkip, error)
-nitf_FileSource_construct = _nitropy.nitf_FileSource_construct
 
-def nitf_FileSource_constructFile(fname: 'char const *', start: 'nitf_Off', numBytesPerPixel: 'int', pixelSkip: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
+def nitf_FileSource_constructFile(fname: "char const *", start: "nitf_Off", numBytesPerPixel: "int", pixelSkip: "int", error: "nrt_Error") -> "nitf_BandSource *":
     return _nitropy.nitf_FileSource_constructFile(fname, start, numBytesPerPixel, pixelSkip, error)
-nitf_FileSource_constructFile = _nitropy.nitf_FileSource_constructFile
 
-def nitf_IOSource_construct(io: 'nrt_IOInterface', start: 'nitf_Off', numBytesPerPixel: 'int', pixelSkip: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
+def nitf_IOSource_construct(io: "nrt_IOInterface", start: "nitf_Off", numBytesPerPixel: "int", pixelSkip: "int", error: "nrt_Error") -> "nitf_BandSource *":
     return _nitropy.nitf_IOSource_construct(io, start, numBytesPerPixel, pixelSkip, error)
-nitf_IOSource_construct = _nitropy.nitf_IOSource_construct
 
-def nitf_ImageWriter_construct(subheader: 'nitf_ImageSubheader', options: 'nrt_HashTable', error: 'nrt_Error') -> "nitf_ImageWriter *":
+def nitf_ImageWriter_construct(subheader: "nitf_ImageSubheader", options: "nrt_HashTable", error: "nrt_Error") -> "nitf_ImageWriter *":
     return _nitropy.nitf_ImageWriter_construct(subheader, options, error)
-nitf_ImageWriter_construct = _nitropy.nitf_ImageWriter_construct
 
-def nitf_ImageWriter_attachSource(writer: 'nitf_ImageWriter *', imageSource: 'nitf_ImageSource', error: 'nrt_Error') -> "bool":
+def nitf_ImageWriter_attachSource(writer: "nitf_ImageWriter *", imageSource: "nitf_ImageSource", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageWriter_attachSource(writer, imageSource, error)
-nitf_ImageWriter_attachSource = _nitropy.nitf_ImageWriter_attachSource
 
-def nitf_ImageWriter_setWriteCaching(iWriter: 'nitf_ImageWriter *', enable: 'int') -> "int":
+def nitf_ImageWriter_setWriteCaching(iWriter: "nitf_ImageWriter *", enable: "int") -> "int":
     return _nitropy.nitf_ImageWriter_setWriteCaching(iWriter, enable)
-nitf_ImageWriter_setWriteCaching = _nitropy.nitf_ImageWriter_setWriteCaching
 
-def nitf_ImageWriter_setDirectBlockWrite(iWriter: 'nitf_ImageWriter *', enable: 'int', error: 'nrt_Error') -> "bool":
+def nitf_ImageWriter_setDirectBlockWrite(iWriter: "nitf_ImageWriter *", enable: "int", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageWriter_setDirectBlockWrite(iWriter, enable, error)
-nitf_ImageWriter_setDirectBlockWrite = _nitropy.nitf_ImageWriter_setDirectBlockWrite
 
-def nitf_ImageWriter_setPadPixel(imageWriter: 'nitf_ImageWriter *', value: 'uint8_t *', length: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_ImageWriter_setPadPixel(imageWriter: "nitf_ImageWriter *", value: "uint8_t *", length: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageWriter_setPadPixel(imageWriter, value, length, error)
-nitf_ImageWriter_setPadPixel = _nitropy.nitf_ImageWriter_setPadPixel
 NITF_FHDR_SZ = _nitropy.NITF_FHDR_SZ
 NITF_FVER_SZ = _nitropy.NITF_FVER_SZ
 NITF_CLEVEL_SZ = _nitropy.NITF_CLEVEL_SZ
@@ -1473,210 +963,84 @@ NITF_NUMX_SZ = _nitropy.NITF_NUMX_SZ
 NITF_NUMT_SZ = _nitropy.NITF_NUMT_SZ
 NITF_NUMDES_SZ = _nitropy.NITF_NUMDES_SZ
 NITF_NUMRES_SZ = _nitropy.NITF_NUMRES_SZ
-class nitf_FileHeader(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_FileHeader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_FileHeader, name)
+class nitf_FileHeader(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["fileHeader"] = _nitropy.nitf_FileHeader_fileHeader_set
-    __swig_getmethods__["fileHeader"] = _nitropy.nitf_FileHeader_fileHeader_get
-    if _newclass:
-        fileHeader = _swig_property(_nitropy.nitf_FileHeader_fileHeader_get, _nitropy.nitf_FileHeader_fileHeader_set)
-    __swig_setmethods__["fileVersion"] = _nitropy.nitf_FileHeader_fileVersion_set
-    __swig_getmethods__["fileVersion"] = _nitropy.nitf_FileHeader_fileVersion_get
-    if _newclass:
-        fileVersion = _swig_property(_nitropy.nitf_FileHeader_fileVersion_get, _nitropy.nitf_FileHeader_fileVersion_set)
-    __swig_setmethods__["complianceLevel"] = _nitropy.nitf_FileHeader_complianceLevel_set
-    __swig_getmethods__["complianceLevel"] = _nitropy.nitf_FileHeader_complianceLevel_get
-    if _newclass:
-        complianceLevel = _swig_property(_nitropy.nitf_FileHeader_complianceLevel_get, _nitropy.nitf_FileHeader_complianceLevel_set)
-    __swig_setmethods__["systemType"] = _nitropy.nitf_FileHeader_systemType_set
-    __swig_getmethods__["systemType"] = _nitropy.nitf_FileHeader_systemType_get
-    if _newclass:
-        systemType = _swig_property(_nitropy.nitf_FileHeader_systemType_get, _nitropy.nitf_FileHeader_systemType_set)
-    __swig_setmethods__["originStationID"] = _nitropy.nitf_FileHeader_originStationID_set
-    __swig_getmethods__["originStationID"] = _nitropy.nitf_FileHeader_originStationID_get
-    if _newclass:
-        originStationID = _swig_property(_nitropy.nitf_FileHeader_originStationID_get, _nitropy.nitf_FileHeader_originStationID_set)
-    __swig_setmethods__["fileDateTime"] = _nitropy.nitf_FileHeader_fileDateTime_set
-    __swig_getmethods__["fileDateTime"] = _nitropy.nitf_FileHeader_fileDateTime_get
-    if _newclass:
-        fileDateTime = _swig_property(_nitropy.nitf_FileHeader_fileDateTime_get, _nitropy.nitf_FileHeader_fileDateTime_set)
-    __swig_setmethods__["fileTitle"] = _nitropy.nitf_FileHeader_fileTitle_set
-    __swig_getmethods__["fileTitle"] = _nitropy.nitf_FileHeader_fileTitle_get
-    if _newclass:
-        fileTitle = _swig_property(_nitropy.nitf_FileHeader_fileTitle_get, _nitropy.nitf_FileHeader_fileTitle_set)
-    __swig_setmethods__["classification"] = _nitropy.nitf_FileHeader_classification_set
-    __swig_getmethods__["classification"] = _nitropy.nitf_FileHeader_classification_get
-    if _newclass:
-        classification = _swig_property(_nitropy.nitf_FileHeader_classification_get, _nitropy.nitf_FileHeader_classification_set)
-    __swig_setmethods__["securityGroup"] = _nitropy.nitf_FileHeader_securityGroup_set
-    __swig_getmethods__["securityGroup"] = _nitropy.nitf_FileHeader_securityGroup_get
-    if _newclass:
-        securityGroup = _swig_property(_nitropy.nitf_FileHeader_securityGroup_get, _nitropy.nitf_FileHeader_securityGroup_set)
-    __swig_setmethods__["messageCopyNum"] = _nitropy.nitf_FileHeader_messageCopyNum_set
-    __swig_getmethods__["messageCopyNum"] = _nitropy.nitf_FileHeader_messageCopyNum_get
-    if _newclass:
-        messageCopyNum = _swig_property(_nitropy.nitf_FileHeader_messageCopyNum_get, _nitropy.nitf_FileHeader_messageCopyNum_set)
-    __swig_setmethods__["messageNumCopies"] = _nitropy.nitf_FileHeader_messageNumCopies_set
-    __swig_getmethods__["messageNumCopies"] = _nitropy.nitf_FileHeader_messageNumCopies_get
-    if _newclass:
-        messageNumCopies = _swig_property(_nitropy.nitf_FileHeader_messageNumCopies_get, _nitropy.nitf_FileHeader_messageNumCopies_set)
-    __swig_setmethods__["encrypted"] = _nitropy.nitf_FileHeader_encrypted_set
-    __swig_getmethods__["encrypted"] = _nitropy.nitf_FileHeader_encrypted_get
-    if _newclass:
-        encrypted = _swig_property(_nitropy.nitf_FileHeader_encrypted_get, _nitropy.nitf_FileHeader_encrypted_set)
-    __swig_setmethods__["backgroundColor"] = _nitropy.nitf_FileHeader_backgroundColor_set
-    __swig_getmethods__["backgroundColor"] = _nitropy.nitf_FileHeader_backgroundColor_get
-    if _newclass:
-        backgroundColor = _swig_property(_nitropy.nitf_FileHeader_backgroundColor_get, _nitropy.nitf_FileHeader_backgroundColor_set)
-    __swig_setmethods__["originatorName"] = _nitropy.nitf_FileHeader_originatorName_set
-    __swig_getmethods__["originatorName"] = _nitropy.nitf_FileHeader_originatorName_get
-    if _newclass:
-        originatorName = _swig_property(_nitropy.nitf_FileHeader_originatorName_get, _nitropy.nitf_FileHeader_originatorName_set)
-    __swig_setmethods__["originatorPhone"] = _nitropy.nitf_FileHeader_originatorPhone_set
-    __swig_getmethods__["originatorPhone"] = _nitropy.nitf_FileHeader_originatorPhone_get
-    if _newclass:
-        originatorPhone = _swig_property(_nitropy.nitf_FileHeader_originatorPhone_get, _nitropy.nitf_FileHeader_originatorPhone_set)
-    __swig_setmethods__["fileLength"] = _nitropy.nitf_FileHeader_fileLength_set
-    __swig_getmethods__["fileLength"] = _nitropy.nitf_FileHeader_fileLength_get
-    if _newclass:
-        fileLength = _swig_property(_nitropy.nitf_FileHeader_fileLength_get, _nitropy.nitf_FileHeader_fileLength_set)
-    __swig_setmethods__["headerLength"] = _nitropy.nitf_FileHeader_headerLength_set
-    __swig_getmethods__["headerLength"] = _nitropy.nitf_FileHeader_headerLength_get
-    if _newclass:
-        headerLength = _swig_property(_nitropy.nitf_FileHeader_headerLength_get, _nitropy.nitf_FileHeader_headerLength_set)
-    __swig_setmethods__["numImages"] = _nitropy.nitf_FileHeader_numImages_set
-    __swig_getmethods__["numImages"] = _nitropy.nitf_FileHeader_numImages_get
-    if _newclass:
-        numImages = _swig_property(_nitropy.nitf_FileHeader_numImages_get, _nitropy.nitf_FileHeader_numImages_set)
-    __swig_setmethods__["numGraphics"] = _nitropy.nitf_FileHeader_numGraphics_set
-    __swig_getmethods__["numGraphics"] = _nitropy.nitf_FileHeader_numGraphics_get
-    if _newclass:
-        numGraphics = _swig_property(_nitropy.nitf_FileHeader_numGraphics_get, _nitropy.nitf_FileHeader_numGraphics_set)
-    __swig_setmethods__["numLabels"] = _nitropy.nitf_FileHeader_numLabels_set
-    __swig_getmethods__["numLabels"] = _nitropy.nitf_FileHeader_numLabels_get
-    if _newclass:
-        numLabels = _swig_property(_nitropy.nitf_FileHeader_numLabels_get, _nitropy.nitf_FileHeader_numLabels_set)
-    __swig_setmethods__["numTexts"] = _nitropy.nitf_FileHeader_numTexts_set
-    __swig_getmethods__["numTexts"] = _nitropy.nitf_FileHeader_numTexts_get
-    if _newclass:
-        numTexts = _swig_property(_nitropy.nitf_FileHeader_numTexts_get, _nitropy.nitf_FileHeader_numTexts_set)
-    __swig_setmethods__["numDataExtensions"] = _nitropy.nitf_FileHeader_numDataExtensions_set
-    __swig_getmethods__["numDataExtensions"] = _nitropy.nitf_FileHeader_numDataExtensions_get
-    if _newclass:
-        numDataExtensions = _swig_property(_nitropy.nitf_FileHeader_numDataExtensions_get, _nitropy.nitf_FileHeader_numDataExtensions_set)
-    __swig_setmethods__["numReservedExtensions"] = _nitropy.nitf_FileHeader_numReservedExtensions_set
-    __swig_getmethods__["numReservedExtensions"] = _nitropy.nitf_FileHeader_numReservedExtensions_get
-    if _newclass:
-        numReservedExtensions = _swig_property(_nitropy.nitf_FileHeader_numReservedExtensions_get, _nitropy.nitf_FileHeader_numReservedExtensions_set)
-    __swig_setmethods__["imageInfo"] = _nitropy.nitf_FileHeader_imageInfo_set
-    __swig_getmethods__["imageInfo"] = _nitropy.nitf_FileHeader_imageInfo_get
-    if _newclass:
-        imageInfo = _swig_property(_nitropy.nitf_FileHeader_imageInfo_get, _nitropy.nitf_FileHeader_imageInfo_set)
-    __swig_setmethods__["graphicInfo"] = _nitropy.nitf_FileHeader_graphicInfo_set
-    __swig_getmethods__["graphicInfo"] = _nitropy.nitf_FileHeader_graphicInfo_get
-    if _newclass:
-        graphicInfo = _swig_property(_nitropy.nitf_FileHeader_graphicInfo_get, _nitropy.nitf_FileHeader_graphicInfo_set)
-    __swig_setmethods__["labelInfo"] = _nitropy.nitf_FileHeader_labelInfo_set
-    __swig_getmethods__["labelInfo"] = _nitropy.nitf_FileHeader_labelInfo_get
-    if _newclass:
-        labelInfo = _swig_property(_nitropy.nitf_FileHeader_labelInfo_get, _nitropy.nitf_FileHeader_labelInfo_set)
-    __swig_setmethods__["textInfo"] = _nitropy.nitf_FileHeader_textInfo_set
-    __swig_getmethods__["textInfo"] = _nitropy.nitf_FileHeader_textInfo_get
-    if _newclass:
-        textInfo = _swig_property(_nitropy.nitf_FileHeader_textInfo_get, _nitropy.nitf_FileHeader_textInfo_set)
-    __swig_setmethods__["dataExtensionInfo"] = _nitropy.nitf_FileHeader_dataExtensionInfo_set
-    __swig_getmethods__["dataExtensionInfo"] = _nitropy.nitf_FileHeader_dataExtensionInfo_get
-    if _newclass:
-        dataExtensionInfo = _swig_property(_nitropy.nitf_FileHeader_dataExtensionInfo_get, _nitropy.nitf_FileHeader_dataExtensionInfo_set)
-    __swig_setmethods__["reservedExtensionInfo"] = _nitropy.nitf_FileHeader_reservedExtensionInfo_set
-    __swig_getmethods__["reservedExtensionInfo"] = _nitropy.nitf_FileHeader_reservedExtensionInfo_get
-    if _newclass:
-        reservedExtensionInfo = _swig_property(_nitropy.nitf_FileHeader_reservedExtensionInfo_get, _nitropy.nitf_FileHeader_reservedExtensionInfo_set)
-    __swig_setmethods__["userDefinedHeaderLength"] = _nitropy.nitf_FileHeader_userDefinedHeaderLength_set
-    __swig_getmethods__["userDefinedHeaderLength"] = _nitropy.nitf_FileHeader_userDefinedHeaderLength_get
-    if _newclass:
-        userDefinedHeaderLength = _swig_property(_nitropy.nitf_FileHeader_userDefinedHeaderLength_get, _nitropy.nitf_FileHeader_userDefinedHeaderLength_set)
-    __swig_setmethods__["userDefinedOverflow"] = _nitropy.nitf_FileHeader_userDefinedOverflow_set
-    __swig_getmethods__["userDefinedOverflow"] = _nitropy.nitf_FileHeader_userDefinedOverflow_get
-    if _newclass:
-        userDefinedOverflow = _swig_property(_nitropy.nitf_FileHeader_userDefinedOverflow_get, _nitropy.nitf_FileHeader_userDefinedOverflow_set)
-    __swig_setmethods__["extendedHeaderLength"] = _nitropy.nitf_FileHeader_extendedHeaderLength_set
-    __swig_getmethods__["extendedHeaderLength"] = _nitropy.nitf_FileHeader_extendedHeaderLength_get
-    if _newclass:
-        extendedHeaderLength = _swig_property(_nitropy.nitf_FileHeader_extendedHeaderLength_get, _nitropy.nitf_FileHeader_extendedHeaderLength_set)
-    __swig_setmethods__["extendedHeaderOverflow"] = _nitropy.nitf_FileHeader_extendedHeaderOverflow_set
-    __swig_getmethods__["extendedHeaderOverflow"] = _nitropy.nitf_FileHeader_extendedHeaderOverflow_get
-    if _newclass:
-        extendedHeaderOverflow = _swig_property(_nitropy.nitf_FileHeader_extendedHeaderOverflow_get, _nitropy.nitf_FileHeader_extendedHeaderOverflow_set)
-    __swig_setmethods__["userDefinedSection"] = _nitropy.nitf_FileHeader_userDefinedSection_set
-    __swig_getmethods__["userDefinedSection"] = _nitropy.nitf_FileHeader_userDefinedSection_get
-    if _newclass:
-        userDefinedSection = _swig_property(_nitropy.nitf_FileHeader_userDefinedSection_get, _nitropy.nitf_FileHeader_userDefinedSection_set)
-    __swig_setmethods__["extendedSection"] = _nitropy.nitf_FileHeader_extendedSection_set
-    __swig_getmethods__["extendedSection"] = _nitropy.nitf_FileHeader_extendedSection_get
-    if _newclass:
-        extendedSection = _swig_property(_nitropy.nitf_FileHeader_extendedSection_get, _nitropy.nitf_FileHeader_extendedSection_set)
+    fileHeader = property(_nitropy.nitf_FileHeader_fileHeader_get, _nitropy.nitf_FileHeader_fileHeader_set)
+    fileVersion = property(_nitropy.nitf_FileHeader_fileVersion_get, _nitropy.nitf_FileHeader_fileVersion_set)
+    complianceLevel = property(_nitropy.nitf_FileHeader_complianceLevel_get, _nitropy.nitf_FileHeader_complianceLevel_set)
+    systemType = property(_nitropy.nitf_FileHeader_systemType_get, _nitropy.nitf_FileHeader_systemType_set)
+    originStationID = property(_nitropy.nitf_FileHeader_originStationID_get, _nitropy.nitf_FileHeader_originStationID_set)
+    fileDateTime = property(_nitropy.nitf_FileHeader_fileDateTime_get, _nitropy.nitf_FileHeader_fileDateTime_set)
+    fileTitle = property(_nitropy.nitf_FileHeader_fileTitle_get, _nitropy.nitf_FileHeader_fileTitle_set)
+    classification = property(_nitropy.nitf_FileHeader_classification_get, _nitropy.nitf_FileHeader_classification_set)
+    securityGroup = property(_nitropy.nitf_FileHeader_securityGroup_get, _nitropy.nitf_FileHeader_securityGroup_set)
+    messageCopyNum = property(_nitropy.nitf_FileHeader_messageCopyNum_get, _nitropy.nitf_FileHeader_messageCopyNum_set)
+    messageNumCopies = property(_nitropy.nitf_FileHeader_messageNumCopies_get, _nitropy.nitf_FileHeader_messageNumCopies_set)
+    encrypted = property(_nitropy.nitf_FileHeader_encrypted_get, _nitropy.nitf_FileHeader_encrypted_set)
+    backgroundColor = property(_nitropy.nitf_FileHeader_backgroundColor_get, _nitropy.nitf_FileHeader_backgroundColor_set)
+    originatorName = property(_nitropy.nitf_FileHeader_originatorName_get, _nitropy.nitf_FileHeader_originatorName_set)
+    originatorPhone = property(_nitropy.nitf_FileHeader_originatorPhone_get, _nitropy.nitf_FileHeader_originatorPhone_set)
+    fileLength = property(_nitropy.nitf_FileHeader_fileLength_get, _nitropy.nitf_FileHeader_fileLength_set)
+    headerLength = property(_nitropy.nitf_FileHeader_headerLength_get, _nitropy.nitf_FileHeader_headerLength_set)
+    numImages = property(_nitropy.nitf_FileHeader_numImages_get, _nitropy.nitf_FileHeader_numImages_set)
+    numGraphics = property(_nitropy.nitf_FileHeader_numGraphics_get, _nitropy.nitf_FileHeader_numGraphics_set)
+    numLabels = property(_nitropy.nitf_FileHeader_numLabels_get, _nitropy.nitf_FileHeader_numLabels_set)
+    numTexts = property(_nitropy.nitf_FileHeader_numTexts_get, _nitropy.nitf_FileHeader_numTexts_set)
+    numDataExtensions = property(_nitropy.nitf_FileHeader_numDataExtensions_get, _nitropy.nitf_FileHeader_numDataExtensions_set)
+    numReservedExtensions = property(_nitropy.nitf_FileHeader_numReservedExtensions_get, _nitropy.nitf_FileHeader_numReservedExtensions_set)
+    imageInfo = property(_nitropy.nitf_FileHeader_imageInfo_get, _nitropy.nitf_FileHeader_imageInfo_set)
+    graphicInfo = property(_nitropy.nitf_FileHeader_graphicInfo_get, _nitropy.nitf_FileHeader_graphicInfo_set)
+    labelInfo = property(_nitropy.nitf_FileHeader_labelInfo_get, _nitropy.nitf_FileHeader_labelInfo_set)
+    textInfo = property(_nitropy.nitf_FileHeader_textInfo_get, _nitropy.nitf_FileHeader_textInfo_set)
+    dataExtensionInfo = property(_nitropy.nitf_FileHeader_dataExtensionInfo_get, _nitropy.nitf_FileHeader_dataExtensionInfo_set)
+    reservedExtensionInfo = property(_nitropy.nitf_FileHeader_reservedExtensionInfo_get, _nitropy.nitf_FileHeader_reservedExtensionInfo_set)
+    userDefinedHeaderLength = property(_nitropy.nitf_FileHeader_userDefinedHeaderLength_get, _nitropy.nitf_FileHeader_userDefinedHeaderLength_set)
+    userDefinedOverflow = property(_nitropy.nitf_FileHeader_userDefinedOverflow_get, _nitropy.nitf_FileHeader_userDefinedOverflow_set)
+    extendedHeaderLength = property(_nitropy.nitf_FileHeader_extendedHeaderLength_get, _nitropy.nitf_FileHeader_extendedHeaderLength_set)
+    extendedHeaderOverflow = property(_nitropy.nitf_FileHeader_extendedHeaderOverflow_get, _nitropy.nitf_FileHeader_extendedHeaderOverflow_set)
+    userDefinedSection = property(_nitropy.nitf_FileHeader_userDefinedSection_get, _nitropy.nitf_FileHeader_userDefinedSection_set)
+    extendedSection = property(_nitropy.nitf_FileHeader_extendedSection_get, _nitropy.nitf_FileHeader_extendedSection_set)
     __swig_destroy__ = _nitropy.delete_nitf_FileHeader
-    __del__ = lambda self: None
-nitf_FileHeader_swigregister = _nitropy.nitf_FileHeader_swigregister
-nitf_FileHeader_swigregister(nitf_FileHeader)
+
+# Register nitf_FileHeader in _nitropy:
+_nitropy.nitf_FileHeader_swigregister(nitf_FileHeader)
 
 
-def nitf_FileHeader_construct(error: 'nrt_Error') -> "nitf_FileHeader *":
+def nitf_FileHeader_construct(error: "nrt_Error") -> "nitf_FileHeader *":
     return _nitropy.nitf_FileHeader_construct(error)
-nitf_FileHeader_construct = _nitropy.nitf_FileHeader_construct
 
-def nitf_FileHeader_clone(source: 'nitf_FileHeader', error: 'nrt_Error') -> "nitf_FileHeader *":
+def nitf_FileHeader_clone(source: "nitf_FileHeader", error: "nrt_Error") -> "nitf_FileHeader *":
     return _nitropy.nitf_FileHeader_clone(source, error)
-nitf_FileHeader_clone = _nitropy.nitf_FileHeader_clone
 
-def nitf_FileHeader_destruct(fh: 'nitf_FileHeader **') -> "void":
+def nitf_FileHeader_destruct(fh: "nitf_FileHeader **") -> "void":
     return _nitropy.nitf_FileHeader_destruct(fh)
-nitf_FileHeader_destruct = _nitropy.nitf_FileHeader_destruct
-class nitf_ImageSegment(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ImageSegment, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ImageSegment, name)
+class nitf_ImageSegment(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["subheader"] = _nitropy.nitf_ImageSegment_subheader_set
-    __swig_getmethods__["subheader"] = _nitropy.nitf_ImageSegment_subheader_get
-    if _newclass:
-        subheader = _swig_property(_nitropy.nitf_ImageSegment_subheader_get, _nitropy.nitf_ImageSegment_subheader_set)
-    __swig_setmethods__["imageOffset"] = _nitropy.nitf_ImageSegment_imageOffset_set
-    __swig_getmethods__["imageOffset"] = _nitropy.nitf_ImageSegment_imageOffset_get
-    if _newclass:
-        imageOffset = _swig_property(_nitropy.nitf_ImageSegment_imageOffset_get, _nitropy.nitf_ImageSegment_imageOffset_set)
-    __swig_setmethods__["imageEnd"] = _nitropy.nitf_ImageSegment_imageEnd_set
-    __swig_getmethods__["imageEnd"] = _nitropy.nitf_ImageSegment_imageEnd_get
-    if _newclass:
-        imageEnd = _swig_property(_nitropy.nitf_ImageSegment_imageEnd_get, _nitropy.nitf_ImageSegment_imageEnd_set)
+    subheader = property(_nitropy.nitf_ImageSegment_subheader_get, _nitropy.nitf_ImageSegment_subheader_set)
+    imageOffset = property(_nitropy.nitf_ImageSegment_imageOffset_get, _nitropy.nitf_ImageSegment_imageOffset_set)
+    imageEnd = property(_nitropy.nitf_ImageSegment_imageEnd_get, _nitropy.nitf_ImageSegment_imageEnd_set)
     __swig_destroy__ = _nitropy.delete_nitf_ImageSegment
-    __del__ = lambda self: None
-nitf_ImageSegment_swigregister = _nitropy.nitf_ImageSegment_swigregister
-nitf_ImageSegment_swigregister(nitf_ImageSegment)
 
+# Register nitf_ImageSegment in _nitropy:
+_nitropy.nitf_ImageSegment_swigregister(nitf_ImageSegment)
 
-def nitf_ImageSegment_construct(error: 'nrt_Error') -> "nitf_ImageSegment *":
+
+def nitf_ImageSegment_construct(error: "nrt_Error") -> "nitf_ImageSegment *":
     return _nitropy.nitf_ImageSegment_construct(error)
-nitf_ImageSegment_construct = _nitropy.nitf_ImageSegment_construct
 
-def nitf_ImageSegment_clone(source: 'nitf_ImageSegment', error: 'nrt_Error') -> "nitf_ImageSegment *":
+def nitf_ImageSegment_clone(source: "nitf_ImageSegment", error: "nrt_Error") -> "nitf_ImageSegment *":
     return _nitropy.nitf_ImageSegment_clone(source, error)
-nitf_ImageSegment_clone = _nitropy.nitf_ImageSegment_clone
 
-def nitf_ImageSegment_destruct(segment: 'nitf_ImageSegment **') -> "void":
+def nitf_ImageSegment_destruct(segment: "nitf_ImageSegment **") -> "void":
     return _nitropy.nitf_ImageSegment_destruct(segment)
-nitf_ImageSegment_destruct = _nitropy.nitf_ImageSegment_destruct
 NITF_IM_SZ = _nitropy.NITF_IM_SZ
 NITF_IID1_SZ = _nitropy.NITF_IID1_SZ
 NITF_IDATIM_SZ = _nitropy.NITF_IDATIM_SZ
@@ -1715,310 +1079,143 @@ NITF_UDOFL_SZ = _nitropy.NITF_UDOFL_SZ
 NITF_IXSHDL_SZ = _nitropy.NITF_IXSHDL_SZ
 NITF_IXSOFL_SZ = _nitropy.NITF_IXSOFL_SZ
 NITF_MAX_BAND_COUNT = _nitropy.NITF_MAX_BAND_COUNT
-class nitf_ImageSubheader(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ImageSubheader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ImageSubheader, name)
+class nitf_ImageSubheader(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["filePartType"] = _nitropy.nitf_ImageSubheader_filePartType_set
-    __swig_getmethods__["filePartType"] = _nitropy.nitf_ImageSubheader_filePartType_get
-    if _newclass:
-        filePartType = _swig_property(_nitropy.nitf_ImageSubheader_filePartType_get, _nitropy.nitf_ImageSubheader_filePartType_set)
-    __swig_setmethods__["imageId"] = _nitropy.nitf_ImageSubheader_imageId_set
-    __swig_getmethods__["imageId"] = _nitropy.nitf_ImageSubheader_imageId_get
-    if _newclass:
-        imageId = _swig_property(_nitropy.nitf_ImageSubheader_imageId_get, _nitropy.nitf_ImageSubheader_imageId_set)
-    __swig_setmethods__["imageDateAndTime"] = _nitropy.nitf_ImageSubheader_imageDateAndTime_set
-    __swig_getmethods__["imageDateAndTime"] = _nitropy.nitf_ImageSubheader_imageDateAndTime_get
-    if _newclass:
-        imageDateAndTime = _swig_property(_nitropy.nitf_ImageSubheader_imageDateAndTime_get, _nitropy.nitf_ImageSubheader_imageDateAndTime_set)
-    __swig_setmethods__["targetId"] = _nitropy.nitf_ImageSubheader_targetId_set
-    __swig_getmethods__["targetId"] = _nitropy.nitf_ImageSubheader_targetId_get
-    if _newclass:
-        targetId = _swig_property(_nitropy.nitf_ImageSubheader_targetId_get, _nitropy.nitf_ImageSubheader_targetId_set)
-    __swig_setmethods__["imageTitle"] = _nitropy.nitf_ImageSubheader_imageTitle_set
-    __swig_getmethods__["imageTitle"] = _nitropy.nitf_ImageSubheader_imageTitle_get
-    if _newclass:
-        imageTitle = _swig_property(_nitropy.nitf_ImageSubheader_imageTitle_get, _nitropy.nitf_ImageSubheader_imageTitle_set)
-    __swig_setmethods__["imageSecurityClass"] = _nitropy.nitf_ImageSubheader_imageSecurityClass_set
-    __swig_getmethods__["imageSecurityClass"] = _nitropy.nitf_ImageSubheader_imageSecurityClass_get
-    if _newclass:
-        imageSecurityClass = _swig_property(_nitropy.nitf_ImageSubheader_imageSecurityClass_get, _nitropy.nitf_ImageSubheader_imageSecurityClass_set)
-    __swig_setmethods__["securityGroup"] = _nitropy.nitf_ImageSubheader_securityGroup_set
-    __swig_getmethods__["securityGroup"] = _nitropy.nitf_ImageSubheader_securityGroup_get
-    if _newclass:
-        securityGroup = _swig_property(_nitropy.nitf_ImageSubheader_securityGroup_get, _nitropy.nitf_ImageSubheader_securityGroup_set)
-    __swig_setmethods__["encrypted"] = _nitropy.nitf_ImageSubheader_encrypted_set
-    __swig_getmethods__["encrypted"] = _nitropy.nitf_ImageSubheader_encrypted_get
-    if _newclass:
-        encrypted = _swig_property(_nitropy.nitf_ImageSubheader_encrypted_get, _nitropy.nitf_ImageSubheader_encrypted_set)
-    __swig_setmethods__["imageSource"] = _nitropy.nitf_ImageSubheader_imageSource_set
-    __swig_getmethods__["imageSource"] = _nitropy.nitf_ImageSubheader_imageSource_get
-    if _newclass:
-        imageSource = _swig_property(_nitropy.nitf_ImageSubheader_imageSource_get, _nitropy.nitf_ImageSubheader_imageSource_set)
-    __swig_setmethods__["numRows"] = _nitropy.nitf_ImageSubheader_numRows_set
-    __swig_getmethods__["numRows"] = _nitropy.nitf_ImageSubheader_numRows_get
-    if _newclass:
-        numRows = _swig_property(_nitropy.nitf_ImageSubheader_numRows_get, _nitropy.nitf_ImageSubheader_numRows_set)
-    __swig_setmethods__["numCols"] = _nitropy.nitf_ImageSubheader_numCols_set
-    __swig_getmethods__["numCols"] = _nitropy.nitf_ImageSubheader_numCols_get
-    if _newclass:
-        numCols = _swig_property(_nitropy.nitf_ImageSubheader_numCols_get, _nitropy.nitf_ImageSubheader_numCols_set)
-    __swig_setmethods__["pixelValueType"] = _nitropy.nitf_ImageSubheader_pixelValueType_set
-    __swig_getmethods__["pixelValueType"] = _nitropy.nitf_ImageSubheader_pixelValueType_get
-    if _newclass:
-        pixelValueType = _swig_property(_nitropy.nitf_ImageSubheader_pixelValueType_get, _nitropy.nitf_ImageSubheader_pixelValueType_set)
-    __swig_setmethods__["imageRepresentation"] = _nitropy.nitf_ImageSubheader_imageRepresentation_set
-    __swig_getmethods__["imageRepresentation"] = _nitropy.nitf_ImageSubheader_imageRepresentation_get
-    if _newclass:
-        imageRepresentation = _swig_property(_nitropy.nitf_ImageSubheader_imageRepresentation_get, _nitropy.nitf_ImageSubheader_imageRepresentation_set)
-    __swig_setmethods__["imageCategory"] = _nitropy.nitf_ImageSubheader_imageCategory_set
-    __swig_getmethods__["imageCategory"] = _nitropy.nitf_ImageSubheader_imageCategory_get
-    if _newclass:
-        imageCategory = _swig_property(_nitropy.nitf_ImageSubheader_imageCategory_get, _nitropy.nitf_ImageSubheader_imageCategory_set)
-    __swig_setmethods__["actualBitsPerPixel"] = _nitropy.nitf_ImageSubheader_actualBitsPerPixel_set
-    __swig_getmethods__["actualBitsPerPixel"] = _nitropy.nitf_ImageSubheader_actualBitsPerPixel_get
-    if _newclass:
-        actualBitsPerPixel = _swig_property(_nitropy.nitf_ImageSubheader_actualBitsPerPixel_get, _nitropy.nitf_ImageSubheader_actualBitsPerPixel_set)
-    __swig_setmethods__["pixelJustification"] = _nitropy.nitf_ImageSubheader_pixelJustification_set
-    __swig_getmethods__["pixelJustification"] = _nitropy.nitf_ImageSubheader_pixelJustification_get
-    if _newclass:
-        pixelJustification = _swig_property(_nitropy.nitf_ImageSubheader_pixelJustification_get, _nitropy.nitf_ImageSubheader_pixelJustification_set)
-    __swig_setmethods__["imageCoordinateSystem"] = _nitropy.nitf_ImageSubheader_imageCoordinateSystem_set
-    __swig_getmethods__["imageCoordinateSystem"] = _nitropy.nitf_ImageSubheader_imageCoordinateSystem_get
-    if _newclass:
-        imageCoordinateSystem = _swig_property(_nitropy.nitf_ImageSubheader_imageCoordinateSystem_get, _nitropy.nitf_ImageSubheader_imageCoordinateSystem_set)
-    __swig_setmethods__["cornerCoordinates"] = _nitropy.nitf_ImageSubheader_cornerCoordinates_set
-    __swig_getmethods__["cornerCoordinates"] = _nitropy.nitf_ImageSubheader_cornerCoordinates_get
-    if _newclass:
-        cornerCoordinates = _swig_property(_nitropy.nitf_ImageSubheader_cornerCoordinates_get, _nitropy.nitf_ImageSubheader_cornerCoordinates_set)
-    __swig_setmethods__["numImageComments"] = _nitropy.nitf_ImageSubheader_numImageComments_set
-    __swig_getmethods__["numImageComments"] = _nitropy.nitf_ImageSubheader_numImageComments_get
-    if _newclass:
-        numImageComments = _swig_property(_nitropy.nitf_ImageSubheader_numImageComments_get, _nitropy.nitf_ImageSubheader_numImageComments_set)
-    __swig_setmethods__["imageComments"] = _nitropy.nitf_ImageSubheader_imageComments_set
-    __swig_getmethods__["imageComments"] = _nitropy.nitf_ImageSubheader_imageComments_get
-    if _newclass:
-        imageComments = _swig_property(_nitropy.nitf_ImageSubheader_imageComments_get, _nitropy.nitf_ImageSubheader_imageComments_set)
-    __swig_setmethods__["imageCompression"] = _nitropy.nitf_ImageSubheader_imageCompression_set
-    __swig_getmethods__["imageCompression"] = _nitropy.nitf_ImageSubheader_imageCompression_get
-    if _newclass:
-        imageCompression = _swig_property(_nitropy.nitf_ImageSubheader_imageCompression_get, _nitropy.nitf_ImageSubheader_imageCompression_set)
-    __swig_setmethods__["compressionRate"] = _nitropy.nitf_ImageSubheader_compressionRate_set
-    __swig_getmethods__["compressionRate"] = _nitropy.nitf_ImageSubheader_compressionRate_get
-    if _newclass:
-        compressionRate = _swig_property(_nitropy.nitf_ImageSubheader_compressionRate_get, _nitropy.nitf_ImageSubheader_compressionRate_set)
-    __swig_setmethods__["numImageBands"] = _nitropy.nitf_ImageSubheader_numImageBands_set
-    __swig_getmethods__["numImageBands"] = _nitropy.nitf_ImageSubheader_numImageBands_get
-    if _newclass:
-        numImageBands = _swig_property(_nitropy.nitf_ImageSubheader_numImageBands_get, _nitropy.nitf_ImageSubheader_numImageBands_set)
-    __swig_setmethods__["numMultispectralImageBands"] = _nitropy.nitf_ImageSubheader_numMultispectralImageBands_set
-    __swig_getmethods__["numMultispectralImageBands"] = _nitropy.nitf_ImageSubheader_numMultispectralImageBands_get
-    if _newclass:
-        numMultispectralImageBands = _swig_property(_nitropy.nitf_ImageSubheader_numMultispectralImageBands_get, _nitropy.nitf_ImageSubheader_numMultispectralImageBands_set)
-    __swig_setmethods__["bandInfo"] = _nitropy.nitf_ImageSubheader_bandInfo_set
-    __swig_getmethods__["bandInfo"] = _nitropy.nitf_ImageSubheader_bandInfo_get
-    if _newclass:
-        bandInfo = _swig_property(_nitropy.nitf_ImageSubheader_bandInfo_get, _nitropy.nitf_ImageSubheader_bandInfo_set)
-    __swig_setmethods__["imageSyncCode"] = _nitropy.nitf_ImageSubheader_imageSyncCode_set
-    __swig_getmethods__["imageSyncCode"] = _nitropy.nitf_ImageSubheader_imageSyncCode_get
-    if _newclass:
-        imageSyncCode = _swig_property(_nitropy.nitf_ImageSubheader_imageSyncCode_get, _nitropy.nitf_ImageSubheader_imageSyncCode_set)
-    __swig_setmethods__["imageMode"] = _nitropy.nitf_ImageSubheader_imageMode_set
-    __swig_getmethods__["imageMode"] = _nitropy.nitf_ImageSubheader_imageMode_get
-    if _newclass:
-        imageMode = _swig_property(_nitropy.nitf_ImageSubheader_imageMode_get, _nitropy.nitf_ImageSubheader_imageMode_set)
-    __swig_setmethods__["numBlocksPerRow"] = _nitropy.nitf_ImageSubheader_numBlocksPerRow_set
-    __swig_getmethods__["numBlocksPerRow"] = _nitropy.nitf_ImageSubheader_numBlocksPerRow_get
-    if _newclass:
-        numBlocksPerRow = _swig_property(_nitropy.nitf_ImageSubheader_numBlocksPerRow_get, _nitropy.nitf_ImageSubheader_numBlocksPerRow_set)
-    __swig_setmethods__["numBlocksPerCol"] = _nitropy.nitf_ImageSubheader_numBlocksPerCol_set
-    __swig_getmethods__["numBlocksPerCol"] = _nitropy.nitf_ImageSubheader_numBlocksPerCol_get
-    if _newclass:
-        numBlocksPerCol = _swig_property(_nitropy.nitf_ImageSubheader_numBlocksPerCol_get, _nitropy.nitf_ImageSubheader_numBlocksPerCol_set)
-    __swig_setmethods__["numPixelsPerHorizBlock"] = _nitropy.nitf_ImageSubheader_numPixelsPerHorizBlock_set
-    __swig_getmethods__["numPixelsPerHorizBlock"] = _nitropy.nitf_ImageSubheader_numPixelsPerHorizBlock_get
-    if _newclass:
-        numPixelsPerHorizBlock = _swig_property(_nitropy.nitf_ImageSubheader_numPixelsPerHorizBlock_get, _nitropy.nitf_ImageSubheader_numPixelsPerHorizBlock_set)
-    __swig_setmethods__["numPixelsPerVertBlock"] = _nitropy.nitf_ImageSubheader_numPixelsPerVertBlock_set
-    __swig_getmethods__["numPixelsPerVertBlock"] = _nitropy.nitf_ImageSubheader_numPixelsPerVertBlock_get
-    if _newclass:
-        numPixelsPerVertBlock = _swig_property(_nitropy.nitf_ImageSubheader_numPixelsPerVertBlock_get, _nitropy.nitf_ImageSubheader_numPixelsPerVertBlock_set)
-    __swig_setmethods__["numBitsPerPixel"] = _nitropy.nitf_ImageSubheader_numBitsPerPixel_set
-    __swig_getmethods__["numBitsPerPixel"] = _nitropy.nitf_ImageSubheader_numBitsPerPixel_get
-    if _newclass:
-        numBitsPerPixel = _swig_property(_nitropy.nitf_ImageSubheader_numBitsPerPixel_get, _nitropy.nitf_ImageSubheader_numBitsPerPixel_set)
-    __swig_setmethods__["imageDisplayLevel"] = _nitropy.nitf_ImageSubheader_imageDisplayLevel_set
-    __swig_getmethods__["imageDisplayLevel"] = _nitropy.nitf_ImageSubheader_imageDisplayLevel_get
-    if _newclass:
-        imageDisplayLevel = _swig_property(_nitropy.nitf_ImageSubheader_imageDisplayLevel_get, _nitropy.nitf_ImageSubheader_imageDisplayLevel_set)
-    __swig_setmethods__["imageAttachmentLevel"] = _nitropy.nitf_ImageSubheader_imageAttachmentLevel_set
-    __swig_getmethods__["imageAttachmentLevel"] = _nitropy.nitf_ImageSubheader_imageAttachmentLevel_get
-    if _newclass:
-        imageAttachmentLevel = _swig_property(_nitropy.nitf_ImageSubheader_imageAttachmentLevel_get, _nitropy.nitf_ImageSubheader_imageAttachmentLevel_set)
-    __swig_setmethods__["imageLocation"] = _nitropy.nitf_ImageSubheader_imageLocation_set
-    __swig_getmethods__["imageLocation"] = _nitropy.nitf_ImageSubheader_imageLocation_get
-    if _newclass:
-        imageLocation = _swig_property(_nitropy.nitf_ImageSubheader_imageLocation_get, _nitropy.nitf_ImageSubheader_imageLocation_set)
-    __swig_setmethods__["imageMagnification"] = _nitropy.nitf_ImageSubheader_imageMagnification_set
-    __swig_getmethods__["imageMagnification"] = _nitropy.nitf_ImageSubheader_imageMagnification_get
-    if _newclass:
-        imageMagnification = _swig_property(_nitropy.nitf_ImageSubheader_imageMagnification_get, _nitropy.nitf_ImageSubheader_imageMagnification_set)
-    __swig_setmethods__["userDefinedImageDataLength"] = _nitropy.nitf_ImageSubheader_userDefinedImageDataLength_set
-    __swig_getmethods__["userDefinedImageDataLength"] = _nitropy.nitf_ImageSubheader_userDefinedImageDataLength_get
-    if _newclass:
-        userDefinedImageDataLength = _swig_property(_nitropy.nitf_ImageSubheader_userDefinedImageDataLength_get, _nitropy.nitf_ImageSubheader_userDefinedImageDataLength_set)
-    __swig_setmethods__["userDefinedOverflow"] = _nitropy.nitf_ImageSubheader_userDefinedOverflow_set
-    __swig_getmethods__["userDefinedOverflow"] = _nitropy.nitf_ImageSubheader_userDefinedOverflow_get
-    if _newclass:
-        userDefinedOverflow = _swig_property(_nitropy.nitf_ImageSubheader_userDefinedOverflow_get, _nitropy.nitf_ImageSubheader_userDefinedOverflow_set)
-    __swig_setmethods__["extendedHeaderLength"] = _nitropy.nitf_ImageSubheader_extendedHeaderLength_set
-    __swig_getmethods__["extendedHeaderLength"] = _nitropy.nitf_ImageSubheader_extendedHeaderLength_get
-    if _newclass:
-        extendedHeaderLength = _swig_property(_nitropy.nitf_ImageSubheader_extendedHeaderLength_get, _nitropy.nitf_ImageSubheader_extendedHeaderLength_set)
-    __swig_setmethods__["extendedHeaderOverflow"] = _nitropy.nitf_ImageSubheader_extendedHeaderOverflow_set
-    __swig_getmethods__["extendedHeaderOverflow"] = _nitropy.nitf_ImageSubheader_extendedHeaderOverflow_get
-    if _newclass:
-        extendedHeaderOverflow = _swig_property(_nitropy.nitf_ImageSubheader_extendedHeaderOverflow_get, _nitropy.nitf_ImageSubheader_extendedHeaderOverflow_set)
-    __swig_setmethods__["userDefinedSection"] = _nitropy.nitf_ImageSubheader_userDefinedSection_set
-    __swig_getmethods__["userDefinedSection"] = _nitropy.nitf_ImageSubheader_userDefinedSection_get
-    if _newclass:
-        userDefinedSection = _swig_property(_nitropy.nitf_ImageSubheader_userDefinedSection_get, _nitropy.nitf_ImageSubheader_userDefinedSection_set)
-    __swig_setmethods__["extendedSection"] = _nitropy.nitf_ImageSubheader_extendedSection_set
-    __swig_getmethods__["extendedSection"] = _nitropy.nitf_ImageSubheader_extendedSection_get
-    if _newclass:
-        extendedSection = _swig_property(_nitropy.nitf_ImageSubheader_extendedSection_get, _nitropy.nitf_ImageSubheader_extendedSection_set)
+    filePartType = property(_nitropy.nitf_ImageSubheader_filePartType_get, _nitropy.nitf_ImageSubheader_filePartType_set)
+    imageId = property(_nitropy.nitf_ImageSubheader_imageId_get, _nitropy.nitf_ImageSubheader_imageId_set)
+    imageDateAndTime = property(_nitropy.nitf_ImageSubheader_imageDateAndTime_get, _nitropy.nitf_ImageSubheader_imageDateAndTime_set)
+    targetId = property(_nitropy.nitf_ImageSubheader_targetId_get, _nitropy.nitf_ImageSubheader_targetId_set)
+    imageTitle = property(_nitropy.nitf_ImageSubheader_imageTitle_get, _nitropy.nitf_ImageSubheader_imageTitle_set)
+    imageSecurityClass = property(_nitropy.nitf_ImageSubheader_imageSecurityClass_get, _nitropy.nitf_ImageSubheader_imageSecurityClass_set)
+    securityGroup = property(_nitropy.nitf_ImageSubheader_securityGroup_get, _nitropy.nitf_ImageSubheader_securityGroup_set)
+    encrypted = property(_nitropy.nitf_ImageSubheader_encrypted_get, _nitropy.nitf_ImageSubheader_encrypted_set)
+    imageSource = property(_nitropy.nitf_ImageSubheader_imageSource_get, _nitropy.nitf_ImageSubheader_imageSource_set)
+    numRows = property(_nitropy.nitf_ImageSubheader_numRows_get, _nitropy.nitf_ImageSubheader_numRows_set)
+    numCols = property(_nitropy.nitf_ImageSubheader_numCols_get, _nitropy.nitf_ImageSubheader_numCols_set)
+    pixelValueType = property(_nitropy.nitf_ImageSubheader_pixelValueType_get, _nitropy.nitf_ImageSubheader_pixelValueType_set)
+    imageRepresentation = property(_nitropy.nitf_ImageSubheader_imageRepresentation_get, _nitropy.nitf_ImageSubheader_imageRepresentation_set)
+    imageCategory = property(_nitropy.nitf_ImageSubheader_imageCategory_get, _nitropy.nitf_ImageSubheader_imageCategory_set)
+    actualBitsPerPixel = property(_nitropy.nitf_ImageSubheader_actualBitsPerPixel_get, _nitropy.nitf_ImageSubheader_actualBitsPerPixel_set)
+    pixelJustification = property(_nitropy.nitf_ImageSubheader_pixelJustification_get, _nitropy.nitf_ImageSubheader_pixelJustification_set)
+    imageCoordinateSystem = property(_nitropy.nitf_ImageSubheader_imageCoordinateSystem_get, _nitropy.nitf_ImageSubheader_imageCoordinateSystem_set)
+    cornerCoordinates = property(_nitropy.nitf_ImageSubheader_cornerCoordinates_get, _nitropy.nitf_ImageSubheader_cornerCoordinates_set)
+    numImageComments = property(_nitropy.nitf_ImageSubheader_numImageComments_get, _nitropy.nitf_ImageSubheader_numImageComments_set)
+    imageComments = property(_nitropy.nitf_ImageSubheader_imageComments_get, _nitropy.nitf_ImageSubheader_imageComments_set)
+    imageCompression = property(_nitropy.nitf_ImageSubheader_imageCompression_get, _nitropy.nitf_ImageSubheader_imageCompression_set)
+    compressionRate = property(_nitropy.nitf_ImageSubheader_compressionRate_get, _nitropy.nitf_ImageSubheader_compressionRate_set)
+    numImageBands = property(_nitropy.nitf_ImageSubheader_numImageBands_get, _nitropy.nitf_ImageSubheader_numImageBands_set)
+    numMultispectralImageBands = property(_nitropy.nitf_ImageSubheader_numMultispectralImageBands_get, _nitropy.nitf_ImageSubheader_numMultispectralImageBands_set)
+    bandInfo = property(_nitropy.nitf_ImageSubheader_bandInfo_get, _nitropy.nitf_ImageSubheader_bandInfo_set)
+    imageSyncCode = property(_nitropy.nitf_ImageSubheader_imageSyncCode_get, _nitropy.nitf_ImageSubheader_imageSyncCode_set)
+    imageMode = property(_nitropy.nitf_ImageSubheader_imageMode_get, _nitropy.nitf_ImageSubheader_imageMode_set)
+    numBlocksPerRow = property(_nitropy.nitf_ImageSubheader_numBlocksPerRow_get, _nitropy.nitf_ImageSubheader_numBlocksPerRow_set)
+    numBlocksPerCol = property(_nitropy.nitf_ImageSubheader_numBlocksPerCol_get, _nitropy.nitf_ImageSubheader_numBlocksPerCol_set)
+    numPixelsPerHorizBlock = property(_nitropy.nitf_ImageSubheader_numPixelsPerHorizBlock_get, _nitropy.nitf_ImageSubheader_numPixelsPerHorizBlock_set)
+    numPixelsPerVertBlock = property(_nitropy.nitf_ImageSubheader_numPixelsPerVertBlock_get, _nitropy.nitf_ImageSubheader_numPixelsPerVertBlock_set)
+    numBitsPerPixel = property(_nitropy.nitf_ImageSubheader_numBitsPerPixel_get, _nitropy.nitf_ImageSubheader_numBitsPerPixel_set)
+    imageDisplayLevel = property(_nitropy.nitf_ImageSubheader_imageDisplayLevel_get, _nitropy.nitf_ImageSubheader_imageDisplayLevel_set)
+    imageAttachmentLevel = property(_nitropy.nitf_ImageSubheader_imageAttachmentLevel_get, _nitropy.nitf_ImageSubheader_imageAttachmentLevel_set)
+    imageLocation = property(_nitropy.nitf_ImageSubheader_imageLocation_get, _nitropy.nitf_ImageSubheader_imageLocation_set)
+    imageMagnification = property(_nitropy.nitf_ImageSubheader_imageMagnification_get, _nitropy.nitf_ImageSubheader_imageMagnification_set)
+    userDefinedImageDataLength = property(_nitropy.nitf_ImageSubheader_userDefinedImageDataLength_get, _nitropy.nitf_ImageSubheader_userDefinedImageDataLength_set)
+    userDefinedOverflow = property(_nitropy.nitf_ImageSubheader_userDefinedOverflow_get, _nitropy.nitf_ImageSubheader_userDefinedOverflow_set)
+    extendedHeaderLength = property(_nitropy.nitf_ImageSubheader_extendedHeaderLength_get, _nitropy.nitf_ImageSubheader_extendedHeaderLength_set)
+    extendedHeaderOverflow = property(_nitropy.nitf_ImageSubheader_extendedHeaderOverflow_get, _nitropy.nitf_ImageSubheader_extendedHeaderOverflow_set)
+    userDefinedSection = property(_nitropy.nitf_ImageSubheader_userDefinedSection_get, _nitropy.nitf_ImageSubheader_userDefinedSection_set)
+    extendedSection = property(_nitropy.nitf_ImageSubheader_extendedSection_get, _nitropy.nitf_ImageSubheader_extendedSection_set)
     __swig_destroy__ = _nitropy.delete_nitf_ImageSubheader
-    __del__ = lambda self: None
-nitf_ImageSubheader_swigregister = _nitropy.nitf_ImageSubheader_swigregister
-nitf_ImageSubheader_swigregister(nitf_ImageSubheader)
+
+# Register nitf_ImageSubheader in _nitropy:
+_nitropy.nitf_ImageSubheader_swigregister(nitf_ImageSubheader)
 
 
-def nitf_ImageSubheader_construct(error: 'nrt_Error') -> "nitf_ImageSubheader *":
+def nitf_ImageSubheader_construct(error: "nrt_Error") -> "nitf_ImageSubheader *":
     return _nitropy.nitf_ImageSubheader_construct(error)
-nitf_ImageSubheader_construct = _nitropy.nitf_ImageSubheader_construct
 
-def nitf_ImageSubheader_clone(source: 'nitf_ImageSubheader', error: 'nrt_Error') -> "nitf_ImageSubheader *":
+def nitf_ImageSubheader_clone(source: "nitf_ImageSubheader", error: "nrt_Error") -> "nitf_ImageSubheader *":
     return _nitropy.nitf_ImageSubheader_clone(source, error)
-nitf_ImageSubheader_clone = _nitropy.nitf_ImageSubheader_clone
 
-def nitf_ImageSubheader_destruct(subhdr: 'nitf_ImageSubheader **') -> "void":
+def nitf_ImageSubheader_destruct(subhdr: "nitf_ImageSubheader **") -> "void":
     return _nitropy.nitf_ImageSubheader_destruct(subhdr)
-nitf_ImageSubheader_destruct = _nitropy.nitf_ImageSubheader_destruct
 
-def nitf_ImageSubheader_setPixelInformation(subhdr: 'nitf_ImageSubheader', pvtype: 'char const *', nbpp: 'uint32_t', abpp: 'uint32_t', justification: 'char const *', irep: 'char const *', icat: 'char const *', bandCount: 'uint32_t', bands: 'nitf_BandInfo **', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_setPixelInformation(subhdr: "nitf_ImageSubheader", pvtype: "char const *", nbpp: "uint32_t", abpp: "uint32_t", justification: "char const *", irep: "char const *", icat: "char const *", bandCount: "uint32_t", bands: "nitf_BandInfo **", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_setPixelInformation(subhdr, pvtype, nbpp, abpp, justification, irep, icat, bandCount, bands, error)
-nitf_ImageSubheader_setPixelInformation = _nitropy.nitf_ImageSubheader_setPixelInformation
 
-def nitf_ImageSubheader_getBandCount(subhdr: 'nitf_ImageSubheader', error: 'nrt_Error') -> "uint32_t":
+def nitf_ImageSubheader_getBandCount(subhdr: "nitf_ImageSubheader", error: "nrt_Error") -> "uint32_t":
     return _nitropy.nitf_ImageSubheader_getBandCount(subhdr, error)
-nitf_ImageSubheader_getBandCount = _nitropy.nitf_ImageSubheader_getBandCount
 
-def nitf_ImageSubheader_getBandInfo(subhdr: 'nitf_ImageSubheader', band: 'uint32_t', error: 'nrt_Error') -> "nitf_BandInfo *":
+def nitf_ImageSubheader_getBandInfo(subhdr: "nitf_ImageSubheader", band: "uint32_t", error: "nrt_Error") -> "nitf_BandInfo *":
     return _nitropy.nitf_ImageSubheader_getBandInfo(subhdr, band, error)
-nitf_ImageSubheader_getBandInfo = _nitropy.nitf_ImageSubheader_getBandInfo
 
-def nitf_ImageSubheader_createBands(subhdr: 'nitf_ImageSubheader', numBands: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_createBands(subhdr: "nitf_ImageSubheader", numBands: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_createBands(subhdr, numBands, error)
-nitf_ImageSubheader_createBands = _nitropy.nitf_ImageSubheader_createBands
 
-def nitf_ImageSubheader_removeBand(subhdr: 'nitf_ImageSubheader', index: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_removeBand(subhdr: "nitf_ImageSubheader", index: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_removeBand(subhdr, index, error)
-nitf_ImageSubheader_removeBand = _nitropy.nitf_ImageSubheader_removeBand
 
-def nitf_ImageSubheader_getDimensions(subhdr: 'nitf_ImageSubheader', numRows: 'uint32_t *', numCols: 'uint32_t *', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_getDimensions(subhdr: "nitf_ImageSubheader", numRows: "uint32_t *", numCols: "uint32_t *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_getDimensions(subhdr, numRows, numCols, error)
-nitf_ImageSubheader_getDimensions = _nitropy.nitf_ImageSubheader_getDimensions
 
-def nitf_ImageSubheader_getBlocking(subhdr: 'nitf_ImageSubheader', numRows: 'uint32_t *', numCols: 'uint32_t *', numRowsPerBlock: 'uint32_t *', numColsPerBlock: 'uint32_t *', numBlocksPerRow: 'uint32_t *', numBlocksPerCol: 'uint32_t *', imode: 'char *', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_getBlocking(subhdr: "nitf_ImageSubheader", numRows: "uint32_t *", numCols: "uint32_t *", numRowsPerBlock: "uint32_t *", numColsPerBlock: "uint32_t *", numBlocksPerRow: "uint32_t *", numBlocksPerCol: "uint32_t *", imode: "char *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_getBlocking(subhdr, numRows, numCols, numRowsPerBlock, numColsPerBlock, numBlocksPerRow, numBlocksPerCol, imode, error)
-nitf_ImageSubheader_getBlocking = _nitropy.nitf_ImageSubheader_getBlocking
 
-def nitf_ImageSubheader_getCompression(subhdr: 'nitf_ImageSubheader', imageCompression: 'char *', compressionRate: 'char *', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_getCompression(subhdr: "nitf_ImageSubheader", imageCompression: "char *", compressionRate: "char *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_getCompression(subhdr, imageCompression, compressionRate, error)
-nitf_ImageSubheader_getCompression = _nitropy.nitf_ImageSubheader_getCompression
 
-def nitf_ImageSubheader_setDimensions(subhdr: 'nitf_ImageSubheader', numRows: 'uint32_t', numCols: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_setDimensions(subhdr: "nitf_ImageSubheader", numRows: "uint32_t", numCols: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_setDimensions(subhdr, numRows, numCols, error)
-nitf_ImageSubheader_setDimensions = _nitropy.nitf_ImageSubheader_setDimensions
 
-def nitf_ImageSubheader_setCornersFromLatLons(subheader: 'nitf_ImageSubheader', type: 'nitf_CornersType', corners: 'double const [4][2]', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_setCornersFromLatLons(subheader: "nitf_ImageSubheader", type: "nitf_CornersType", corners: "double const [4][2]", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_setCornersFromLatLons(subheader, type, corners, error)
-nitf_ImageSubheader_setCornersFromLatLons = _nitropy.nitf_ImageSubheader_setCornersFromLatLons
 
-def nitf_ImageSubheader_getCornersType(subheader: 'nitf_ImageSubheader') -> "nitf_CornersType":
+def nitf_ImageSubheader_getCornersType(subheader: "nitf_ImageSubheader") -> "nitf_CornersType":
     return _nitropy.nitf_ImageSubheader_getCornersType(subheader)
-nitf_ImageSubheader_getCornersType = _nitropy.nitf_ImageSubheader_getCornersType
 
-def nitf_ImageSubheader_getCornersAsLatLons(subheader: 'nitf_ImageSubheader', corners: 'double [4][2]', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_getCornersAsLatLons(subheader: "nitf_ImageSubheader", corners: "double [4][2]", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_getCornersAsLatLons(subheader, corners, error)
-nitf_ImageSubheader_getCornersAsLatLons = _nitropy.nitf_ImageSubheader_getCornersAsLatLons
 
-def nitf_ImageSubheader_computeBlocking(numRows: 'uint32_t', numCols: 'uint32_t', numRowsPerBlock: 'uint32_t *', numColsPerBlock: 'uint32_t *', numBlocksPerCol: 'uint32_t *', numBlocksPerRow: 'uint32_t *') -> "void":
+def nitf_ImageSubheader_computeBlocking(numRows: "uint32_t", numCols: "uint32_t", numRowsPerBlock: "uint32_t *", numColsPerBlock: "uint32_t *", numBlocksPerCol: "uint32_t *", numBlocksPerRow: "uint32_t *") -> "void":
     return _nitropy.nitf_ImageSubheader_computeBlocking(numRows, numCols, numRowsPerBlock, numColsPerBlock, numBlocksPerCol, numBlocksPerRow)
-nitf_ImageSubheader_computeBlocking = _nitropy.nitf_ImageSubheader_computeBlocking
 
-def nitf_ImageSubheader_setBlocking(subhdr: 'nitf_ImageSubheader', numRows: 'uint32_t', numCols: 'uint32_t', numRowsPerBlock: 'uint32_t', numColsPerBlock: 'uint32_t', imode: 'char const *', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_setBlocking(subhdr: "nitf_ImageSubheader", numRows: "uint32_t", numCols: "uint32_t", numRowsPerBlock: "uint32_t", numColsPerBlock: "uint32_t", imode: "char const *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_setBlocking(subhdr, numRows, numCols, numRowsPerBlock, numColsPerBlock, imode, error)
-nitf_ImageSubheader_setBlocking = _nitropy.nitf_ImageSubheader_setBlocking
 
-def nitf_ImageSubheader_setCompression(subhdr: 'nitf_ImageSubheader', imageCompression: 'char const *', compressionRate: 'char const *', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_setCompression(subhdr: "nitf_ImageSubheader", imageCompression: "char const *", compressionRate: "char const *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_setCompression(subhdr, imageCompression, compressionRate, error)
-nitf_ImageSubheader_setCompression = _nitropy.nitf_ImageSubheader_setCompression
 
-def nitf_ImageSubheader_insertImageComment(subhdr: 'nitf_ImageSubheader', comment: 'char const *', position: 'int', error: 'nrt_Error') -> "int":
+def nitf_ImageSubheader_insertImageComment(subhdr: "nitf_ImageSubheader", comment: "char const *", position: "int", error: "nrt_Error") -> "int":
     return _nitropy.nitf_ImageSubheader_insertImageComment(subhdr, comment, position, error)
-nitf_ImageSubheader_insertImageComment = _nitropy.nitf_ImageSubheader_insertImageComment
 
-def nitf_ImageSubheader_removeImageComment(subhdr: 'nitf_ImageSubheader', position: 'int', error: 'nrt_Error') -> "bool":
+def nitf_ImageSubheader_removeImageComment(subhdr: "nitf_ImageSubheader", position: "int", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageSubheader_removeImageComment(subhdr, position, error)
-nitf_ImageSubheader_removeImageComment = _nitropy.nitf_ImageSubheader_removeImageComment
-class nitf_GraphicSegment(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_GraphicSegment, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_GraphicSegment, name)
+class nitf_GraphicSegment(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["subheader"] = _nitropy.nitf_GraphicSegment_subheader_set
-    __swig_getmethods__["subheader"] = _nitropy.nitf_GraphicSegment_subheader_get
-    if _newclass:
-        subheader = _swig_property(_nitropy.nitf_GraphicSegment_subheader_get, _nitropy.nitf_GraphicSegment_subheader_set)
-    __swig_setmethods__["offset"] = _nitropy.nitf_GraphicSegment_offset_set
-    __swig_getmethods__["offset"] = _nitropy.nitf_GraphicSegment_offset_get
-    if _newclass:
-        offset = _swig_property(_nitropy.nitf_GraphicSegment_offset_get, _nitropy.nitf_GraphicSegment_offset_set)
-    __swig_setmethods__["end"] = _nitropy.nitf_GraphicSegment_end_set
-    __swig_getmethods__["end"] = _nitropy.nitf_GraphicSegment_end_get
-    if _newclass:
-        end = _swig_property(_nitropy.nitf_GraphicSegment_end_get, _nitropy.nitf_GraphicSegment_end_set)
-    __swig_setmethods__["graphic"] = _nitropy.nitf_GraphicSegment_graphic_set
-    __swig_getmethods__["graphic"] = _nitropy.nitf_GraphicSegment_graphic_get
-    if _newclass:
-        graphic = _swig_property(_nitropy.nitf_GraphicSegment_graphic_get, _nitropy.nitf_GraphicSegment_graphic_set)
+    subheader = property(_nitropy.nitf_GraphicSegment_subheader_get, _nitropy.nitf_GraphicSegment_subheader_set)
+    offset = property(_nitropy.nitf_GraphicSegment_offset_get, _nitropy.nitf_GraphicSegment_offset_set)
+    end = property(_nitropy.nitf_GraphicSegment_end_get, _nitropy.nitf_GraphicSegment_end_set)
+    graphic = property(_nitropy.nitf_GraphicSegment_graphic_get, _nitropy.nitf_GraphicSegment_graphic_set)
     __swig_destroy__ = _nitropy.delete_nitf_GraphicSegment
-    __del__ = lambda self: None
-nitf_GraphicSegment_swigregister = _nitropy.nitf_GraphicSegment_swigregister
-nitf_GraphicSegment_swigregister(nitf_GraphicSegment)
 
+# Register nitf_GraphicSegment in _nitropy:
+_nitropy.nitf_GraphicSegment_swigregister(nitf_GraphicSegment)
 
-def nitf_GraphicSegment_construct(error: 'nrt_Error') -> "nitf_GraphicSegment *":
+
+def nitf_GraphicSegment_construct(error: "nrt_Error") -> "nitf_GraphicSegment *":
     return _nitropy.nitf_GraphicSegment_construct(error)
-nitf_GraphicSegment_construct = _nitropy.nitf_GraphicSegment_construct
 
-def nitf_GraphicSegment_clone(source: 'nitf_GraphicSegment', error: 'nrt_Error') -> "nitf_GraphicSegment *":
+def nitf_GraphicSegment_clone(source: "nitf_GraphicSegment", error: "nrt_Error") -> "nitf_GraphicSegment *":
     return _nitropy.nitf_GraphicSegment_clone(source, error)
-nitf_GraphicSegment_clone = _nitropy.nitf_GraphicSegment_clone
 
-def nitf_GraphicSegment_destruct(segment: 'nitf_GraphicSegment **') -> "void":
+def nitf_GraphicSegment_destruct(segment: "nitf_GraphicSegment **") -> "void":
     return _nitropy.nitf_GraphicSegment_destruct(segment)
-nitf_GraphicSegment_destruct = _nitropy.nitf_GraphicSegment_destruct
 NITF_SY_SZ = _nitropy.NITF_SY_SZ
 NITF_SID_SZ = _nitropy.NITF_SID_SZ
 NITF_SNAME_SZ = _nitropy.NITF_SNAME_SZ
@@ -2034,146 +1231,68 @@ NITF_SBND2_SZ = _nitropy.NITF_SBND2_SZ
 NITF_SRES2_SZ = _nitropy.NITF_SRES2_SZ
 NITF_SXSHDL_SZ = _nitropy.NITF_SXSHDL_SZ
 NITF_SXSOFL_SZ = _nitropy.NITF_SXSOFL_SZ
-class nitf_GraphicSubheader(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_GraphicSubheader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_GraphicSubheader, name)
+class nitf_GraphicSubheader(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["filePartType"] = _nitropy.nitf_GraphicSubheader_filePartType_set
-    __swig_getmethods__["filePartType"] = _nitropy.nitf_GraphicSubheader_filePartType_get
-    if _newclass:
-        filePartType = _swig_property(_nitropy.nitf_GraphicSubheader_filePartType_get, _nitropy.nitf_GraphicSubheader_filePartType_set)
-    __swig_setmethods__["graphicID"] = _nitropy.nitf_GraphicSubheader_graphicID_set
-    __swig_getmethods__["graphicID"] = _nitropy.nitf_GraphicSubheader_graphicID_get
-    if _newclass:
-        graphicID = _swig_property(_nitropy.nitf_GraphicSubheader_graphicID_get, _nitropy.nitf_GraphicSubheader_graphicID_set)
-    __swig_setmethods__["name"] = _nitropy.nitf_GraphicSubheader_name_set
-    __swig_getmethods__["name"] = _nitropy.nitf_GraphicSubheader_name_get
-    if _newclass:
-        name = _swig_property(_nitropy.nitf_GraphicSubheader_name_get, _nitropy.nitf_GraphicSubheader_name_set)
-    __swig_setmethods__["securityClass"] = _nitropy.nitf_GraphicSubheader_securityClass_set
-    __swig_getmethods__["securityClass"] = _nitropy.nitf_GraphicSubheader_securityClass_get
-    if _newclass:
-        securityClass = _swig_property(_nitropy.nitf_GraphicSubheader_securityClass_get, _nitropy.nitf_GraphicSubheader_securityClass_set)
-    __swig_setmethods__["securityGroup"] = _nitropy.nitf_GraphicSubheader_securityGroup_set
-    __swig_getmethods__["securityGroup"] = _nitropy.nitf_GraphicSubheader_securityGroup_get
-    if _newclass:
-        securityGroup = _swig_property(_nitropy.nitf_GraphicSubheader_securityGroup_get, _nitropy.nitf_GraphicSubheader_securityGroup_set)
-    __swig_setmethods__["encrypted"] = _nitropy.nitf_GraphicSubheader_encrypted_set
-    __swig_getmethods__["encrypted"] = _nitropy.nitf_GraphicSubheader_encrypted_get
-    if _newclass:
-        encrypted = _swig_property(_nitropy.nitf_GraphicSubheader_encrypted_get, _nitropy.nitf_GraphicSubheader_encrypted_set)
-    __swig_setmethods__["stype"] = _nitropy.nitf_GraphicSubheader_stype_set
-    __swig_getmethods__["stype"] = _nitropy.nitf_GraphicSubheader_stype_get
-    if _newclass:
-        stype = _swig_property(_nitropy.nitf_GraphicSubheader_stype_get, _nitropy.nitf_GraphicSubheader_stype_set)
-    __swig_setmethods__["res1"] = _nitropy.nitf_GraphicSubheader_res1_set
-    __swig_getmethods__["res1"] = _nitropy.nitf_GraphicSubheader_res1_get
-    if _newclass:
-        res1 = _swig_property(_nitropy.nitf_GraphicSubheader_res1_get, _nitropy.nitf_GraphicSubheader_res1_set)
-    __swig_setmethods__["displayLevel"] = _nitropy.nitf_GraphicSubheader_displayLevel_set
-    __swig_getmethods__["displayLevel"] = _nitropy.nitf_GraphicSubheader_displayLevel_get
-    if _newclass:
-        displayLevel = _swig_property(_nitropy.nitf_GraphicSubheader_displayLevel_get, _nitropy.nitf_GraphicSubheader_displayLevel_set)
-    __swig_setmethods__["attachmentLevel"] = _nitropy.nitf_GraphicSubheader_attachmentLevel_set
-    __swig_getmethods__["attachmentLevel"] = _nitropy.nitf_GraphicSubheader_attachmentLevel_get
-    if _newclass:
-        attachmentLevel = _swig_property(_nitropy.nitf_GraphicSubheader_attachmentLevel_get, _nitropy.nitf_GraphicSubheader_attachmentLevel_set)
-    __swig_setmethods__["location"] = _nitropy.nitf_GraphicSubheader_location_set
-    __swig_getmethods__["location"] = _nitropy.nitf_GraphicSubheader_location_get
-    if _newclass:
-        location = _swig_property(_nitropy.nitf_GraphicSubheader_location_get, _nitropy.nitf_GraphicSubheader_location_set)
-    __swig_setmethods__["bound1Loc"] = _nitropy.nitf_GraphicSubheader_bound1Loc_set
-    __swig_getmethods__["bound1Loc"] = _nitropy.nitf_GraphicSubheader_bound1Loc_get
-    if _newclass:
-        bound1Loc = _swig_property(_nitropy.nitf_GraphicSubheader_bound1Loc_get, _nitropy.nitf_GraphicSubheader_bound1Loc_set)
-    __swig_setmethods__["color"] = _nitropy.nitf_GraphicSubheader_color_set
-    __swig_getmethods__["color"] = _nitropy.nitf_GraphicSubheader_color_get
-    if _newclass:
-        color = _swig_property(_nitropy.nitf_GraphicSubheader_color_get, _nitropy.nitf_GraphicSubheader_color_set)
-    __swig_setmethods__["bound2Loc"] = _nitropy.nitf_GraphicSubheader_bound2Loc_set
-    __swig_getmethods__["bound2Loc"] = _nitropy.nitf_GraphicSubheader_bound2Loc_get
-    if _newclass:
-        bound2Loc = _swig_property(_nitropy.nitf_GraphicSubheader_bound2Loc_get, _nitropy.nitf_GraphicSubheader_bound2Loc_set)
-    __swig_setmethods__["res2"] = _nitropy.nitf_GraphicSubheader_res2_set
-    __swig_getmethods__["res2"] = _nitropy.nitf_GraphicSubheader_res2_get
-    if _newclass:
-        res2 = _swig_property(_nitropy.nitf_GraphicSubheader_res2_get, _nitropy.nitf_GraphicSubheader_res2_set)
-    __swig_setmethods__["extendedHeaderLength"] = _nitropy.nitf_GraphicSubheader_extendedHeaderLength_set
-    __swig_getmethods__["extendedHeaderLength"] = _nitropy.nitf_GraphicSubheader_extendedHeaderLength_get
-    if _newclass:
-        extendedHeaderLength = _swig_property(_nitropy.nitf_GraphicSubheader_extendedHeaderLength_get, _nitropy.nitf_GraphicSubheader_extendedHeaderLength_set)
-    __swig_setmethods__["extendedHeaderOverflow"] = _nitropy.nitf_GraphicSubheader_extendedHeaderOverflow_set
-    __swig_getmethods__["extendedHeaderOverflow"] = _nitropy.nitf_GraphicSubheader_extendedHeaderOverflow_get
-    if _newclass:
-        extendedHeaderOverflow = _swig_property(_nitropy.nitf_GraphicSubheader_extendedHeaderOverflow_get, _nitropy.nitf_GraphicSubheader_extendedHeaderOverflow_set)
-    __swig_setmethods__["extendedSection"] = _nitropy.nitf_GraphicSubheader_extendedSection_set
-    __swig_getmethods__["extendedSection"] = _nitropy.nitf_GraphicSubheader_extendedSection_get
-    if _newclass:
-        extendedSection = _swig_property(_nitropy.nitf_GraphicSubheader_extendedSection_get, _nitropy.nitf_GraphicSubheader_extendedSection_set)
+    filePartType = property(_nitropy.nitf_GraphicSubheader_filePartType_get, _nitropy.nitf_GraphicSubheader_filePartType_set)
+    graphicID = property(_nitropy.nitf_GraphicSubheader_graphicID_get, _nitropy.nitf_GraphicSubheader_graphicID_set)
+    name = property(_nitropy.nitf_GraphicSubheader_name_get, _nitropy.nitf_GraphicSubheader_name_set)
+    securityClass = property(_nitropy.nitf_GraphicSubheader_securityClass_get, _nitropy.nitf_GraphicSubheader_securityClass_set)
+    securityGroup = property(_nitropy.nitf_GraphicSubheader_securityGroup_get, _nitropy.nitf_GraphicSubheader_securityGroup_set)
+    encrypted = property(_nitropy.nitf_GraphicSubheader_encrypted_get, _nitropy.nitf_GraphicSubheader_encrypted_set)
+    stype = property(_nitropy.nitf_GraphicSubheader_stype_get, _nitropy.nitf_GraphicSubheader_stype_set)
+    res1 = property(_nitropy.nitf_GraphicSubheader_res1_get, _nitropy.nitf_GraphicSubheader_res1_set)
+    displayLevel = property(_nitropy.nitf_GraphicSubheader_displayLevel_get, _nitropy.nitf_GraphicSubheader_displayLevel_set)
+    attachmentLevel = property(_nitropy.nitf_GraphicSubheader_attachmentLevel_get, _nitropy.nitf_GraphicSubheader_attachmentLevel_set)
+    location = property(_nitropy.nitf_GraphicSubheader_location_get, _nitropy.nitf_GraphicSubheader_location_set)
+    bound1Loc = property(_nitropy.nitf_GraphicSubheader_bound1Loc_get, _nitropy.nitf_GraphicSubheader_bound1Loc_set)
+    color = property(_nitropy.nitf_GraphicSubheader_color_get, _nitropy.nitf_GraphicSubheader_color_set)
+    bound2Loc = property(_nitropy.nitf_GraphicSubheader_bound2Loc_get, _nitropy.nitf_GraphicSubheader_bound2Loc_set)
+    res2 = property(_nitropy.nitf_GraphicSubheader_res2_get, _nitropy.nitf_GraphicSubheader_res2_set)
+    extendedHeaderLength = property(_nitropy.nitf_GraphicSubheader_extendedHeaderLength_get, _nitropy.nitf_GraphicSubheader_extendedHeaderLength_set)
+    extendedHeaderOverflow = property(_nitropy.nitf_GraphicSubheader_extendedHeaderOverflow_get, _nitropy.nitf_GraphicSubheader_extendedHeaderOverflow_set)
+    extendedSection = property(_nitropy.nitf_GraphicSubheader_extendedSection_get, _nitropy.nitf_GraphicSubheader_extendedSection_set)
     __swig_destroy__ = _nitropy.delete_nitf_GraphicSubheader
-    __del__ = lambda self: None
-nitf_GraphicSubheader_swigregister = _nitropy.nitf_GraphicSubheader_swigregister
-nitf_GraphicSubheader_swigregister(nitf_GraphicSubheader)
+
+# Register nitf_GraphicSubheader in _nitropy:
+_nitropy.nitf_GraphicSubheader_swigregister(nitf_GraphicSubheader)
 
 
-def nitf_GraphicSubheader_construct(error: 'nrt_Error') -> "nitf_GraphicSubheader *":
+def nitf_GraphicSubheader_construct(error: "nrt_Error") -> "nitf_GraphicSubheader *":
     return _nitropy.nitf_GraphicSubheader_construct(error)
-nitf_GraphicSubheader_construct = _nitropy.nitf_GraphicSubheader_construct
 
-def nitf_GraphicSubheader_clone(source: 'nitf_GraphicSubheader', error: 'nrt_Error') -> "nitf_GraphicSubheader *":
+def nitf_GraphicSubheader_clone(source: "nitf_GraphicSubheader", error: "nrt_Error") -> "nitf_GraphicSubheader *":
     return _nitropy.nitf_GraphicSubheader_clone(source, error)
-nitf_GraphicSubheader_clone = _nitropy.nitf_GraphicSubheader_clone
 
-def nitf_GraphicSubheader_destruct(subhdr: 'nitf_GraphicSubheader **') -> "void":
+def nitf_GraphicSubheader_destruct(subhdr: "nitf_GraphicSubheader **") -> "void":
     return _nitropy.nitf_GraphicSubheader_destruct(subhdr)
-nitf_GraphicSubheader_destruct = _nitropy.nitf_GraphicSubheader_destruct
-class nitf_LabelSegment(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_LabelSegment, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_LabelSegment, name)
+class nitf_LabelSegment(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["subheader"] = _nitropy.nitf_LabelSegment_subheader_set
-    __swig_getmethods__["subheader"] = _nitropy.nitf_LabelSegment_subheader_get
-    if _newclass:
-        subheader = _swig_property(_nitropy.nitf_LabelSegment_subheader_get, _nitropy.nitf_LabelSegment_subheader_set)
-    __swig_setmethods__["offset"] = _nitropy.nitf_LabelSegment_offset_set
-    __swig_getmethods__["offset"] = _nitropy.nitf_LabelSegment_offset_get
-    if _newclass:
-        offset = _swig_property(_nitropy.nitf_LabelSegment_offset_get, _nitropy.nitf_LabelSegment_offset_set)
-    __swig_setmethods__["end"] = _nitropy.nitf_LabelSegment_end_set
-    __swig_getmethods__["end"] = _nitropy.nitf_LabelSegment_end_get
-    if _newclass:
-        end = _swig_property(_nitropy.nitf_LabelSegment_end_get, _nitropy.nitf_LabelSegment_end_set)
-    __swig_setmethods__["label"] = _nitropy.nitf_LabelSegment_label_set
-    __swig_getmethods__["label"] = _nitropy.nitf_LabelSegment_label_get
-    if _newclass:
-        label = _swig_property(_nitropy.nitf_LabelSegment_label_get, _nitropy.nitf_LabelSegment_label_set)
+    subheader = property(_nitropy.nitf_LabelSegment_subheader_get, _nitropy.nitf_LabelSegment_subheader_set)
+    offset = property(_nitropy.nitf_LabelSegment_offset_get, _nitropy.nitf_LabelSegment_offset_set)
+    end = property(_nitropy.nitf_LabelSegment_end_get, _nitropy.nitf_LabelSegment_end_set)
+    label = property(_nitropy.nitf_LabelSegment_label_get, _nitropy.nitf_LabelSegment_label_set)
     __swig_destroy__ = _nitropy.delete_nitf_LabelSegment
-    __del__ = lambda self: None
-nitf_LabelSegment_swigregister = _nitropy.nitf_LabelSegment_swigregister
-nitf_LabelSegment_swigregister(nitf_LabelSegment)
 
+# Register nitf_LabelSegment in _nitropy:
+_nitropy.nitf_LabelSegment_swigregister(nitf_LabelSegment)
 
-def nitf_LabelSegment_construct(error: 'nrt_Error') -> "nitf_LabelSegment *":
+
+def nitf_LabelSegment_construct(error: "nrt_Error") -> "nitf_LabelSegment *":
     return _nitropy.nitf_LabelSegment_construct(error)
-nitf_LabelSegment_construct = _nitropy.nitf_LabelSegment_construct
 
-def nitf_LabelSegment_clone(source: 'nitf_LabelSegment', error: 'nrt_Error') -> "nitf_LabelSegment *":
+def nitf_LabelSegment_clone(source: "nitf_LabelSegment", error: "nrt_Error") -> "nitf_LabelSegment *":
     return _nitropy.nitf_LabelSegment_clone(source, error)
-nitf_LabelSegment_clone = _nitropy.nitf_LabelSegment_clone
 
-def nitf_LabelSegment_destruct(segment: 'nitf_LabelSegment **') -> "void":
+def nitf_LabelSegment_destruct(segment: "nitf_LabelSegment **") -> "void":
     return _nitropy.nitf_LabelSegment_destruct(segment)
-nitf_LabelSegment_destruct = _nitropy.nitf_LabelSegment_destruct
 NITF_LA_SZ = _nitropy.NITF_LA_SZ
 NITF_LID_SZ = _nitropy.NITF_LID_SZ
 NITF_LSCLAS_SZ = _nitropy.NITF_LSCLAS_SZ
@@ -2188,138 +1307,66 @@ NITF_LTC_SZ = _nitropy.NITF_LTC_SZ
 NITF_LBC_SZ = _nitropy.NITF_LBC_SZ
 NITF_LXSHDL_SZ = _nitropy.NITF_LXSHDL_SZ
 NITF_LXSOFL_SZ = _nitropy.NITF_LXSOFL_SZ
-class nitf_LabelSubheader(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_LabelSubheader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_LabelSubheader, name)
+class nitf_LabelSubheader(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["filePartType"] = _nitropy.nitf_LabelSubheader_filePartType_set
-    __swig_getmethods__["filePartType"] = _nitropy.nitf_LabelSubheader_filePartType_get
-    if _newclass:
-        filePartType = _swig_property(_nitropy.nitf_LabelSubheader_filePartType_get, _nitropy.nitf_LabelSubheader_filePartType_set)
-    __swig_setmethods__["labelID"] = _nitropy.nitf_LabelSubheader_labelID_set
-    __swig_getmethods__["labelID"] = _nitropy.nitf_LabelSubheader_labelID_get
-    if _newclass:
-        labelID = _swig_property(_nitropy.nitf_LabelSubheader_labelID_get, _nitropy.nitf_LabelSubheader_labelID_set)
-    __swig_setmethods__["securityClass"] = _nitropy.nitf_LabelSubheader_securityClass_set
-    __swig_getmethods__["securityClass"] = _nitropy.nitf_LabelSubheader_securityClass_get
-    if _newclass:
-        securityClass = _swig_property(_nitropy.nitf_LabelSubheader_securityClass_get, _nitropy.nitf_LabelSubheader_securityClass_set)
-    __swig_setmethods__["securityGroup"] = _nitropy.nitf_LabelSubheader_securityGroup_set
-    __swig_getmethods__["securityGroup"] = _nitropy.nitf_LabelSubheader_securityGroup_get
-    if _newclass:
-        securityGroup = _swig_property(_nitropy.nitf_LabelSubheader_securityGroup_get, _nitropy.nitf_LabelSubheader_securityGroup_set)
-    __swig_setmethods__["encrypted"] = _nitropy.nitf_LabelSubheader_encrypted_set
-    __swig_getmethods__["encrypted"] = _nitropy.nitf_LabelSubheader_encrypted_get
-    if _newclass:
-        encrypted = _swig_property(_nitropy.nitf_LabelSubheader_encrypted_get, _nitropy.nitf_LabelSubheader_encrypted_set)
-    __swig_setmethods__["fontStyle"] = _nitropy.nitf_LabelSubheader_fontStyle_set
-    __swig_getmethods__["fontStyle"] = _nitropy.nitf_LabelSubheader_fontStyle_get
-    if _newclass:
-        fontStyle = _swig_property(_nitropy.nitf_LabelSubheader_fontStyle_get, _nitropy.nitf_LabelSubheader_fontStyle_set)
-    __swig_setmethods__["cellWidth"] = _nitropy.nitf_LabelSubheader_cellWidth_set
-    __swig_getmethods__["cellWidth"] = _nitropy.nitf_LabelSubheader_cellWidth_get
-    if _newclass:
-        cellWidth = _swig_property(_nitropy.nitf_LabelSubheader_cellWidth_get, _nitropy.nitf_LabelSubheader_cellWidth_set)
-    __swig_setmethods__["cellHeight"] = _nitropy.nitf_LabelSubheader_cellHeight_set
-    __swig_getmethods__["cellHeight"] = _nitropy.nitf_LabelSubheader_cellHeight_get
-    if _newclass:
-        cellHeight = _swig_property(_nitropy.nitf_LabelSubheader_cellHeight_get, _nitropy.nitf_LabelSubheader_cellHeight_set)
-    __swig_setmethods__["displayLevel"] = _nitropy.nitf_LabelSubheader_displayLevel_set
-    __swig_getmethods__["displayLevel"] = _nitropy.nitf_LabelSubheader_displayLevel_get
-    if _newclass:
-        displayLevel = _swig_property(_nitropy.nitf_LabelSubheader_displayLevel_get, _nitropy.nitf_LabelSubheader_displayLevel_set)
-    __swig_setmethods__["attachmentLevel"] = _nitropy.nitf_LabelSubheader_attachmentLevel_set
-    __swig_getmethods__["attachmentLevel"] = _nitropy.nitf_LabelSubheader_attachmentLevel_get
-    if _newclass:
-        attachmentLevel = _swig_property(_nitropy.nitf_LabelSubheader_attachmentLevel_get, _nitropy.nitf_LabelSubheader_attachmentLevel_set)
-    __swig_setmethods__["locationRow"] = _nitropy.nitf_LabelSubheader_locationRow_set
-    __swig_getmethods__["locationRow"] = _nitropy.nitf_LabelSubheader_locationRow_get
-    if _newclass:
-        locationRow = _swig_property(_nitropy.nitf_LabelSubheader_locationRow_get, _nitropy.nitf_LabelSubheader_locationRow_set)
-    __swig_setmethods__["locationColumn"] = _nitropy.nitf_LabelSubheader_locationColumn_set
-    __swig_getmethods__["locationColumn"] = _nitropy.nitf_LabelSubheader_locationColumn_get
-    if _newclass:
-        locationColumn = _swig_property(_nitropy.nitf_LabelSubheader_locationColumn_get, _nitropy.nitf_LabelSubheader_locationColumn_set)
-    __swig_setmethods__["textColor"] = _nitropy.nitf_LabelSubheader_textColor_set
-    __swig_getmethods__["textColor"] = _nitropy.nitf_LabelSubheader_textColor_get
-    if _newclass:
-        textColor = _swig_property(_nitropy.nitf_LabelSubheader_textColor_get, _nitropy.nitf_LabelSubheader_textColor_set)
-    __swig_setmethods__["backgroundColor"] = _nitropy.nitf_LabelSubheader_backgroundColor_set
-    __swig_getmethods__["backgroundColor"] = _nitropy.nitf_LabelSubheader_backgroundColor_get
-    if _newclass:
-        backgroundColor = _swig_property(_nitropy.nitf_LabelSubheader_backgroundColor_get, _nitropy.nitf_LabelSubheader_backgroundColor_set)
-    __swig_setmethods__["extendedHeaderLength"] = _nitropy.nitf_LabelSubheader_extendedHeaderLength_set
-    __swig_getmethods__["extendedHeaderLength"] = _nitropy.nitf_LabelSubheader_extendedHeaderLength_get
-    if _newclass:
-        extendedHeaderLength = _swig_property(_nitropy.nitf_LabelSubheader_extendedHeaderLength_get, _nitropy.nitf_LabelSubheader_extendedHeaderLength_set)
-    __swig_setmethods__["extendedHeaderOverflow"] = _nitropy.nitf_LabelSubheader_extendedHeaderOverflow_set
-    __swig_getmethods__["extendedHeaderOverflow"] = _nitropy.nitf_LabelSubheader_extendedHeaderOverflow_get
-    if _newclass:
-        extendedHeaderOverflow = _swig_property(_nitropy.nitf_LabelSubheader_extendedHeaderOverflow_get, _nitropy.nitf_LabelSubheader_extendedHeaderOverflow_set)
-    __swig_setmethods__["extendedSection"] = _nitropy.nitf_LabelSubheader_extendedSection_set
-    __swig_getmethods__["extendedSection"] = _nitropy.nitf_LabelSubheader_extendedSection_get
-    if _newclass:
-        extendedSection = _swig_property(_nitropy.nitf_LabelSubheader_extendedSection_get, _nitropy.nitf_LabelSubheader_extendedSection_set)
+    filePartType = property(_nitropy.nitf_LabelSubheader_filePartType_get, _nitropy.nitf_LabelSubheader_filePartType_set)
+    labelID = property(_nitropy.nitf_LabelSubheader_labelID_get, _nitropy.nitf_LabelSubheader_labelID_set)
+    securityClass = property(_nitropy.nitf_LabelSubheader_securityClass_get, _nitropy.nitf_LabelSubheader_securityClass_set)
+    securityGroup = property(_nitropy.nitf_LabelSubheader_securityGroup_get, _nitropy.nitf_LabelSubheader_securityGroup_set)
+    encrypted = property(_nitropy.nitf_LabelSubheader_encrypted_get, _nitropy.nitf_LabelSubheader_encrypted_set)
+    fontStyle = property(_nitropy.nitf_LabelSubheader_fontStyle_get, _nitropy.nitf_LabelSubheader_fontStyle_set)
+    cellWidth = property(_nitropy.nitf_LabelSubheader_cellWidth_get, _nitropy.nitf_LabelSubheader_cellWidth_set)
+    cellHeight = property(_nitropy.nitf_LabelSubheader_cellHeight_get, _nitropy.nitf_LabelSubheader_cellHeight_set)
+    displayLevel = property(_nitropy.nitf_LabelSubheader_displayLevel_get, _nitropy.nitf_LabelSubheader_displayLevel_set)
+    attachmentLevel = property(_nitropy.nitf_LabelSubheader_attachmentLevel_get, _nitropy.nitf_LabelSubheader_attachmentLevel_set)
+    locationRow = property(_nitropy.nitf_LabelSubheader_locationRow_get, _nitropy.nitf_LabelSubheader_locationRow_set)
+    locationColumn = property(_nitropy.nitf_LabelSubheader_locationColumn_get, _nitropy.nitf_LabelSubheader_locationColumn_set)
+    textColor = property(_nitropy.nitf_LabelSubheader_textColor_get, _nitropy.nitf_LabelSubheader_textColor_set)
+    backgroundColor = property(_nitropy.nitf_LabelSubheader_backgroundColor_get, _nitropy.nitf_LabelSubheader_backgroundColor_set)
+    extendedHeaderLength = property(_nitropy.nitf_LabelSubheader_extendedHeaderLength_get, _nitropy.nitf_LabelSubheader_extendedHeaderLength_set)
+    extendedHeaderOverflow = property(_nitropy.nitf_LabelSubheader_extendedHeaderOverflow_get, _nitropy.nitf_LabelSubheader_extendedHeaderOverflow_set)
+    extendedSection = property(_nitropy.nitf_LabelSubheader_extendedSection_get, _nitropy.nitf_LabelSubheader_extendedSection_set)
     __swig_destroy__ = _nitropy.delete_nitf_LabelSubheader
-    __del__ = lambda self: None
-nitf_LabelSubheader_swigregister = _nitropy.nitf_LabelSubheader_swigregister
-nitf_LabelSubheader_swigregister(nitf_LabelSubheader)
+
+# Register nitf_LabelSubheader in _nitropy:
+_nitropy.nitf_LabelSubheader_swigregister(nitf_LabelSubheader)
 
 
-def nitf_LabelSubheader_construct(error: 'nrt_Error') -> "nitf_LabelSubheader *":
+def nitf_LabelSubheader_construct(error: "nrt_Error") -> "nitf_LabelSubheader *":
     return _nitropy.nitf_LabelSubheader_construct(error)
-nitf_LabelSubheader_construct = _nitropy.nitf_LabelSubheader_construct
 
-def nitf_LabelSubheader_clone(source: 'nitf_LabelSubheader', error: 'nrt_Error') -> "nitf_LabelSubheader *":
+def nitf_LabelSubheader_clone(source: "nitf_LabelSubheader", error: "nrt_Error") -> "nitf_LabelSubheader *":
     return _nitropy.nitf_LabelSubheader_clone(source, error)
-nitf_LabelSubheader_clone = _nitropy.nitf_LabelSubheader_clone
 
-def nitf_LabelSubheader_destruct(subhdr: 'nitf_LabelSubheader **') -> "void":
+def nitf_LabelSubheader_destruct(subhdr: "nitf_LabelSubheader **") -> "void":
     return _nitropy.nitf_LabelSubheader_destruct(subhdr)
-nitf_LabelSubheader_destruct = _nitropy.nitf_LabelSubheader_destruct
-class nitf_TextSegment(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_TextSegment, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_TextSegment, name)
+class nitf_TextSegment(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["subheader"] = _nitropy.nitf_TextSegment_subheader_set
-    __swig_getmethods__["subheader"] = _nitropy.nitf_TextSegment_subheader_get
-    if _newclass:
-        subheader = _swig_property(_nitropy.nitf_TextSegment_subheader_get, _nitropy.nitf_TextSegment_subheader_set)
-    __swig_setmethods__["offset"] = _nitropy.nitf_TextSegment_offset_set
-    __swig_getmethods__["offset"] = _nitropy.nitf_TextSegment_offset_get
-    if _newclass:
-        offset = _swig_property(_nitropy.nitf_TextSegment_offset_get, _nitropy.nitf_TextSegment_offset_set)
-    __swig_setmethods__["end"] = _nitropy.nitf_TextSegment_end_set
-    __swig_getmethods__["end"] = _nitropy.nitf_TextSegment_end_get
-    if _newclass:
-        end = _swig_property(_nitropy.nitf_TextSegment_end_get, _nitropy.nitf_TextSegment_end_set)
+    subheader = property(_nitropy.nitf_TextSegment_subheader_get, _nitropy.nitf_TextSegment_subheader_set)
+    offset = property(_nitropy.nitf_TextSegment_offset_get, _nitropy.nitf_TextSegment_offset_set)
+    end = property(_nitropy.nitf_TextSegment_end_get, _nitropy.nitf_TextSegment_end_set)
     __swig_destroy__ = _nitropy.delete_nitf_TextSegment
-    __del__ = lambda self: None
-nitf_TextSegment_swigregister = _nitropy.nitf_TextSegment_swigregister
-nitf_TextSegment_swigregister(nitf_TextSegment)
 
+# Register nitf_TextSegment in _nitropy:
+_nitropy.nitf_TextSegment_swigregister(nitf_TextSegment)
 
-def nitf_TextSegment_construct(error: 'nrt_Error') -> "nitf_TextSegment *":
+
+def nitf_TextSegment_construct(error: "nrt_Error") -> "nitf_TextSegment *":
     return _nitropy.nitf_TextSegment_construct(error)
-nitf_TextSegment_construct = _nitropy.nitf_TextSegment_construct
 
-def nitf_TextSegment_clone(source: 'nitf_TextSegment', error: 'nrt_Error') -> "nitf_TextSegment *":
+def nitf_TextSegment_clone(source: "nitf_TextSegment", error: "nrt_Error") -> "nitf_TextSegment *":
     return _nitropy.nitf_TextSegment_clone(source, error)
-nitf_TextSegment_clone = _nitropy.nitf_TextSegment_clone
 
-def nitf_TextSegment_destruct(segment: 'nitf_TextSegment **') -> "void":
+def nitf_TextSegment_destruct(segment: "nitf_TextSegment **") -> "void":
     return _nitropy.nitf_TextSegment_destruct(segment)
-nitf_TextSegment_destruct = _nitropy.nitf_TextSegment_destruct
 NITF_TE_SZ = _nitropy.NITF_TE_SZ
 NITF_TEXTID_SZ = _nitropy.NITF_TEXTID_SZ
 NITF_TXTALVL_SZ = _nitropy.NITF_TXTALVL_SZ
@@ -2329,118 +1376,61 @@ NITF_TSCLAS_SZ = _nitropy.NITF_TSCLAS_SZ
 NITF_TXTFMT_SZ = _nitropy.NITF_TXTFMT_SZ
 NITF_TXSHDL_SZ = _nitropy.NITF_TXSHDL_SZ
 NITF_TXSOFL_SZ = _nitropy.NITF_TXSOFL_SZ
-class nitf_TextSubheader(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_TextSubheader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_TextSubheader, name)
+class nitf_TextSubheader(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["filePartType"] = _nitropy.nitf_TextSubheader_filePartType_set
-    __swig_getmethods__["filePartType"] = _nitropy.nitf_TextSubheader_filePartType_get
-    if _newclass:
-        filePartType = _swig_property(_nitropy.nitf_TextSubheader_filePartType_get, _nitropy.nitf_TextSubheader_filePartType_set)
-    __swig_setmethods__["textID"] = _nitropy.nitf_TextSubheader_textID_set
-    __swig_getmethods__["textID"] = _nitropy.nitf_TextSubheader_textID_get
-    if _newclass:
-        textID = _swig_property(_nitropy.nitf_TextSubheader_textID_get, _nitropy.nitf_TextSubheader_textID_set)
-    __swig_setmethods__["attachmentLevel"] = _nitropy.nitf_TextSubheader_attachmentLevel_set
-    __swig_getmethods__["attachmentLevel"] = _nitropy.nitf_TextSubheader_attachmentLevel_get
-    if _newclass:
-        attachmentLevel = _swig_property(_nitropy.nitf_TextSubheader_attachmentLevel_get, _nitropy.nitf_TextSubheader_attachmentLevel_set)
-    __swig_setmethods__["dateTime"] = _nitropy.nitf_TextSubheader_dateTime_set
-    __swig_getmethods__["dateTime"] = _nitropy.nitf_TextSubheader_dateTime_get
-    if _newclass:
-        dateTime = _swig_property(_nitropy.nitf_TextSubheader_dateTime_get, _nitropy.nitf_TextSubheader_dateTime_set)
-    __swig_setmethods__["title"] = _nitropy.nitf_TextSubheader_title_set
-    __swig_getmethods__["title"] = _nitropy.nitf_TextSubheader_title_get
-    if _newclass:
-        title = _swig_property(_nitropy.nitf_TextSubheader_title_get, _nitropy.nitf_TextSubheader_title_set)
-    __swig_setmethods__["securityClass"] = _nitropy.nitf_TextSubheader_securityClass_set
-    __swig_getmethods__["securityClass"] = _nitropy.nitf_TextSubheader_securityClass_get
-    if _newclass:
-        securityClass = _swig_property(_nitropy.nitf_TextSubheader_securityClass_get, _nitropy.nitf_TextSubheader_securityClass_set)
-    __swig_setmethods__["securityGroup"] = _nitropy.nitf_TextSubheader_securityGroup_set
-    __swig_getmethods__["securityGroup"] = _nitropy.nitf_TextSubheader_securityGroup_get
-    if _newclass:
-        securityGroup = _swig_property(_nitropy.nitf_TextSubheader_securityGroup_get, _nitropy.nitf_TextSubheader_securityGroup_set)
-    __swig_setmethods__["encrypted"] = _nitropy.nitf_TextSubheader_encrypted_set
-    __swig_getmethods__["encrypted"] = _nitropy.nitf_TextSubheader_encrypted_get
-    if _newclass:
-        encrypted = _swig_property(_nitropy.nitf_TextSubheader_encrypted_get, _nitropy.nitf_TextSubheader_encrypted_set)
-    __swig_setmethods__["format"] = _nitropy.nitf_TextSubheader_format_set
-    __swig_getmethods__["format"] = _nitropy.nitf_TextSubheader_format_get
-    if _newclass:
-        format = _swig_property(_nitropy.nitf_TextSubheader_format_get, _nitropy.nitf_TextSubheader_format_set)
-    __swig_setmethods__["extendedHeaderLength"] = _nitropy.nitf_TextSubheader_extendedHeaderLength_set
-    __swig_getmethods__["extendedHeaderLength"] = _nitropy.nitf_TextSubheader_extendedHeaderLength_get
-    if _newclass:
-        extendedHeaderLength = _swig_property(_nitropy.nitf_TextSubheader_extendedHeaderLength_get, _nitropy.nitf_TextSubheader_extendedHeaderLength_set)
-    __swig_setmethods__["extendedHeaderOverflow"] = _nitropy.nitf_TextSubheader_extendedHeaderOverflow_set
-    __swig_getmethods__["extendedHeaderOverflow"] = _nitropy.nitf_TextSubheader_extendedHeaderOverflow_get
-    if _newclass:
-        extendedHeaderOverflow = _swig_property(_nitropy.nitf_TextSubheader_extendedHeaderOverflow_get, _nitropy.nitf_TextSubheader_extendedHeaderOverflow_set)
-    __swig_setmethods__["extendedSection"] = _nitropy.nitf_TextSubheader_extendedSection_set
-    __swig_getmethods__["extendedSection"] = _nitropy.nitf_TextSubheader_extendedSection_get
-    if _newclass:
-        extendedSection = _swig_property(_nitropy.nitf_TextSubheader_extendedSection_get, _nitropy.nitf_TextSubheader_extendedSection_set)
+    filePartType = property(_nitropy.nitf_TextSubheader_filePartType_get, _nitropy.nitf_TextSubheader_filePartType_set)
+    textID = property(_nitropy.nitf_TextSubheader_textID_get, _nitropy.nitf_TextSubheader_textID_set)
+    attachmentLevel = property(_nitropy.nitf_TextSubheader_attachmentLevel_get, _nitropy.nitf_TextSubheader_attachmentLevel_set)
+    dateTime = property(_nitropy.nitf_TextSubheader_dateTime_get, _nitropy.nitf_TextSubheader_dateTime_set)
+    title = property(_nitropy.nitf_TextSubheader_title_get, _nitropy.nitf_TextSubheader_title_set)
+    securityClass = property(_nitropy.nitf_TextSubheader_securityClass_get, _nitropy.nitf_TextSubheader_securityClass_set)
+    securityGroup = property(_nitropy.nitf_TextSubheader_securityGroup_get, _nitropy.nitf_TextSubheader_securityGroup_set)
+    encrypted = property(_nitropy.nitf_TextSubheader_encrypted_get, _nitropy.nitf_TextSubheader_encrypted_set)
+    format = property(_nitropy.nitf_TextSubheader_format_get, _nitropy.nitf_TextSubheader_format_set)
+    extendedHeaderLength = property(_nitropy.nitf_TextSubheader_extendedHeaderLength_get, _nitropy.nitf_TextSubheader_extendedHeaderLength_set)
+    extendedHeaderOverflow = property(_nitropy.nitf_TextSubheader_extendedHeaderOverflow_get, _nitropy.nitf_TextSubheader_extendedHeaderOverflow_set)
+    extendedSection = property(_nitropy.nitf_TextSubheader_extendedSection_get, _nitropy.nitf_TextSubheader_extendedSection_set)
     __swig_destroy__ = _nitropy.delete_nitf_TextSubheader
-    __del__ = lambda self: None
-nitf_TextSubheader_swigregister = _nitropy.nitf_TextSubheader_swigregister
-nitf_TextSubheader_swigregister(nitf_TextSubheader)
+
+# Register nitf_TextSubheader in _nitropy:
+_nitropy.nitf_TextSubheader_swigregister(nitf_TextSubheader)
 
 
-def nitf_TextSubheader_construct(error: 'nrt_Error') -> "nitf_TextSubheader *":
+def nitf_TextSubheader_construct(error: "nrt_Error") -> "nitf_TextSubheader *":
     return _nitropy.nitf_TextSubheader_construct(error)
-nitf_TextSubheader_construct = _nitropy.nitf_TextSubheader_construct
 
-def nitf_TextSubheader_clone(source: 'nitf_TextSubheader', error: 'nrt_Error') -> "nitf_TextSubheader *":
+def nitf_TextSubheader_clone(source: "nitf_TextSubheader", error: "nrt_Error") -> "nitf_TextSubheader *":
     return _nitropy.nitf_TextSubheader_clone(source, error)
-nitf_TextSubheader_clone = _nitropy.nitf_TextSubheader_clone
 
-def nitf_TextSubheader_destruct(subhdr: 'nitf_TextSubheader **') -> "void":
+def nitf_TextSubheader_destruct(subhdr: "nitf_TextSubheader **") -> "void":
     return _nitropy.nitf_TextSubheader_destruct(subhdr)
-nitf_TextSubheader_destruct = _nitropy.nitf_TextSubheader_destruct
-class nitf_DESegment(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_DESegment, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_DESegment, name)
+class nitf_DESegment(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["subheader"] = _nitropy.nitf_DESegment_subheader_set
-    __swig_getmethods__["subheader"] = _nitropy.nitf_DESegment_subheader_get
-    if _newclass:
-        subheader = _swig_property(_nitropy.nitf_DESegment_subheader_get, _nitropy.nitf_DESegment_subheader_set)
-    __swig_setmethods__["offset"] = _nitropy.nitf_DESegment_offset_set
-    __swig_getmethods__["offset"] = _nitropy.nitf_DESegment_offset_get
-    if _newclass:
-        offset = _swig_property(_nitropy.nitf_DESegment_offset_get, _nitropy.nitf_DESegment_offset_set)
-    __swig_setmethods__["end"] = _nitropy.nitf_DESegment_end_set
-    __swig_getmethods__["end"] = _nitropy.nitf_DESegment_end_get
-    if _newclass:
-        end = _swig_property(_nitropy.nitf_DESegment_end_get, _nitropy.nitf_DESegment_end_set)
+    subheader = property(_nitropy.nitf_DESegment_subheader_get, _nitropy.nitf_DESegment_subheader_set)
+    offset = property(_nitropy.nitf_DESegment_offset_get, _nitropy.nitf_DESegment_offset_set)
+    end = property(_nitropy.nitf_DESegment_end_get, _nitropy.nitf_DESegment_end_set)
     __swig_destroy__ = _nitropy.delete_nitf_DESegment
-    __del__ = lambda self: None
-nitf_DESegment_swigregister = _nitropy.nitf_DESegment_swigregister
-nitf_DESegment_swigregister(nitf_DESegment)
 
+# Register nitf_DESegment in _nitropy:
+_nitropy.nitf_DESegment_swigregister(nitf_DESegment)
 
-def nitf_DESegment_construct(error: 'nrt_Error') -> "nitf_DESegment *":
+
+def nitf_DESegment_construct(error: "nrt_Error") -> "nitf_DESegment *":
     return _nitropy.nitf_DESegment_construct(error)
-nitf_DESegment_construct = _nitropy.nitf_DESegment_construct
 
-def nitf_DESegment_clone(source: 'nitf_DESegment', error: 'nrt_Error') -> "nitf_DESegment *":
+def nitf_DESegment_clone(source: "nitf_DESegment", error: "nrt_Error") -> "nitf_DESegment *":
     return _nitropy.nitf_DESegment_clone(source, error)
-nitf_DESegment_clone = _nitropy.nitf_DESegment_clone
 
-def nitf_DESegment_destruct(segment: 'nitf_DESegment **') -> "void":
+def nitf_DESegment_destruct(segment: "nitf_DESegment **") -> "void":
     return _nitropy.nitf_DESegment_destruct(segment)
-nitf_DESegment_destruct = _nitropy.nitf_DESegment_destruct
 NITF_DE_SZ = _nitropy.NITF_DE_SZ
 NITF_DESTAG_SZ = _nitropy.NITF_DESTAG_SZ
 NITF_DESVER_SZ = _nitropy.NITF_DESVER_SZ
@@ -2448,743 +1438,424 @@ NITF_DESCLAS_SZ = _nitropy.NITF_DESCLAS_SZ
 NITF_DESOFLW_SZ = _nitropy.NITF_DESOFLW_SZ
 NITF_DESITEM_SZ = _nitropy.NITF_DESITEM_SZ
 NITF_DESSHL_SZ = _nitropy.NITF_DESSHL_SZ
-class nitf_DESubheader(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_DESubheader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_DESubheader, name)
+class nitf_DESubheader(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["filePartType"] = _nitropy.nitf_DESubheader_filePartType_set
-    __swig_getmethods__["filePartType"] = _nitropy.nitf_DESubheader_filePartType_get
-    if _newclass:
-        filePartType = _swig_property(_nitropy.nitf_DESubheader_filePartType_get, _nitropy.nitf_DESubheader_filePartType_set)
-    __swig_setmethods__["typeID"] = _nitropy.nitf_DESubheader_typeID_set
-    __swig_getmethods__["typeID"] = _nitropy.nitf_DESubheader_typeID_get
-    if _newclass:
-        typeID = _swig_property(_nitropy.nitf_DESubheader_typeID_get, _nitropy.nitf_DESubheader_typeID_set)
-    __swig_setmethods__["version"] = _nitropy.nitf_DESubheader_version_set
-    __swig_getmethods__["version"] = _nitropy.nitf_DESubheader_version_get
-    if _newclass:
-        version = _swig_property(_nitropy.nitf_DESubheader_version_get, _nitropy.nitf_DESubheader_version_set)
-    __swig_setmethods__["securityClass"] = _nitropy.nitf_DESubheader_securityClass_set
-    __swig_getmethods__["securityClass"] = _nitropy.nitf_DESubheader_securityClass_get
-    if _newclass:
-        securityClass = _swig_property(_nitropy.nitf_DESubheader_securityClass_get, _nitropy.nitf_DESubheader_securityClass_set)
-    __swig_setmethods__["securityGroup"] = _nitropy.nitf_DESubheader_securityGroup_set
-    __swig_getmethods__["securityGroup"] = _nitropy.nitf_DESubheader_securityGroup_get
-    if _newclass:
-        securityGroup = _swig_property(_nitropy.nitf_DESubheader_securityGroup_get, _nitropy.nitf_DESubheader_securityGroup_set)
-    __swig_setmethods__["overflowedHeaderType"] = _nitropy.nitf_DESubheader_overflowedHeaderType_set
-    __swig_getmethods__["overflowedHeaderType"] = _nitropy.nitf_DESubheader_overflowedHeaderType_get
-    if _newclass:
-        overflowedHeaderType = _swig_property(_nitropy.nitf_DESubheader_overflowedHeaderType_get, _nitropy.nitf_DESubheader_overflowedHeaderType_set)
-    __swig_setmethods__["dataItemOverflowed"] = _nitropy.nitf_DESubheader_dataItemOverflowed_set
-    __swig_getmethods__["dataItemOverflowed"] = _nitropy.nitf_DESubheader_dataItemOverflowed_get
-    if _newclass:
-        dataItemOverflowed = _swig_property(_nitropy.nitf_DESubheader_dataItemOverflowed_get, _nitropy.nitf_DESubheader_dataItemOverflowed_set)
-    __swig_setmethods__["subheaderFieldsLength"] = _nitropy.nitf_DESubheader_subheaderFieldsLength_set
-    __swig_getmethods__["subheaderFieldsLength"] = _nitropy.nitf_DESubheader_subheaderFieldsLength_get
-    if _newclass:
-        subheaderFieldsLength = _swig_property(_nitropy.nitf_DESubheader_subheaderFieldsLength_get, _nitropy.nitf_DESubheader_subheaderFieldsLength_set)
-    __swig_setmethods__["subheaderFields"] = _nitropy.nitf_DESubheader_subheaderFields_set
-    __swig_getmethods__["subheaderFields"] = _nitropy.nitf_DESubheader_subheaderFields_get
-    if _newclass:
-        subheaderFields = _swig_property(_nitropy.nitf_DESubheader_subheaderFields_get, _nitropy.nitf_DESubheader_subheaderFields_set)
-    __swig_setmethods__["dataLength"] = _nitropy.nitf_DESubheader_dataLength_set
-    __swig_getmethods__["dataLength"] = _nitropy.nitf_DESubheader_dataLength_get
-    if _newclass:
-        dataLength = _swig_property(_nitropy.nitf_DESubheader_dataLength_get, _nitropy.nitf_DESubheader_dataLength_set)
-    __swig_setmethods__["userDefinedSection"] = _nitropy.nitf_DESubheader_userDefinedSection_set
-    __swig_getmethods__["userDefinedSection"] = _nitropy.nitf_DESubheader_userDefinedSection_get
-    if _newclass:
-        userDefinedSection = _swig_property(_nitropy.nitf_DESubheader_userDefinedSection_get, _nitropy.nitf_DESubheader_userDefinedSection_set)
+    filePartType = property(_nitropy.nitf_DESubheader_filePartType_get, _nitropy.nitf_DESubheader_filePartType_set)
+    typeID = property(_nitropy.nitf_DESubheader_typeID_get, _nitropy.nitf_DESubheader_typeID_set)
+    version = property(_nitropy.nitf_DESubheader_version_get, _nitropy.nitf_DESubheader_version_set)
+    securityClass = property(_nitropy.nitf_DESubheader_securityClass_get, _nitropy.nitf_DESubheader_securityClass_set)
+    securityGroup = property(_nitropy.nitf_DESubheader_securityGroup_get, _nitropy.nitf_DESubheader_securityGroup_set)
+    overflowedHeaderType = property(_nitropy.nitf_DESubheader_overflowedHeaderType_get, _nitropy.nitf_DESubheader_overflowedHeaderType_set)
+    dataItemOverflowed = property(_nitropy.nitf_DESubheader_dataItemOverflowed_get, _nitropy.nitf_DESubheader_dataItemOverflowed_set)
+    subheaderFieldsLength = property(_nitropy.nitf_DESubheader_subheaderFieldsLength_get, _nitropy.nitf_DESubheader_subheaderFieldsLength_set)
+    subheaderFields = property(_nitropy.nitf_DESubheader_subheaderFields_get, _nitropy.nitf_DESubheader_subheaderFields_set)
+    dataLength = property(_nitropy.nitf_DESubheader_dataLength_get, _nitropy.nitf_DESubheader_dataLength_set)
+    userDefinedSection = property(_nitropy.nitf_DESubheader_userDefinedSection_get, _nitropy.nitf_DESubheader_userDefinedSection_set)
     __swig_destroy__ = _nitropy.delete_nitf_DESubheader
-    __del__ = lambda self: None
-nitf_DESubheader_swigregister = _nitropy.nitf_DESubheader_swigregister
-nitf_DESubheader_swigregister(nitf_DESubheader)
+
+# Register nitf_DESubheader in _nitropy:
+_nitropy.nitf_DESubheader_swigregister(nitf_DESubheader)
 
 
-def nitf_DESubheader_construct(error: 'nrt_Error') -> "nitf_DESubheader *":
+def nitf_DESubheader_construct(error: "nrt_Error") -> "nitf_DESubheader *":
     return _nitropy.nitf_DESubheader_construct(error)
-nitf_DESubheader_construct = _nitropy.nitf_DESubheader_construct
 
-def nitf_DESubheader_clone(source: 'nitf_DESubheader', error: 'nrt_Error') -> "nitf_DESubheader *":
+def nitf_DESubheader_clone(source: "nitf_DESubheader", error: "nrt_Error") -> "nitf_DESubheader *":
     return _nitropy.nitf_DESubheader_clone(source, error)
-nitf_DESubheader_clone = _nitropy.nitf_DESubheader_clone
 
-def nitf_DESubheader_destruct(subhdr: 'nitf_DESubheader **') -> "void":
+def nitf_DESubheader_destruct(subhdr: "nitf_DESubheader **") -> "void":
     return _nitropy.nitf_DESubheader_destruct(subhdr)
-nitf_DESubheader_destruct = _nitropy.nitf_DESubheader_destruct
-class nitf_RESegment(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_RESegment, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_RESegment, name)
+class nitf_RESegment(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["subheader"] = _nitropy.nitf_RESegment_subheader_set
-    __swig_getmethods__["subheader"] = _nitropy.nitf_RESegment_subheader_get
-    if _newclass:
-        subheader = _swig_property(_nitropy.nitf_RESegment_subheader_get, _nitropy.nitf_RESegment_subheader_set)
-    __swig_setmethods__["offset"] = _nitropy.nitf_RESegment_offset_set
-    __swig_getmethods__["offset"] = _nitropy.nitf_RESegment_offset_get
-    if _newclass:
-        offset = _swig_property(_nitropy.nitf_RESegment_offset_get, _nitropy.nitf_RESegment_offset_set)
-    __swig_setmethods__["end"] = _nitropy.nitf_RESegment_end_set
-    __swig_getmethods__["end"] = _nitropy.nitf_RESegment_end_get
-    if _newclass:
-        end = _swig_property(_nitropy.nitf_RESegment_end_get, _nitropy.nitf_RESegment_end_set)
-    __swig_setmethods__["data"] = _nitropy.nitf_RESegment_data_set
-    __swig_getmethods__["data"] = _nitropy.nitf_RESegment_data_get
-    if _newclass:
-        data = _swig_property(_nitropy.nitf_RESegment_data_get, _nitropy.nitf_RESegment_data_set)
+    subheader = property(_nitropy.nitf_RESegment_subheader_get, _nitropy.nitf_RESegment_subheader_set)
+    offset = property(_nitropy.nitf_RESegment_offset_get, _nitropy.nitf_RESegment_offset_set)
+    end = property(_nitropy.nitf_RESegment_end_get, _nitropy.nitf_RESegment_end_set)
+    data = property(_nitropy.nitf_RESegment_data_get, _nitropy.nitf_RESegment_data_set)
     __swig_destroy__ = _nitropy.delete_nitf_RESegment
-    __del__ = lambda self: None
-nitf_RESegment_swigregister = _nitropy.nitf_RESegment_swigregister
-nitf_RESegment_swigregister(nitf_RESegment)
 
+# Register nitf_RESegment in _nitropy:
+_nitropy.nitf_RESegment_swigregister(nitf_RESegment)
 
-def nitf_RESegment_construct(error: 'nrt_Error') -> "nitf_RESegment *":
+
+def nitf_RESegment_construct(error: "nrt_Error") -> "nitf_RESegment *":
     return _nitropy.nitf_RESegment_construct(error)
-nitf_RESegment_construct = _nitropy.nitf_RESegment_construct
 
-def nitf_RESegment_clone(source: 'nitf_RESegment', error: 'nrt_Error') -> "nitf_RESegment *":
+def nitf_RESegment_clone(source: "nitf_RESegment", error: "nrt_Error") -> "nitf_RESegment *":
     return _nitropy.nitf_RESegment_clone(source, error)
-nitf_RESegment_clone = _nitropy.nitf_RESegment_clone
 
-def nitf_RESegment_destruct(segment: 'nitf_RESegment **') -> "void":
+def nitf_RESegment_destruct(segment: "nitf_RESegment **") -> "void":
     return _nitropy.nitf_RESegment_destruct(segment)
-nitf_RESegment_destruct = _nitropy.nitf_RESegment_destruct
 NITF_RE_SZ = _nitropy.NITF_RE_SZ
 NITF_RESTAG_SZ = _nitropy.NITF_RESTAG_SZ
 NITF_RESVER_SZ = _nitropy.NITF_RESVER_SZ
 NITF_RESCLAS_SZ = _nitropy.NITF_RESCLAS_SZ
 NITF_RESSHL_SZ = _nitropy.NITF_RESSHL_SZ
-class nitf_RESubheader(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_RESubheader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_RESubheader, name)
+class nitf_RESubheader(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["filePartType"] = _nitropy.nitf_RESubheader_filePartType_set
-    __swig_getmethods__["filePartType"] = _nitropy.nitf_RESubheader_filePartType_get
-    if _newclass:
-        filePartType = _swig_property(_nitropy.nitf_RESubheader_filePartType_get, _nitropy.nitf_RESubheader_filePartType_set)
-    __swig_setmethods__["typeID"] = _nitropy.nitf_RESubheader_typeID_set
-    __swig_getmethods__["typeID"] = _nitropy.nitf_RESubheader_typeID_get
-    if _newclass:
-        typeID = _swig_property(_nitropy.nitf_RESubheader_typeID_get, _nitropy.nitf_RESubheader_typeID_set)
-    __swig_setmethods__["version"] = _nitropy.nitf_RESubheader_version_set
-    __swig_getmethods__["version"] = _nitropy.nitf_RESubheader_version_get
-    if _newclass:
-        version = _swig_property(_nitropy.nitf_RESubheader_version_get, _nitropy.nitf_RESubheader_version_set)
-    __swig_setmethods__["securityClass"] = _nitropy.nitf_RESubheader_securityClass_set
-    __swig_getmethods__["securityClass"] = _nitropy.nitf_RESubheader_securityClass_get
-    if _newclass:
-        securityClass = _swig_property(_nitropy.nitf_RESubheader_securityClass_get, _nitropy.nitf_RESubheader_securityClass_set)
-    __swig_setmethods__["securityGroup"] = _nitropy.nitf_RESubheader_securityGroup_set
-    __swig_getmethods__["securityGroup"] = _nitropy.nitf_RESubheader_securityGroup_get
-    if _newclass:
-        securityGroup = _swig_property(_nitropy.nitf_RESubheader_securityGroup_get, _nitropy.nitf_RESubheader_securityGroup_set)
-    __swig_setmethods__["subheaderFieldsLength"] = _nitropy.nitf_RESubheader_subheaderFieldsLength_set
-    __swig_getmethods__["subheaderFieldsLength"] = _nitropy.nitf_RESubheader_subheaderFieldsLength_get
-    if _newclass:
-        subheaderFieldsLength = _swig_property(_nitropy.nitf_RESubheader_subheaderFieldsLength_get, _nitropy.nitf_RESubheader_subheaderFieldsLength_set)
-    __swig_setmethods__["subheaderFields"] = _nitropy.nitf_RESubheader_subheaderFields_set
-    __swig_getmethods__["subheaderFields"] = _nitropy.nitf_RESubheader_subheaderFields_get
-    if _newclass:
-        subheaderFields = _swig_property(_nitropy.nitf_RESubheader_subheaderFields_get, _nitropy.nitf_RESubheader_subheaderFields_set)
-    __swig_setmethods__["dataLength"] = _nitropy.nitf_RESubheader_dataLength_set
-    __swig_getmethods__["dataLength"] = _nitropy.nitf_RESubheader_dataLength_get
-    if _newclass:
-        dataLength = _swig_property(_nitropy.nitf_RESubheader_dataLength_get, _nitropy.nitf_RESubheader_dataLength_set)
+    filePartType = property(_nitropy.nitf_RESubheader_filePartType_get, _nitropy.nitf_RESubheader_filePartType_set)
+    typeID = property(_nitropy.nitf_RESubheader_typeID_get, _nitropy.nitf_RESubheader_typeID_set)
+    version = property(_nitropy.nitf_RESubheader_version_get, _nitropy.nitf_RESubheader_version_set)
+    securityClass = property(_nitropy.nitf_RESubheader_securityClass_get, _nitropy.nitf_RESubheader_securityClass_set)
+    securityGroup = property(_nitropy.nitf_RESubheader_securityGroup_get, _nitropy.nitf_RESubheader_securityGroup_set)
+    subheaderFieldsLength = property(_nitropy.nitf_RESubheader_subheaderFieldsLength_get, _nitropy.nitf_RESubheader_subheaderFieldsLength_set)
+    subheaderFields = property(_nitropy.nitf_RESubheader_subheaderFields_get, _nitropy.nitf_RESubheader_subheaderFields_set)
+    dataLength = property(_nitropy.nitf_RESubheader_dataLength_get, _nitropy.nitf_RESubheader_dataLength_set)
     __swig_destroy__ = _nitropy.delete_nitf_RESubheader
-    __del__ = lambda self: None
-nitf_RESubheader_swigregister = _nitropy.nitf_RESubheader_swigregister
-nitf_RESubheader_swigregister(nitf_RESubheader)
+
+# Register nitf_RESubheader in _nitropy:
+_nitropy.nitf_RESubheader_swigregister(nitf_RESubheader)
 
 
-def nitf_RESubheader_construct(error: 'nrt_Error') -> "nitf_RESubheader *":
+def nitf_RESubheader_construct(error: "nrt_Error") -> "nitf_RESubheader *":
     return _nitropy.nitf_RESubheader_construct(error)
-nitf_RESubheader_construct = _nitropy.nitf_RESubheader_construct
 
-def nitf_RESubheader_clone(source: 'nitf_RESubheader', error: 'nrt_Error') -> "nitf_RESubheader *":
+def nitf_RESubheader_clone(source: "nitf_RESubheader", error: "nrt_Error") -> "nitf_RESubheader *":
     return _nitropy.nitf_RESubheader_clone(source, error)
-nitf_RESubheader_clone = _nitropy.nitf_RESubheader_clone
 
-def nitf_RESubheader_destruct(subhdr: 'nitf_RESubheader **') -> "void":
+def nitf_RESubheader_destruct(subhdr: "nitf_RESubheader **") -> "void":
     return _nitropy.nitf_RESubheader_destruct(subhdr)
-nitf_RESubheader_destruct = _nitropy.nitf_RESubheader_destruct
-class nitf_ComponentInfo(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ComponentInfo, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ComponentInfo, name)
+class nitf_ComponentInfo(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["lengthSubheader"] = _nitropy.nitf_ComponentInfo_lengthSubheader_set
-    __swig_getmethods__["lengthSubheader"] = _nitropy.nitf_ComponentInfo_lengthSubheader_get
-    if _newclass:
-        lengthSubheader = _swig_property(_nitropy.nitf_ComponentInfo_lengthSubheader_get, _nitropy.nitf_ComponentInfo_lengthSubheader_set)
-    __swig_setmethods__["lengthData"] = _nitropy.nitf_ComponentInfo_lengthData_set
-    __swig_getmethods__["lengthData"] = _nitropy.nitf_ComponentInfo_lengthData_get
-    if _newclass:
-        lengthData = _swig_property(_nitropy.nitf_ComponentInfo_lengthData_get, _nitropy.nitf_ComponentInfo_lengthData_set)
+    lengthSubheader = property(_nitropy.nitf_ComponentInfo_lengthSubheader_get, _nitropy.nitf_ComponentInfo_lengthSubheader_set)
+    lengthData = property(_nitropy.nitf_ComponentInfo_lengthData_get, _nitropy.nitf_ComponentInfo_lengthData_set)
     __swig_destroy__ = _nitropy.delete_nitf_ComponentInfo
-    __del__ = lambda self: None
-nitf_ComponentInfo_swigregister = _nitropy.nitf_ComponentInfo_swigregister
-nitf_ComponentInfo_swigregister(nitf_ComponentInfo)
 
+# Register nitf_ComponentInfo in _nitropy:
+_nitropy.nitf_ComponentInfo_swigregister(nitf_ComponentInfo)
 
-def nitf_ComponentInfo_construct(subheaderFieldWidth: 'uint32_t', dataFieldWidth: 'uint32_t', error: 'nrt_Error') -> "nitf_ComponentInfo *":
+
+def nitf_ComponentInfo_construct(subheaderFieldWidth: "uint32_t", dataFieldWidth: "uint32_t", error: "nrt_Error") -> "nitf_ComponentInfo *":
     return _nitropy.nitf_ComponentInfo_construct(subheaderFieldWidth, dataFieldWidth, error)
-nitf_ComponentInfo_construct = _nitropy.nitf_ComponentInfo_construct
 
-def nitf_ComponentInfo_clone(source: 'nitf_ComponentInfo', error: 'nrt_Error') -> "nitf_ComponentInfo *":
+def nitf_ComponentInfo_clone(source: "nitf_ComponentInfo", error: "nrt_Error") -> "nitf_ComponentInfo *":
     return _nitropy.nitf_ComponentInfo_clone(source, error)
-nitf_ComponentInfo_clone = _nitropy.nitf_ComponentInfo_clone
 
-def nitf_ComponentInfo_destruct(info: 'nitf_ComponentInfo **') -> "void":
+def nitf_ComponentInfo_destruct(info: "nitf_ComponentInfo **") -> "void":
     return _nitropy.nitf_ComponentInfo_destruct(info)
-nitf_ComponentInfo_destruct = _nitropy.nitf_ComponentInfo_destruct
-class nitf_ImageReader(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_ImageReader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_ImageReader, name)
+class nitf_ImageReader(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["input"] = _nitropy.nitf_ImageReader_input_set
-    __swig_getmethods__["input"] = _nitropy.nitf_ImageReader_input_get
-    if _newclass:
-        input = _swig_property(_nitropy.nitf_ImageReader_input_get, _nitropy.nitf_ImageReader_input_set)
-    __swig_setmethods__["imageDeblocker"] = _nitropy.nitf_ImageReader_imageDeblocker_set
-    __swig_getmethods__["imageDeblocker"] = _nitropy.nitf_ImageReader_imageDeblocker_get
-    if _newclass:
-        imageDeblocker = _swig_property(_nitropy.nitf_ImageReader_imageDeblocker_get, _nitropy.nitf_ImageReader_imageDeblocker_set)
-    __swig_setmethods__["directBlockRead"] = _nitropy.nitf_ImageReader_directBlockRead_set
-    __swig_getmethods__["directBlockRead"] = _nitropy.nitf_ImageReader_directBlockRead_get
-    if _newclass:
-        directBlockRead = _swig_property(_nitropy.nitf_ImageReader_directBlockRead_get, _nitropy.nitf_ImageReader_directBlockRead_set)
+    input = property(_nitropy.nitf_ImageReader_input_get, _nitropy.nitf_ImageReader_input_set)
+    imageDeblocker = property(_nitropy.nitf_ImageReader_imageDeblocker_get, _nitropy.nitf_ImageReader_imageDeblocker_set)
+    directBlockRead = property(_nitropy.nitf_ImageReader_directBlockRead_get, _nitropy.nitf_ImageReader_directBlockRead_set)
     __swig_destroy__ = _nitropy.delete_nitf_ImageReader
-    __del__ = lambda self: None
-nitf_ImageReader_swigregister = _nitropy.nitf_ImageReader_swigregister
-nitf_ImageReader_swigregister(nitf_ImageReader)
+
+# Register nitf_ImageReader in _nitropy:
+_nitropy.nitf_ImageReader_swigregister(nitf_ImageReader)
 
 
-def nitf_ImageReader_getBlockingInfo(imageReader: 'nitf_ImageReader', error: 'nrt_Error') -> "nitf_BlockingInfo *":
+def nitf_ImageReader_getBlockingInfo(imageReader: "nitf_ImageReader", error: "nrt_Error") -> "nitf_BlockingInfo *":
     return _nitropy.nitf_ImageReader_getBlockingInfo(imageReader, error)
-nitf_ImageReader_getBlockingInfo = _nitropy.nitf_ImageReader_getBlockingInfo
 
-def nitf_ImageReader_read(imageReader: 'nitf_ImageReader', subWindow: 'nitf_SubWindow', user: 'uint8_t **', padded: 'int *', error: 'nrt_Error') -> "bool":
+def nitf_ImageReader_read(imageReader: "nitf_ImageReader", subWindow: "nitf_SubWindow", user: "uint8_t **", padded: "int *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_ImageReader_read(imageReader, subWindow, user, padded, error)
-nitf_ImageReader_read = _nitropy.nitf_ImageReader_read
 
-def nitf_ImageReader_readBlock(imageReader: 'nitf_ImageReader', blockNumber: 'uint32_t', blockSize: 'uint64_t *', error: 'nrt_Error') -> "uint8_t *":
+def nitf_ImageReader_readBlock(imageReader: "nitf_ImageReader", blockNumber: "uint32_t", blockSize: "uint64_t *", error: "nrt_Error") -> "uint8_t *":
     return _nitropy.nitf_ImageReader_readBlock(imageReader, blockNumber, blockSize, error)
-nitf_ImageReader_readBlock = _nitropy.nitf_ImageReader_readBlock
 
-def nitf_ImageReader_destruct(imageReader: 'nitf_ImageReader **') -> "void":
+def nitf_ImageReader_destruct(imageReader: "nitf_ImageReader **") -> "void":
     return _nitropy.nitf_ImageReader_destruct(imageReader)
-nitf_ImageReader_destruct = _nitropy.nitf_ImageReader_destruct
 
-def nitf_ImageReader_setReadCaching(iReader: 'nitf_ImageReader') -> "void":
+def nitf_ImageReader_setReadCaching(iReader: "nitf_ImageReader") -> "void":
     return _nitropy.nitf_ImageReader_setReadCaching(iReader)
-nitf_ImageReader_setReadCaching = _nitropy.nitf_ImageReader_setReadCaching
-class nitf_SegmentReader(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_SegmentReader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_SegmentReader, name)
+class nitf_SegmentReader(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["input"] = _nitropy.nitf_SegmentReader_input_set
-    __swig_getmethods__["input"] = _nitropy.nitf_SegmentReader_input_get
-    if _newclass:
-        input = _swig_property(_nitropy.nitf_SegmentReader_input_get, _nitropy.nitf_SegmentReader_input_set)
-    __swig_setmethods__["dataLength"] = _nitropy.nitf_SegmentReader_dataLength_set
-    __swig_getmethods__["dataLength"] = _nitropy.nitf_SegmentReader_dataLength_get
-    if _newclass:
-        dataLength = _swig_property(_nitropy.nitf_SegmentReader_dataLength_get, _nitropy.nitf_SegmentReader_dataLength_set)
-    __swig_setmethods__["baseOffset"] = _nitropy.nitf_SegmentReader_baseOffset_set
-    __swig_getmethods__["baseOffset"] = _nitropy.nitf_SegmentReader_baseOffset_get
-    if _newclass:
-        baseOffset = _swig_property(_nitropy.nitf_SegmentReader_baseOffset_get, _nitropy.nitf_SegmentReader_baseOffset_set)
-    __swig_setmethods__["virtualOffset"] = _nitropy.nitf_SegmentReader_virtualOffset_set
-    __swig_getmethods__["virtualOffset"] = _nitropy.nitf_SegmentReader_virtualOffset_get
-    if _newclass:
-        virtualOffset = _swig_property(_nitropy.nitf_SegmentReader_virtualOffset_get, _nitropy.nitf_SegmentReader_virtualOffset_set)
+    input = property(_nitropy.nitf_SegmentReader_input_get, _nitropy.nitf_SegmentReader_input_set)
+    dataLength = property(_nitropy.nitf_SegmentReader_dataLength_get, _nitropy.nitf_SegmentReader_dataLength_set)
+    baseOffset = property(_nitropy.nitf_SegmentReader_baseOffset_get, _nitropy.nitf_SegmentReader_baseOffset_set)
+    virtualOffset = property(_nitropy.nitf_SegmentReader_virtualOffset_get, _nitropy.nitf_SegmentReader_virtualOffset_set)
     __swig_destroy__ = _nitropy.delete_nitf_SegmentReader
-    __del__ = lambda self: None
-nitf_SegmentReader_swigregister = _nitropy.nitf_SegmentReader_swigregister
-nitf_SegmentReader_swigregister(nitf_SegmentReader)
 
+# Register nitf_SegmentReader in _nitropy:
+_nitropy.nitf_SegmentReader_swigregister(nitf_SegmentReader)
 
-def nitf_SegmentReader_read(segmentReader: 'nitf_SegmentReader', buffer: 'NITF_DATA *', count: 'size_t', error: 'nrt_Error') -> "bool":
+
+def nitf_SegmentReader_read(segmentReader: "nitf_SegmentReader", buffer: "NITF_DATA *", count: "size_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_SegmentReader_read(segmentReader, buffer, count, error)
-nitf_SegmentReader_read = _nitropy.nitf_SegmentReader_read
 
-def nitf_SegmentReader_seek(segmentReader: 'nitf_SegmentReader', offset: 'nitf_Off', whence: 'int', error: 'nrt_Error') -> "nitf_Off":
+def nitf_SegmentReader_seek(segmentReader: "nitf_SegmentReader", offset: "nitf_Off", whence: "int", error: "nrt_Error") -> "nitf_Off":
     return _nitropy.nitf_SegmentReader_seek(segmentReader, offset, whence, error)
-nitf_SegmentReader_seek = _nitropy.nitf_SegmentReader_seek
 
-def nitf_SegmentReader_tell(segmentReader: 'nitf_SegmentReader', error: 'nrt_Error') -> "nitf_Off":
+def nitf_SegmentReader_tell(segmentReader: "nitf_SegmentReader", error: "nrt_Error") -> "nitf_Off":
     return _nitropy.nitf_SegmentReader_tell(segmentReader, error)
-nitf_SegmentReader_tell = _nitropy.nitf_SegmentReader_tell
 
-def nitf_SegmentReader_getSize(segmentReader: 'nitf_SegmentReader', error: 'nrt_Error') -> "nitf_Off":
+def nitf_SegmentReader_getSize(segmentReader: "nitf_SegmentReader", error: "nrt_Error") -> "nitf_Off":
     return _nitropy.nitf_SegmentReader_getSize(segmentReader, error)
-nitf_SegmentReader_getSize = _nitropy.nitf_SegmentReader_getSize
 
-def nitf_SegmentReader_destruct(segmentReader: 'nitf_SegmentReader **') -> "void":
+def nitf_SegmentReader_destruct(segmentReader: "nitf_SegmentReader **") -> "void":
     return _nitropy.nitf_SegmentReader_destruct(segmentReader)
-nitf_SegmentReader_destruct = _nitropy.nitf_SegmentReader_destruct
 
-def nitf_SegmentWriter_construct(error: 'nrt_Error') -> "nitf_SegmentWriter *":
+def nitf_SegmentWriter_construct(error: "nrt_Error") -> "nitf_SegmentWriter *":
     return _nitropy.nitf_SegmentWriter_construct(error)
-nitf_SegmentWriter_construct = _nitropy.nitf_SegmentWriter_construct
 
-def nitf_SegmentWriter_attachSource(writer: 'nitf_SegmentWriter *', segmentSource: 'nitf_DataSource', error: 'nrt_Error') -> "bool":
+def nitf_SegmentWriter_attachSource(writer: "nitf_SegmentWriter *", segmentSource: "nitf_DataSource", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_SegmentWriter_attachSource(writer, segmentSource, error)
-nitf_SegmentWriter_attachSource = _nitropy.nitf_SegmentWriter_attachSource
-class nitf_SubWindow(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_SubWindow, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_SubWindow, name)
+class nitf_SubWindow(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["startRow"] = _nitropy.nitf_SubWindow_startRow_set
-    __swig_getmethods__["startRow"] = _nitropy.nitf_SubWindow_startRow_get
-    if _newclass:
-        startRow = _swig_property(_nitropy.nitf_SubWindow_startRow_get, _nitropy.nitf_SubWindow_startRow_set)
-    __swig_setmethods__["startCol"] = _nitropy.nitf_SubWindow_startCol_set
-    __swig_getmethods__["startCol"] = _nitropy.nitf_SubWindow_startCol_get
-    if _newclass:
-        startCol = _swig_property(_nitropy.nitf_SubWindow_startCol_get, _nitropy.nitf_SubWindow_startCol_set)
-    __swig_setmethods__["numRows"] = _nitropy.nitf_SubWindow_numRows_set
-    __swig_getmethods__["numRows"] = _nitropy.nitf_SubWindow_numRows_get
-    if _newclass:
-        numRows = _swig_property(_nitropy.nitf_SubWindow_numRows_get, _nitropy.nitf_SubWindow_numRows_set)
-    __swig_setmethods__["numCols"] = _nitropy.nitf_SubWindow_numCols_set
-    __swig_getmethods__["numCols"] = _nitropy.nitf_SubWindow_numCols_get
-    if _newclass:
-        numCols = _swig_property(_nitropy.nitf_SubWindow_numCols_get, _nitropy.nitf_SubWindow_numCols_set)
-    __swig_setmethods__["bandList"] = _nitropy.nitf_SubWindow_bandList_set
-    __swig_getmethods__["bandList"] = _nitropy.nitf_SubWindow_bandList_get
-    if _newclass:
-        bandList = _swig_property(_nitropy.nitf_SubWindow_bandList_get, _nitropy.nitf_SubWindow_bandList_set)
-    __swig_setmethods__["numBands"] = _nitropy.nitf_SubWindow_numBands_set
-    __swig_getmethods__["numBands"] = _nitropy.nitf_SubWindow_numBands_get
-    if _newclass:
-        numBands = _swig_property(_nitropy.nitf_SubWindow_numBands_get, _nitropy.nitf_SubWindow_numBands_set)
-    __swig_setmethods__["downsampler"] = _nitropy.nitf_SubWindow_downsampler_set
-    __swig_getmethods__["downsampler"] = _nitropy.nitf_SubWindow_downsampler_get
-    if _newclass:
-        downsampler = _swig_property(_nitropy.nitf_SubWindow_downsampler_get, _nitropy.nitf_SubWindow_downsampler_set)
+    startRow = property(_nitropy.nitf_SubWindow_startRow_get, _nitropy.nitf_SubWindow_startRow_set)
+    startCol = property(_nitropy.nitf_SubWindow_startCol_get, _nitropy.nitf_SubWindow_startCol_set)
+    numRows = property(_nitropy.nitf_SubWindow_numRows_get, _nitropy.nitf_SubWindow_numRows_set)
+    numCols = property(_nitropy.nitf_SubWindow_numCols_get, _nitropy.nitf_SubWindow_numCols_set)
+    bandList = property(_nitropy.nitf_SubWindow_bandList_get, _nitropy.nitf_SubWindow_bandList_set)
+    numBands = property(_nitropy.nitf_SubWindow_numBands_get, _nitropy.nitf_SubWindow_numBands_set)
+    downsampler = property(_nitropy.nitf_SubWindow_downsampler_get, _nitropy.nitf_SubWindow_downsampler_set)
     __swig_destroy__ = _nitropy.delete_nitf_SubWindow
-    __del__ = lambda self: None
-nitf_SubWindow_swigregister = _nitropy.nitf_SubWindow_swigregister
-nitf_SubWindow_swigregister(nitf_SubWindow)
+
+# Register nitf_SubWindow in _nitropy:
+_nitropy.nitf_SubWindow_swigregister(nitf_SubWindow)
 
 
-def nitf_SubWindow_construct(error: 'nrt_Error') -> "nitf_SubWindow *":
+def nitf_SubWindow_construct(error: "nrt_Error") -> "nitf_SubWindow *":
     return _nitropy.nitf_SubWindow_construct(error)
-nitf_SubWindow_construct = _nitropy.nitf_SubWindow_construct
 
-def nitf_SubWindow_destruct(subWindow: 'nitf_SubWindow **') -> "void":
+def nitf_SubWindow_destruct(subWindow: "nitf_SubWindow **") -> "void":
     return _nitropy.nitf_SubWindow_destruct(subWindow)
-nitf_SubWindow_destruct = _nitropy.nitf_SubWindow_destruct
 
-def nitf_SubWindow_setDownSampler(subWindow: 'nitf_SubWindow', downsampler: 'nitf_DownSampler', error: 'nrt_Error') -> "bool":
+def nitf_SubWindow_setDownSampler(subWindow: "nitf_SubWindow", downsampler: "nitf_DownSampler", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_SubWindow_setDownSampler(subWindow, downsampler, error)
-nitf_SubWindow_setDownSampler = _nitropy.nitf_SubWindow_setDownSampler
-class nitf_IDownSampler(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_IDownSampler, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_IDownSampler, name)
+class nitf_IDownSampler(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["apply"] = _nitropy.nitf_IDownSampler_apply_set
-    __swig_getmethods__["apply"] = _nitropy.nitf_IDownSampler_apply_get
-    if _newclass:
-        apply = _swig_property(_nitropy.nitf_IDownSampler_apply_get, _nitropy.nitf_IDownSampler_apply_set)
-    __swig_setmethods__["destruct"] = _nitropy.nitf_IDownSampler_destruct_set
-    __swig_getmethods__["destruct"] = _nitropy.nitf_IDownSampler_destruct_get
-    if _newclass:
-        destruct = _swig_property(_nitropy.nitf_IDownSampler_destruct_get, _nitropy.nitf_IDownSampler_destruct_set)
+    apply = property(_nitropy.nitf_IDownSampler_apply_get, _nitropy.nitf_IDownSampler_apply_set)
+    destruct = property(_nitropy.nitf_IDownSampler_destruct_get, _nitropy.nitf_IDownSampler_destruct_set)
     __swig_destroy__ = _nitropy.delete_nitf_IDownSampler
-    __del__ = lambda self: None
-nitf_IDownSampler_swigregister = _nitropy.nitf_IDownSampler_swigregister
-nitf_IDownSampler_swigregister(nitf_IDownSampler)
 
-class nitf_DownSampler(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_DownSampler, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_DownSampler, name)
+# Register nitf_IDownSampler in _nitropy:
+_nitropy.nitf_IDownSampler_swigregister(nitf_IDownSampler)
+
+class nitf_DownSampler(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["iface"] = _nitropy.nitf_DownSampler_iface_set
-    __swig_getmethods__["iface"] = _nitropy.nitf_DownSampler_iface_get
-    if _newclass:
-        iface = _swig_property(_nitropy.nitf_DownSampler_iface_get, _nitropy.nitf_DownSampler_iface_set)
-    __swig_setmethods__["rowSkip"] = _nitropy.nitf_DownSampler_rowSkip_set
-    __swig_getmethods__["rowSkip"] = _nitropy.nitf_DownSampler_rowSkip_get
-    if _newclass:
-        rowSkip = _swig_property(_nitropy.nitf_DownSampler_rowSkip_get, _nitropy.nitf_DownSampler_rowSkip_set)
-    __swig_setmethods__["colSkip"] = _nitropy.nitf_DownSampler_colSkip_set
-    __swig_getmethods__["colSkip"] = _nitropy.nitf_DownSampler_colSkip_get
-    if _newclass:
-        colSkip = _swig_property(_nitropy.nitf_DownSampler_colSkip_get, _nitropy.nitf_DownSampler_colSkip_set)
-    __swig_setmethods__["multiBand"] = _nitropy.nitf_DownSampler_multiBand_set
-    __swig_getmethods__["multiBand"] = _nitropy.nitf_DownSampler_multiBand_get
-    if _newclass:
-        multiBand = _swig_property(_nitropy.nitf_DownSampler_multiBand_get, _nitropy.nitf_DownSampler_multiBand_set)
-    __swig_setmethods__["minBands"] = _nitropy.nitf_DownSampler_minBands_set
-    __swig_getmethods__["minBands"] = _nitropy.nitf_DownSampler_minBands_get
-    if _newclass:
-        minBands = _swig_property(_nitropy.nitf_DownSampler_minBands_get, _nitropy.nitf_DownSampler_minBands_set)
-    __swig_setmethods__["maxBands"] = _nitropy.nitf_DownSampler_maxBands_set
-    __swig_getmethods__["maxBands"] = _nitropy.nitf_DownSampler_maxBands_get
-    if _newclass:
-        maxBands = _swig_property(_nitropy.nitf_DownSampler_maxBands_get, _nitropy.nitf_DownSampler_maxBands_set)
-    __swig_setmethods__["types"] = _nitropy.nitf_DownSampler_types_set
-    __swig_getmethods__["types"] = _nitropy.nitf_DownSampler_types_get
-    if _newclass:
-        types = _swig_property(_nitropy.nitf_DownSampler_types_get, _nitropy.nitf_DownSampler_types_set)
-    __swig_setmethods__["data"] = _nitropy.nitf_DownSampler_data_set
-    __swig_getmethods__["data"] = _nitropy.nitf_DownSampler_data_get
-    if _newclass:
-        data = _swig_property(_nitropy.nitf_DownSampler_data_get, _nitropy.nitf_DownSampler_data_set)
+    iface = property(_nitropy.nitf_DownSampler_iface_get, _nitropy.nitf_DownSampler_iface_set)
+    rowSkip = property(_nitropy.nitf_DownSampler_rowSkip_get, _nitropy.nitf_DownSampler_rowSkip_set)
+    colSkip = property(_nitropy.nitf_DownSampler_colSkip_get, _nitropy.nitf_DownSampler_colSkip_set)
+    multiBand = property(_nitropy.nitf_DownSampler_multiBand_get, _nitropy.nitf_DownSampler_multiBand_set)
+    minBands = property(_nitropy.nitf_DownSampler_minBands_get, _nitropy.nitf_DownSampler_minBands_set)
+    maxBands = property(_nitropy.nitf_DownSampler_maxBands_get, _nitropy.nitf_DownSampler_maxBands_set)
+    types = property(_nitropy.nitf_DownSampler_types_get, _nitropy.nitf_DownSampler_types_set)
+    data = property(_nitropy.nitf_DownSampler_data_get, _nitropy.nitf_DownSampler_data_set)
     __swig_destroy__ = _nitropy.delete_nitf_DownSampler
-    __del__ = lambda self: None
-nitf_DownSampler_swigregister = _nitropy.nitf_DownSampler_swigregister
-nitf_DownSampler_swigregister(nitf_DownSampler)
+
+# Register nitf_DownSampler in _nitropy:
+_nitropy.nitf_DownSampler_swigregister(nitf_DownSampler)
 
 
-def nitf_PixelSkip_construct(rowSkip: 'uint32_t', colSkip: 'uint32_t', error: 'nrt_Error') -> "nitf_DownSampler *":
+def nitf_PixelSkip_construct(rowSkip: "uint32_t", colSkip: "uint32_t", error: "nrt_Error") -> "nitf_DownSampler *":
     return _nitropy.nitf_PixelSkip_construct(rowSkip, colSkip, error)
-nitf_PixelSkip_construct = _nitropy.nitf_PixelSkip_construct
 
-def nitf_MaxDownSample_construct(rowSkip: 'uint32_t', colSkip: 'uint32_t', error: 'nrt_Error') -> "nitf_DownSampler *":
+def nitf_MaxDownSample_construct(rowSkip: "uint32_t", colSkip: "uint32_t", error: "nrt_Error") -> "nitf_DownSampler *":
     return _nitropy.nitf_MaxDownSample_construct(rowSkip, colSkip, error)
-nitf_MaxDownSample_construct = _nitropy.nitf_MaxDownSample_construct
 
-def nitf_SumSq2DownSample_construct(rowSkip: 'uint32_t', colSkip: 'uint32_t', error: 'nrt_Error') -> "nitf_DownSampler *":
+def nitf_SumSq2DownSample_construct(rowSkip: "uint32_t", colSkip: "uint32_t", error: "nrt_Error") -> "nitf_DownSampler *":
     return _nitropy.nitf_SumSq2DownSample_construct(rowSkip, colSkip, error)
-nitf_SumSq2DownSample_construct = _nitropy.nitf_SumSq2DownSample_construct
 
-def nitf_Select2DownSample_construct(rowSkip: 'uint32_t', colSkip: 'uint32_t', error: 'nrt_Error') -> "nitf_DownSampler *":
+def nitf_Select2DownSample_construct(rowSkip: "uint32_t", colSkip: "uint32_t", error: "nrt_Error") -> "nitf_DownSampler *":
     return _nitropy.nitf_Select2DownSample_construct(rowSkip, colSkip, error)
-nitf_Select2DownSample_construct = _nitropy.nitf_Select2DownSample_construct
 
-def nitf_DownSampler_destruct(downsampler: 'nitf_DownSampler **') -> "void":
+def nitf_DownSampler_destruct(downsampler: "nitf_DownSampler **") -> "void":
     return _nitropy.nitf_DownSampler_destruct(downsampler)
-nitf_DownSampler_destruct = _nitropy.nitf_DownSampler_destruct
 
-def nitf_SegmentMemorySource_construct(data: 'char const *', size: 'nitf_Off', start: 'nitf_Off', byteSkip: 'int', copyData: 'bool', error: 'nrt_Error') -> "nitf_SegmentSource *":
+def nitf_SegmentMemorySource_construct(data: "char const *", size: "nitf_Off", start: "nitf_Off", byteSkip: "int", copyData: "bool", error: "nrt_Error") -> "nitf_SegmentSource *":
     return _nitropy.nitf_SegmentMemorySource_construct(data, size, start, byteSkip, copyData, error)
-nitf_SegmentMemorySource_construct = _nitropy.nitf_SegmentMemorySource_construct
 
-def nitf_SegmentFileSource_construct(handle: 'nitf_IOHandle', start: 'nitf_Off', byteSkip: 'int', error: 'nrt_Error') -> "nitf_SegmentSource *":
+def nitf_SegmentFileSource_construct(handle: "nitf_IOHandle", start: "nitf_Off", byteSkip: "int", error: "nrt_Error") -> "nitf_SegmentSource *":
     return _nitropy.nitf_SegmentFileSource_construct(handle, start, byteSkip, error)
-nitf_SegmentFileSource_construct = _nitropy.nitf_SegmentFileSource_construct
 
-def nitf_SegmentFileSource_constructIO(io: 'nrt_IOInterface', start: 'nitf_Off', byteSkip: 'int', error: 'nrt_Error') -> "nitf_SegmentSource *":
+def nitf_SegmentFileSource_constructIO(io: "nrt_IOInterface", start: "nitf_Off", byteSkip: "int", error: "nrt_Error") -> "nitf_SegmentSource *":
     return _nitropy.nitf_SegmentFileSource_constructIO(io, start, byteSkip, error)
-nitf_SegmentFileSource_constructIO = _nitropy.nitf_SegmentFileSource_constructIO
 
-def nitf_SegmentReaderSource_construct(reader: 'nitf_SegmentReader', error: 'nrt_Error') -> "nitf_SegmentSource *":
+def nitf_SegmentReaderSource_construct(reader: "nitf_SegmentReader", error: "nrt_Error") -> "nitf_SegmentSource *":
     return _nitropy.nitf_SegmentReaderSource_construct(reader, error)
-nitf_SegmentReaderSource_construct = _nitropy.nitf_SegmentReaderSource_construct
 NITF_IREPBAND_SZ = _nitropy.NITF_IREPBAND_SZ
 NITF_ISUBCAT_SZ = _nitropy.NITF_ISUBCAT_SZ
 NITF_IFC_SZ = _nitropy.NITF_IFC_SZ
 NITF_IMFLT_SZ = _nitropy.NITF_IMFLT_SZ
 NITF_NLUTS_SZ = _nitropy.NITF_NLUTS_SZ
 NITF_NELUT_SZ = _nitropy.NITF_NELUT_SZ
-class nitf_BandInfo(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_BandInfo, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_BandInfo, name)
+class nitf_BandInfo(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["representation"] = _nitropy.nitf_BandInfo_representation_set
-    __swig_getmethods__["representation"] = _nitropy.nitf_BandInfo_representation_get
-    if _newclass:
-        representation = _swig_property(_nitropy.nitf_BandInfo_representation_get, _nitropy.nitf_BandInfo_representation_set)
-    __swig_setmethods__["subcategory"] = _nitropy.nitf_BandInfo_subcategory_set
-    __swig_getmethods__["subcategory"] = _nitropy.nitf_BandInfo_subcategory_get
-    if _newclass:
-        subcategory = _swig_property(_nitropy.nitf_BandInfo_subcategory_get, _nitropy.nitf_BandInfo_subcategory_set)
-    __swig_setmethods__["imageFilterCondition"] = _nitropy.nitf_BandInfo_imageFilterCondition_set
-    __swig_getmethods__["imageFilterCondition"] = _nitropy.nitf_BandInfo_imageFilterCondition_get
-    if _newclass:
-        imageFilterCondition = _swig_property(_nitropy.nitf_BandInfo_imageFilterCondition_get, _nitropy.nitf_BandInfo_imageFilterCondition_set)
-    __swig_setmethods__["imageFilterCode"] = _nitropy.nitf_BandInfo_imageFilterCode_set
-    __swig_getmethods__["imageFilterCode"] = _nitropy.nitf_BandInfo_imageFilterCode_get
-    if _newclass:
-        imageFilterCode = _swig_property(_nitropy.nitf_BandInfo_imageFilterCode_get, _nitropy.nitf_BandInfo_imageFilterCode_set)
-    __swig_setmethods__["numLUTs"] = _nitropy.nitf_BandInfo_numLUTs_set
-    __swig_getmethods__["numLUTs"] = _nitropy.nitf_BandInfo_numLUTs_get
-    if _newclass:
-        numLUTs = _swig_property(_nitropy.nitf_BandInfo_numLUTs_get, _nitropy.nitf_BandInfo_numLUTs_set)
-    __swig_setmethods__["bandEntriesPerLUT"] = _nitropy.nitf_BandInfo_bandEntriesPerLUT_set
-    __swig_getmethods__["bandEntriesPerLUT"] = _nitropy.nitf_BandInfo_bandEntriesPerLUT_get
-    if _newclass:
-        bandEntriesPerLUT = _swig_property(_nitropy.nitf_BandInfo_bandEntriesPerLUT_get, _nitropy.nitf_BandInfo_bandEntriesPerLUT_set)
-    __swig_setmethods__["lut"] = _nitropy.nitf_BandInfo_lut_set
-    __swig_getmethods__["lut"] = _nitropy.nitf_BandInfo_lut_get
-    if _newclass:
-        lut = _swig_property(_nitropy.nitf_BandInfo_lut_get, _nitropy.nitf_BandInfo_lut_set)
+    representation = property(_nitropy.nitf_BandInfo_representation_get, _nitropy.nitf_BandInfo_representation_set)
+    subcategory = property(_nitropy.nitf_BandInfo_subcategory_get, _nitropy.nitf_BandInfo_subcategory_set)
+    imageFilterCondition = property(_nitropy.nitf_BandInfo_imageFilterCondition_get, _nitropy.nitf_BandInfo_imageFilterCondition_set)
+    imageFilterCode = property(_nitropy.nitf_BandInfo_imageFilterCode_get, _nitropy.nitf_BandInfo_imageFilterCode_set)
+    numLUTs = property(_nitropy.nitf_BandInfo_numLUTs_get, _nitropy.nitf_BandInfo_numLUTs_set)
+    bandEntriesPerLUT = property(_nitropy.nitf_BandInfo_bandEntriesPerLUT_get, _nitropy.nitf_BandInfo_bandEntriesPerLUT_set)
+    lut = property(_nitropy.nitf_BandInfo_lut_get, _nitropy.nitf_BandInfo_lut_set)
     __swig_destroy__ = _nitropy.delete_nitf_BandInfo
-    __del__ = lambda self: None
-nitf_BandInfo_swigregister = _nitropy.nitf_BandInfo_swigregister
-nitf_BandInfo_swigregister(nitf_BandInfo)
 
+# Register nitf_BandInfo in _nitropy:
+_nitropy.nitf_BandInfo_swigregister(nitf_BandInfo)
 
-def nitf_BandInfo_construct(error: 'nrt_Error') -> "nitf_BandInfo *":
+
+def nitf_BandInfo_construct(error: "nrt_Error") -> "nitf_BandInfo *":
     return _nitropy.nitf_BandInfo_construct(error)
-nitf_BandInfo_construct = _nitropy.nitf_BandInfo_construct
 
-def nitf_BandInfo_destruct(info: 'nitf_BandInfo **') -> "void":
+def nitf_BandInfo_destruct(info: "nitf_BandInfo **") -> "void":
     return _nitropy.nitf_BandInfo_destruct(info)
-nitf_BandInfo_destruct = _nitropy.nitf_BandInfo_destruct
 
-def nitf_BandInfo_clone(source: 'nitf_BandInfo', error: 'nrt_Error') -> "nitf_BandInfo *":
+def nitf_BandInfo_clone(source: "nitf_BandInfo", error: "nrt_Error") -> "nitf_BandInfo *":
     return _nitropy.nitf_BandInfo_clone(source, error)
-nitf_BandInfo_clone = _nitropy.nitf_BandInfo_clone
 
-def nitf_BandInfo_init(bandInfo: 'nitf_BandInfo', representation: 'char const *', subcategory: 'char const *', imageFilterCondition: 'char const *', imageFilterCode: 'char const *', numLUTs: 'uint32_t', bandEntriesPerLUT: 'uint32_t', lut: 'nitf_LookupTable *', error: 'nrt_Error') -> "bool":
+def nitf_BandInfo_init(bandInfo: "nitf_BandInfo", representation: "char const *", subcategory: "char const *", imageFilterCondition: "char const *", imageFilterCode: "char const *", numLUTs: "uint32_t", bandEntriesPerLUT: "uint32_t", lut: "nitf_LookupTable *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_BandInfo_init(bandInfo, representation, subcategory, imageFilterCondition, imageFilterCode, numLUTs, bandEntriesPerLUT, lut, error)
-nitf_BandInfo_init = _nitropy.nitf_BandInfo_init
 NITF_WRITER_FILL_LEFT = _nitropy.NITF_WRITER_FILL_LEFT
 NITF_WRITER_FILL_RIGHT = _nitropy.NITF_WRITER_FILL_RIGHT
-class nitf_Writer(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_Writer, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_Writer, name)
+class nitf_Writer(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["warningList"] = _nitropy.nitf_Writer_warningList_set
-    __swig_getmethods__["warningList"] = _nitropy.nitf_Writer_warningList_get
-    if _newclass:
-        warningList = _swig_property(_nitropy.nitf_Writer_warningList_get, _nitropy.nitf_Writer_warningList_set)
-    __swig_setmethods__["imageWriters"] = _nitropy.nitf_Writer_imageWriters_set
-    __swig_getmethods__["imageWriters"] = _nitropy.nitf_Writer_imageWriters_get
-    if _newclass:
-        imageWriters = _swig_property(_nitropy.nitf_Writer_imageWriters_get, _nitropy.nitf_Writer_imageWriters_set)
-    __swig_setmethods__["textWriters"] = _nitropy.nitf_Writer_textWriters_set
-    __swig_getmethods__["textWriters"] = _nitropy.nitf_Writer_textWriters_get
-    if _newclass:
-        textWriters = _swig_property(_nitropy.nitf_Writer_textWriters_get, _nitropy.nitf_Writer_textWriters_set)
-    __swig_setmethods__["graphicWriters"] = _nitropy.nitf_Writer_graphicWriters_set
-    __swig_getmethods__["graphicWriters"] = _nitropy.nitf_Writer_graphicWriters_get
-    if _newclass:
-        graphicWriters = _swig_property(_nitropy.nitf_Writer_graphicWriters_get, _nitropy.nitf_Writer_graphicWriters_set)
-    __swig_setmethods__["dataExtensionWriters"] = _nitropy.nitf_Writer_dataExtensionWriters_set
-    __swig_getmethods__["dataExtensionWriters"] = _nitropy.nitf_Writer_dataExtensionWriters_get
-    if _newclass:
-        dataExtensionWriters = _swig_property(_nitropy.nitf_Writer_dataExtensionWriters_get, _nitropy.nitf_Writer_dataExtensionWriters_set)
-    __swig_setmethods__["output"] = _nitropy.nitf_Writer_output_set
-    __swig_getmethods__["output"] = _nitropy.nitf_Writer_output_get
-    if _newclass:
-        output = _swig_property(_nitropy.nitf_Writer_output_get, _nitropy.nitf_Writer_output_set)
-    __swig_setmethods__["record"] = _nitropy.nitf_Writer_record_set
-    __swig_getmethods__["record"] = _nitropy.nitf_Writer_record_get
-    if _newclass:
-        record = _swig_property(_nitropy.nitf_Writer_record_get, _nitropy.nitf_Writer_record_set)
-    __swig_setmethods__["numImageWriters"] = _nitropy.nitf_Writer_numImageWriters_set
-    __swig_getmethods__["numImageWriters"] = _nitropy.nitf_Writer_numImageWriters_get
-    if _newclass:
-        numImageWriters = _swig_property(_nitropy.nitf_Writer_numImageWriters_get, _nitropy.nitf_Writer_numImageWriters_set)
-    __swig_setmethods__["numTextWriters"] = _nitropy.nitf_Writer_numTextWriters_set
-    __swig_getmethods__["numTextWriters"] = _nitropy.nitf_Writer_numTextWriters_get
-    if _newclass:
-        numTextWriters = _swig_property(_nitropy.nitf_Writer_numTextWriters_get, _nitropy.nitf_Writer_numTextWriters_set)
-    __swig_setmethods__["numGraphicWriters"] = _nitropy.nitf_Writer_numGraphicWriters_set
-    __swig_getmethods__["numGraphicWriters"] = _nitropy.nitf_Writer_numGraphicWriters_get
-    if _newclass:
-        numGraphicWriters = _swig_property(_nitropy.nitf_Writer_numGraphicWriters_get, _nitropy.nitf_Writer_numGraphicWriters_set)
-    __swig_setmethods__["numDataExtensionWriters"] = _nitropy.nitf_Writer_numDataExtensionWriters_set
-    __swig_getmethods__["numDataExtensionWriters"] = _nitropy.nitf_Writer_numDataExtensionWriters_get
-    if _newclass:
-        numDataExtensionWriters = _swig_property(_nitropy.nitf_Writer_numDataExtensionWriters_get, _nitropy.nitf_Writer_numDataExtensionWriters_set)
-    __swig_setmethods__["ownOutput"] = _nitropy.nitf_Writer_ownOutput_set
-    __swig_getmethods__["ownOutput"] = _nitropy.nitf_Writer_ownOutput_get
-    if _newclass:
-        ownOutput = _swig_property(_nitropy.nitf_Writer_ownOutput_get, _nitropy.nitf_Writer_ownOutput_set)
+    warningList = property(_nitropy.nitf_Writer_warningList_get, _nitropy.nitf_Writer_warningList_set)
+    imageWriters = property(_nitropy.nitf_Writer_imageWriters_get, _nitropy.nitf_Writer_imageWriters_set)
+    textWriters = property(_nitropy.nitf_Writer_textWriters_get, _nitropy.nitf_Writer_textWriters_set)
+    graphicWriters = property(_nitropy.nitf_Writer_graphicWriters_get, _nitropy.nitf_Writer_graphicWriters_set)
+    dataExtensionWriters = property(_nitropy.nitf_Writer_dataExtensionWriters_get, _nitropy.nitf_Writer_dataExtensionWriters_set)
+    output = property(_nitropy.nitf_Writer_output_get, _nitropy.nitf_Writer_output_set)
+    record = property(_nitropy.nitf_Writer_record_get, _nitropy.nitf_Writer_record_set)
+    numImageWriters = property(_nitropy.nitf_Writer_numImageWriters_get, _nitropy.nitf_Writer_numImageWriters_set)
+    numTextWriters = property(_nitropy.nitf_Writer_numTextWriters_get, _nitropy.nitf_Writer_numTextWriters_set)
+    numGraphicWriters = property(_nitropy.nitf_Writer_numGraphicWriters_get, _nitropy.nitf_Writer_numGraphicWriters_set)
+    numDataExtensionWriters = property(_nitropy.nitf_Writer_numDataExtensionWriters_get, _nitropy.nitf_Writer_numDataExtensionWriters_set)
+    ownOutput = property(_nitropy.nitf_Writer_ownOutput_get, _nitropy.nitf_Writer_ownOutput_set)
     __swig_destroy__ = _nitropy.delete_nitf_Writer
-    __del__ = lambda self: None
-nitf_Writer_swigregister = _nitropy.nitf_Writer_swigregister
-nitf_Writer_swigregister(nitf_Writer)
+
+# Register nitf_Writer in _nitropy:
+_nitropy.nitf_Writer_swigregister(nitf_Writer)
 
 
-def nitf_Writer_construct(error: 'nrt_Error') -> "nitf_Writer *":
+def nitf_Writer_construct(error: "nrt_Error") -> "nitf_Writer *":
     return _nitropy.nitf_Writer_construct(error)
-nitf_Writer_construct = _nitropy.nitf_Writer_construct
 
-def nitf_Writer_destruct(writer: 'nitf_Writer **') -> "void":
+def nitf_Writer_destruct(writer: "nitf_Writer **") -> "void":
     return _nitropy.nitf_Writer_destruct(writer)
-nitf_Writer_destruct = _nitropy.nitf_Writer_destruct
 
-def nitf_Writer_prepare(writer: 'nitf_Writer', record: 'nitf_Record', ioHandle: 'nitf_IOHandle', error: 'nrt_Error') -> "bool":
+def nitf_Writer_prepare(writer: "nitf_Writer", record: "nitf_Record", ioHandle: "nitf_IOHandle", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_prepare(writer, record, ioHandle, error)
-nitf_Writer_prepare = _nitropy.nitf_Writer_prepare
 
-def nitf_Writer_prepareIO(writer: 'nitf_Writer', record: 'nitf_Record', io: 'nrt_IOInterface', error: 'nrt_Error') -> "bool":
+def nitf_Writer_prepareIO(writer: "nitf_Writer", record: "nitf_Record", io: "nrt_IOInterface", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_prepareIO(writer, record, io, error)
-nitf_Writer_prepareIO = _nitropy.nitf_Writer_prepareIO
 
-def nitf_Writer_setImageWriteHandler(writer: 'nitf_Writer', index: 'int', writeHandler: 'nitf_WriteHandler *', error: 'nrt_Error') -> "bool":
+def nitf_Writer_setImageWriteHandler(writer: "nitf_Writer", index: "int", writeHandler: "nitf_WriteHandler *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_setImageWriteHandler(writer, index, writeHandler, error)
-nitf_Writer_setImageWriteHandler = _nitropy.nitf_Writer_setImageWriteHandler
 
-def nitf_Writer_setGraphicWriteHandler(writer: 'nitf_Writer', index: 'int', writeHandler: 'nitf_WriteHandler *', error: 'nrt_Error') -> "bool":
+def nitf_Writer_setGraphicWriteHandler(writer: "nitf_Writer", index: "int", writeHandler: "nitf_WriteHandler *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_setGraphicWriteHandler(writer, index, writeHandler, error)
-nitf_Writer_setGraphicWriteHandler = _nitropy.nitf_Writer_setGraphicWriteHandler
 
-def nitf_Writer_setTextWriteHandler(writer: 'nitf_Writer', index: 'int', writeHandler: 'nitf_WriteHandler *', error: 'nrt_Error') -> "bool":
+def nitf_Writer_setTextWriteHandler(writer: "nitf_Writer", index: "int", writeHandler: "nitf_WriteHandler *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_setTextWriteHandler(writer, index, writeHandler, error)
-nitf_Writer_setTextWriteHandler = _nitropy.nitf_Writer_setTextWriteHandler
 
-def nitf_Writer_setDEWriteHandler(writer: 'nitf_Writer', index: 'int', writeHandler: 'nitf_WriteHandler *', error: 'nrt_Error') -> "bool":
+def nitf_Writer_setDEWriteHandler(writer: "nitf_Writer", index: "int", writeHandler: "nitf_WriteHandler *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_setDEWriteHandler(writer, index, writeHandler, error)
-nitf_Writer_setDEWriteHandler = _nitropy.nitf_Writer_setDEWriteHandler
 
-def nitf_Writer_newImageWriter(writer: 'nitf_Writer', index: 'int', options: 'nrt_HashTable', error: 'nrt_Error') -> "nitf_ImageWriter *":
+def nitf_Writer_newImageWriter(writer: "nitf_Writer", index: "int", options: "nrt_HashTable", error: "nrt_Error") -> "nitf_ImageWriter *":
     return _nitropy.nitf_Writer_newImageWriter(writer, index, options, error)
-nitf_Writer_newImageWriter = _nitropy.nitf_Writer_newImageWriter
 
-def nitf_Writer_newGraphicWriter(writer: 'nitf_Writer', index: 'int', error: 'nrt_Error') -> "nitf_SegmentWriter *":
+def nitf_Writer_newGraphicWriter(writer: "nitf_Writer", index: "int", error: "nrt_Error") -> "nitf_SegmentWriter *":
     return _nitropy.nitf_Writer_newGraphicWriter(writer, index, error)
-nitf_Writer_newGraphicWriter = _nitropy.nitf_Writer_newGraphicWriter
 
-def nitf_Writer_newTextWriter(writer: 'nitf_Writer', index: 'int', error: 'nrt_Error') -> "nitf_SegmentWriter *":
+def nitf_Writer_newTextWriter(writer: "nitf_Writer", index: "int", error: "nrt_Error") -> "nitf_SegmentWriter *":
     return _nitropy.nitf_Writer_newTextWriter(writer, index, error)
-nitf_Writer_newTextWriter = _nitropy.nitf_Writer_newTextWriter
 
-def nitf_Writer_newDEWriter(writer: 'nitf_Writer', index: 'int', error: 'nrt_Error') -> "nitf_SegmentWriter *":
+def nitf_Writer_newDEWriter(writer: "nitf_Writer", index: "int", error: "nrt_Error") -> "nitf_SegmentWriter *":
     return _nitropy.nitf_Writer_newDEWriter(writer, index, error)
-nitf_Writer_newDEWriter = _nitropy.nitf_Writer_newDEWriter
 
-def nitf_Writer_write(writer: 'nitf_Writer', error: 'nrt_Error') -> "bool":
+def nitf_Writer_write(writer: "nitf_Writer", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_write(writer, error)
-nitf_Writer_write = _nitropy.nitf_Writer_write
 
-def nitf_Writer_writeHeader(writer: 'nitf_Writer', fileLenOff: 'nitf_Off *', hdrLen: 'uint32_t *', error: 'nrt_Error') -> "bool":
+def nitf_Writer_writeHeader(writer: "nitf_Writer", fileLenOff: "nitf_Off *", hdrLen: "uint32_t *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_writeHeader(writer, fileLenOff, hdrLen, error)
-nitf_Writer_writeHeader = _nitropy.nitf_Writer_writeHeader
 
-def nitf_Writer_writeImageSubheader(writer: 'nitf_Writer', subhdr: 'nitf_ImageSubheader', fver: 'nitf_Version', comratOff: 'nitf_Off *', error: 'nrt_Error') -> "bool":
+def nitf_Writer_writeImageSubheader(writer: "nitf_Writer", subhdr: "nitf_ImageSubheader", fver: "nitf_Version", comratOff: "nitf_Off *", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_writeImageSubheader(writer, subhdr, fver, comratOff, error)
-nitf_Writer_writeImageSubheader = _nitropy.nitf_Writer_writeImageSubheader
 
-def nitf_Writer_writeDESubheader(writer: 'nitf_Writer', subhdr: 'nitf_DESubheader', userSublen: 'uint32_t *', fver: 'nitf_Version', error: 'nrt_Error') -> "bool":
+def nitf_Writer_writeDESubheader(writer: "nitf_Writer", subhdr: "nitf_DESubheader", userSublen: "uint32_t *", fver: "nitf_Version", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_writeDESubheader(writer, subhdr, userSublen, fver, error)
-nitf_Writer_writeDESubheader = _nitropy.nitf_Writer_writeDESubheader
 
-def nitf_Writer_writeInt64Field(writer: 'nitf_Writer', field: 'uint64_t', length: 'uint32_t', fill: 'char', fillDir: 'uint32_t', error: 'nrt_Error') -> "bool":
+def nitf_Writer_writeInt64Field(writer: "nitf_Writer", field: "uint64_t", length: "uint32_t", fill: "char", fillDir: "uint32_t", error: "nrt_Error") -> "bool":
     return _nitropy.nitf_Writer_writeInt64Field(writer, field, length, fill, fillDir, error)
-nitf_Writer_writeInt64Field = _nitropy.nitf_Writer_writeInt64Field
-class nitf_Reader(_object):
-    __swig_setmethods__ = {}
-    __setattr__ = lambda self, name, value: _swig_setattr(self, nitf_Reader, name, value)
-    __swig_getmethods__ = {}
-    __getattr__ = lambda self, name: _swig_getattr(self, nitf_Reader, name)
+class nitf_Reader(object):
+    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
 
     def __init__(self, *args, **kwargs):
         raise AttributeError("No constructor defined")
     __repr__ = _swig_repr
-    __swig_setmethods__["warningList"] = _nitropy.nitf_Reader_warningList_set
-    __swig_getmethods__["warningList"] = _nitropy.nitf_Reader_warningList_get
-    if _newclass:
-        warningList = _swig_property(_nitropy.nitf_Reader_warningList_get, _nitropy.nitf_Reader_warningList_set)
-    __swig_setmethods__["input"] = _nitropy.nitf_Reader_input_set
-    __swig_getmethods__["input"] = _nitropy.nitf_Reader_input_get
-    if _newclass:
-        input = _swig_property(_nitropy.nitf_Reader_input_get, _nitropy.nitf_Reader_input_set)
-    __swig_setmethods__["record"] = _nitropy.nitf_Reader_record_set
-    __swig_getmethods__["record"] = _nitropy.nitf_Reader_record_get
-    if _newclass:
-        record = _swig_property(_nitropy.nitf_Reader_record_get, _nitropy.nitf_Reader_record_set)
-    __swig_setmethods__["ownInput"] = _nitropy.nitf_Reader_ownInput_set
-    __swig_getmethods__["ownInput"] = _nitropy.nitf_Reader_ownInput_get
-    if _newclass:
-        ownInput = _swig_property(_nitropy.nitf_Reader_ownInput_get, _nitropy.nitf_Reader_ownInput_set)
+    warningList = property(_nitropy.nitf_Reader_warningList_get, _nitropy.nitf_Reader_warningList_set)
+    input = property(_nitropy.nitf_Reader_input_get, _nitropy.nitf_Reader_input_set)
+    record = property(_nitropy.nitf_Reader_record_get, _nitropy.nitf_Reader_record_set)
+    ownInput = property(_nitropy.nitf_Reader_ownInput_get, _nitropy.nitf_Reader_ownInput_set)
     __swig_destroy__ = _nitropy.delete_nitf_Reader
-    __del__ = lambda self: None
-nitf_Reader_swigregister = _nitropy.nitf_Reader_swigregister
-nitf_Reader_swigregister(nitf_Reader)
+
+# Register nitf_Reader in _nitropy:
+_nitropy.nitf_Reader_swigregister(nitf_Reader)
 
 
-def nitf_Reader_construct(error: 'nrt_Error') -> "nitf_Reader *":
+def nitf_Reader_construct(error: "nrt_Error") -> "nitf_Reader *":
     return _nitropy.nitf_Reader_construct(error)
-nitf_Reader_construct = _nitropy.nitf_Reader_construct
 
-def nitf_Reader_destruct(reader: 'nitf_Reader **') -> "void":
+def nitf_Reader_destruct(reader: "nitf_Reader **") -> "void":
     return _nitropy.nitf_Reader_destruct(reader)
-nitf_Reader_destruct = _nitropy.nitf_Reader_destruct
 
-def nitf_Reader_read(reader: 'nitf_Reader', inputHandle: 'nitf_IOHandle', error: 'nrt_Error') -> "nitf_Record *":
+def nitf_Reader_read(reader: "nitf_Reader", inputHandle: "nitf_IOHandle", error: "nrt_Error") -> "nitf_Record *":
     return _nitropy.nitf_Reader_read(reader, inputHandle, error)
-nitf_Reader_read = _nitropy.nitf_Reader_read
 
-def nitf_Reader_readIO(reader: 'nitf_Reader', io: 'nrt_IOInterface', error: 'nrt_Error') -> "nitf_Record *":
+def nitf_Reader_readIO(reader: "nitf_Reader", io: "nrt_IOInterface", error: "nrt_Error") -> "nitf_Record *":
     return _nitropy.nitf_Reader_readIO(reader, io, error)
-nitf_Reader_readIO = _nitropy.nitf_Reader_readIO
 
-def nitf_Reader_newImageReader(reader: 'nitf_Reader', imageSegmentNumber: 'int', options: 'nrt_HashTable', error: 'nrt_Error') -> "nitf_ImageReader *":
+def nitf_Reader_newImageReader(reader: "nitf_Reader", imageSegmentNumber: "int", options: "nrt_HashTable", error: "nrt_Error") -> "nitf_ImageReader *":
     return _nitropy.nitf_Reader_newImageReader(reader, imageSegmentNumber, options, error)
-nitf_Reader_newImageReader = _nitropy.nitf_Reader_newImageReader
 
-def nitf_Reader_newTextReader(reader: 'nitf_Reader', textSegmentNumber: 'int', error: 'nrt_Error') -> "nitf_SegmentReader *":
+def nitf_Reader_newTextReader(reader: "nitf_Reader", textSegmentNumber: "int", error: "nrt_Error") -> "nitf_SegmentReader *":
     return _nitropy.nitf_Reader_newTextReader(reader, textSegmentNumber, error)
-nitf_Reader_newTextReader = _nitropy.nitf_Reader_newTextReader
 
-def nitf_Reader_newGraphicReader(reader: 'nitf_Reader', graphicSegmentNumber: 'int', error: 'nrt_Error') -> "nitf_SegmentReader *":
+def nitf_Reader_newGraphicReader(reader: "nitf_Reader", graphicSegmentNumber: "int", error: "nrt_Error") -> "nitf_SegmentReader *":
     return _nitropy.nitf_Reader_newGraphicReader(reader, graphicSegmentNumber, error)
-nitf_Reader_newGraphicReader = _nitropy.nitf_Reader_newGraphicReader
 
-def nitf_Reader_newDEReader(reader: 'nitf_Reader', DESegmentNumber: 'int', error: 'nrt_Error') -> "nitf_SegmentReader *":
+def nitf_Reader_newDEReader(reader: "nitf_Reader", DESegmentNumber: "int", error: "nrt_Error") -> "nitf_SegmentReader *":
     return _nitropy.nitf_Reader_newDEReader(reader, DESegmentNumber, error)
-nitf_Reader_newDEReader = _nitropy.nitf_Reader_newDEReader
 
-def nitf_Reader_getNITFVersion(fileName: 'char const *') -> "nitf_Version":
+def nitf_Reader_getNITFVersion(fileName: "char const *") -> "nitf_Version":
     return _nitropy.nitf_Reader_getNITFVersion(fileName)
-nitf_Reader_getNITFVersion = _nitropy.nitf_Reader_getNITFVersion
 
-def nitf_Reader_getNITFVersionIO(io: 'nrt_IOInterface') -> "nitf_Version":
+def nitf_Reader_getNITFVersionIO(io: "nrt_IOInterface") -> "nitf_Version":
     return _nitropy.nitf_Reader_getNITFVersionIO(io)
-nitf_Reader_getNITFVersionIO = _nitropy.nitf_Reader_getNITFVersionIO
 PY_NITF_CREATE = _nitropy.PY_NITF_CREATE
 PY_NITF_TRUNCATE = _nitropy.PY_NITF_TRUNCATE
 PY_NITF_OPEN_EXISTING = _nitropy.PY_NITF_OPEN_EXISTING
@@ -3195,169 +1866,127 @@ PY_NITF_SEEK_CUR = _nitropy.PY_NITF_SEEK_CUR
 PY_NITF_SEEK_SET = _nitropy.PY_NITF_SEEK_SET
 PY_NITF_SEEK_END = _nitropy.PY_NITF_SEEK_END
 
-def py_IOHandle_create(fname: 'char const *', accessFlag: 'int', createFlag: 'int', error: 'nrt_Error') -> "nitf_IOHandle":
+def py_IOHandle_create(fname: "char const *", accessFlag: "int", createFlag: "int", error: "nrt_Error") -> "nitf_IOHandle":
     return _nitropy.py_IOHandle_create(fname, accessFlag, createFlag, error)
-py_IOHandle_create = _nitropy.py_IOHandle_create
 
-def py_IOHandle_write(handle: 'nitf_IOHandle', address: 'long long', size: 'size_t', error: 'nrt_Error') -> "bool":
+def py_IOHandle_write(handle: "nitf_IOHandle", address: "long long", size: "size_t", error: "nrt_Error") -> "bool":
     return _nitropy.py_IOHandle_write(handle, address, size, error)
-py_IOHandle_write = _nitropy.py_IOHandle_write
 
-def py_IOHandle_seek(handle: 'nitf_IOHandle', offset: 'nitf_Off', whence: 'int', error: 'nrt_Error') -> "nitf_Off":
+def py_IOHandle_seek(handle: "nitf_IOHandle", offset: "nitf_Off", whence: "int", error: "nrt_Error") -> "nitf_Off":
     return _nitropy.py_IOHandle_seek(handle, offset, whence, error)
-py_IOHandle_seek = _nitropy.py_IOHandle_seek
 
-def py_Field_getString(field: 'nitf_Field', error: 'nrt_Error') -> "char *":
+def py_Field_getString(field: "nitf_Field", error: "nrt_Error") -> "char *":
     return _nitropy.py_Field_getString(field, error)
-py_Field_getString = _nitropy.py_Field_getString
 
-def py_Field_getInt(field: 'nitf_Field', error: 'nrt_Error') -> "uint32_t":
+def py_Field_getInt(field: "nitf_Field", error: "nrt_Error") -> "uint32_t":
     return _nitropy.py_Field_getInt(field, error)
-py_Field_getInt = _nitropy.py_Field_getInt
 
-def py_Field_setRawData(field: 'nitf_Field', pfsrd_buf: 'char *', length: 'int', error: 'nrt_Error') -> "void":
+def py_Field_setRawData(field: "nitf_Field", pfsrd_buf: "char *", length: "int", error: "nrt_Error") -> "void":
     return _nitropy.py_Field_setRawData(field, pfsrd_buf, length, error)
-py_Field_setRawData = _nitropy.py_Field_setRawData
 
-def py_TRE_setField(tre: 'nitf_TRE', tag: 'char const *', buf: 'char *', length: 'int', error: 'nrt_Error') -> "void":
+def py_TRE_setField(tre: "nitf_TRE", tag: "char const *", buf: "char *", length: "int", error: "nrt_Error") -> "void":
     return _nitropy.py_TRE_setField(tre, tag, buf, length, error)
-py_TRE_setField = _nitropy.py_TRE_setField
 
-def py_Field_getRawData(field: 'nitf_Field', error: 'nrt_Error') -> "PyObject *":
+def py_Field_getRawData(field: "nitf_Field", error: "nrt_Error") -> "PyObject *":
     return _nitropy.py_Field_getRawData(field, error)
-py_Field_getRawData = _nitropy.py_Field_getRawData
 
-def py_TRE_clone(tre: 'nitf_TRE', error: 'nrt_Error') -> "nitf_TRE *":
+def py_TRE_clone(tre: "nitf_TRE", error: "nrt_Error") -> "nitf_TRE *":
     return _nitropy.py_TRE_clone(tre, error)
-py_TRE_clone = _nitropy.py_TRE_clone
 
-def py_Record_getFileHeader(record: 'nitf_Record') -> "nitf_FileHeader *":
+def py_Record_getFileHeader(record: "nitf_Record") -> "nitf_FileHeader *":
     return _nitropy.py_Record_getFileHeader(record)
-py_Record_getFileHeader = _nitropy.py_Record_getFileHeader
 
-def py_Record_getImage(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_ImageSegment *":
+def py_Record_getImage(record: "nitf_Record", index: "int", error: "nrt_Error") -> "nitf_ImageSegment *":
     return _nitropy.py_Record_getImage(record, index, error)
-py_Record_getImage = _nitropy.py_Record_getImage
 
-def py_Record_getNumImages(record: 'nitf_Record') -> "int":
+def py_Record_getNumImages(record: "nitf_Record") -> "int":
     return _nitropy.py_Record_getNumImages(record)
-py_Record_getNumImages = _nitropy.py_Record_getNumImages
 
-def py_Record_getGraphic(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_GraphicSegment *":
+def py_Record_getGraphic(record: "nitf_Record", index: "int", error: "nrt_Error") -> "nitf_GraphicSegment *":
     return _nitropy.py_Record_getGraphic(record, index, error)
-py_Record_getGraphic = _nitropy.py_Record_getGraphic
 
-def py_Record_getNumGraphics(record: 'nitf_Record') -> "int":
+def py_Record_getNumGraphics(record: "nitf_Record") -> "int":
     return _nitropy.py_Record_getNumGraphics(record)
-py_Record_getNumGraphics = _nitropy.py_Record_getNumGraphics
 
-def py_Record_getLabel(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_LabelSegment *":
+def py_Record_getLabel(record: "nitf_Record", index: "int", error: "nrt_Error") -> "nitf_LabelSegment *":
     return _nitropy.py_Record_getLabel(record, index, error)
-py_Record_getLabel = _nitropy.py_Record_getLabel
 
-def py_Record_getNumLabels(record: 'nitf_Record') -> "int":
+def py_Record_getNumLabels(record: "nitf_Record") -> "int":
     return _nitropy.py_Record_getNumLabels(record)
-py_Record_getNumLabels = _nitropy.py_Record_getNumLabels
 
-def py_Record_getText(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_TextSegment *":
+def py_Record_getText(record: "nitf_Record", index: "int", error: "nrt_Error") -> "nitf_TextSegment *":
     return _nitropy.py_Record_getText(record, index, error)
-py_Record_getText = _nitropy.py_Record_getText
 
-def py_Record_getNumTexts(record: 'nitf_Record') -> "int":
+def py_Record_getNumTexts(record: "nitf_Record") -> "int":
     return _nitropy.py_Record_getNumTexts(record)
-py_Record_getNumTexts = _nitropy.py_Record_getNumTexts
 
-def py_Record_getDE(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_DESegment *":
+def py_Record_getDE(record: "nitf_Record", index: "int", error: "nrt_Error") -> "nitf_DESegment *":
     return _nitropy.py_Record_getDE(record, index, error)
-py_Record_getDE = _nitropy.py_Record_getDE
 
-def py_Record_getNumDEs(record: 'nitf_Record') -> "int":
+def py_Record_getNumDEs(record: "nitf_Record") -> "int":
     return _nitropy.py_Record_getNumDEs(record)
-py_Record_getNumDEs = _nitropy.py_Record_getNumDEs
 
-def py_Record_getRE(record: 'nitf_Record', index: 'int', error: 'nrt_Error') -> "nitf_RESegment *":
+def py_Record_getRE(record: "nitf_Record", index: "int", error: "nrt_Error") -> "nitf_RESegment *":
     return _nitropy.py_Record_getRE(record, index, error)
-py_Record_getRE = _nitropy.py_Record_getRE
 
-def py_Record_getNumREs(record: 'nitf_Record') -> "int":
+def py_Record_getNumREs(record: "nitf_Record") -> "int":
     return _nitropy.py_Record_getNumREs(record)
-py_Record_getNumREs = _nitropy.py_Record_getNumREs
 
-def py_Record_destruct(record: 'nitf_Record') -> "void":
+def py_Record_destruct(record: "nitf_Record") -> "void":
     return _nitropy.py_Record_destruct(record)
-py_Record_destruct = _nitropy.py_Record_destruct
 
-def py_Record_getVersion(record: 'nitf_Record') -> "nitf_Version":
+def py_Record_getVersion(record: "nitf_Record") -> "nitf_Version":
     return _nitropy.py_Record_getVersion(record)
-py_Record_getVersion = _nitropy.py_Record_getVersion
 
-def py_FileHeader_getComponentInfo(header: 'nitf_FileHeader', index: 'int', type: 'char *', error: 'nrt_Error') -> "nitf_ComponentInfo *":
+def py_FileHeader_getComponentInfo(header: "nitf_FileHeader", index: "int", type: "char *", error: "nrt_Error") -> "nitf_ComponentInfo *":
     return _nitropy.py_FileHeader_getComponentInfo(header, index, type, error)
-py_FileHeader_getComponentInfo = _nitropy.py_FileHeader_getComponentInfo
 
-def py_nitf_PluginRegistry_canRetrieveTREHandler(reg: 'nitf_PluginRegistry', ident: 'char const *', error: 'nrt_Error') -> "bool":
+def py_nitf_PluginRegistry_canRetrieveTREHandler(reg: "nitf_PluginRegistry", ident: "char const *", error: "nrt_Error") -> "bool":
     return _nitropy.py_nitf_PluginRegistry_canRetrieveTREHandler(reg, ident, error)
-py_nitf_PluginRegistry_canRetrieveTREHandler = _nitropy.py_nitf_PluginRegistry_canRetrieveTREHandler
 
-def py_nitf_Reader_newImageReader(reader: 'nitf_Reader', imageSegmentNumber: 'int', options: 'PyObject *', error: 'nrt_Error') -> "nitf_ImageReader *":
+def py_nitf_Reader_newImageReader(reader: "nitf_Reader", imageSegmentNumber: "int", options: "PyObject *", error: "nrt_Error") -> "nitf_ImageReader *":
     return _nitropy.py_nitf_Reader_newImageReader(reader, imageSegmentNumber, options, error)
-py_nitf_Reader_newImageReader = _nitropy.py_nitf_Reader_newImageReader
 
-def py_nitf_Writer_construct(error: 'nrt_Error') -> "nitf_Writer *":
+def py_nitf_Writer_construct(error: "nrt_Error") -> "nitf_Writer *":
     return _nitropy.py_nitf_Writer_construct(error)
-py_nitf_Writer_construct = _nitropy.py_nitf_Writer_construct
 
-def py_nitf_Writer_prepare(writer: 'nitf_Writer', record: 'nitf_Record', ioHandle: 'nitf_IOHandle', error: 'nrt_Error') -> "bool":
+def py_nitf_Writer_prepare(writer: "nitf_Writer", record: "nitf_Record", ioHandle: "nitf_IOHandle", error: "nrt_Error") -> "bool":
     return _nitropy.py_nitf_Writer_prepare(writer, record, ioHandle, error)
-py_nitf_Writer_prepare = _nitropy.py_nitf_Writer_prepare
 
-def py_nitf_Writer_destruct(writer: 'nitf_Writer **') -> "void":
+def py_nitf_Writer_destruct(writer: "nitf_Writer **") -> "void":
     return _nitropy.py_nitf_Writer_destruct(writer)
-py_nitf_Writer_destruct = _nitropy.py_nitf_Writer_destruct
 
-def py_nitf_Writer_newImageWriter(writer: 'nitf_Writer', index: 'int', options: 'PyObject *', error: 'nrt_Error') -> "nitf_ImageWriter *":
+def py_nitf_Writer_newImageWriter(writer: "nitf_Writer", index: "int", options: "PyObject *", error: "nrt_Error") -> "nitf_ImageWriter *":
     return _nitropy.py_nitf_Writer_newImageWriter(writer, index, options, error)
-py_nitf_Writer_newImageWriter = _nitropy.py_nitf_Writer_newImageWriter
 
-def py_nitf_MemorySource_construct(data: 'long long', size: 'nitf_Off', start: 'nitf_Off', numBytesPerPixel: 'int', pixelSkip: 'int', error: 'nrt_Error') -> "nitf_BandSource *":
+def py_nitf_MemorySource_construct(data: "long long", size: "nitf_Off", start: "nitf_Off", numBytesPerPixel: "int", pixelSkip: "int", error: "nrt_Error") -> "nitf_BandSource *":
     return _nitropy.py_nitf_MemorySource_construct(data, size, start, numBytesPerPixel, pixelSkip, error)
-py_nitf_MemorySource_construct = _nitropy.py_nitf_MemorySource_construct
 
-def py_nitf_SegmentMemorySource_construct(data: 'long long', size: 'nitf_Off', start: 'nitf_Off', byteSkip: 'int', copyData: 'bool', error: 'nrt_Error') -> "nitf_SegmentSource *":
+def py_nitf_SegmentMemorySource_construct(data: "long long", size: "nitf_Off", start: "nitf_Off", byteSkip: "int", copyData: "bool", error: "nrt_Error") -> "nitf_SegmentSource *":
     return _nitropy.py_nitf_SegmentMemorySource_construct(data, size, start, byteSkip, copyData, error)
-py_nitf_SegmentMemorySource_construct = _nitropy.py_nitf_SegmentMemorySource_construct
 
-def py_SubWindow_construct(startRow: 'int', startCol: 'int', numRows: 'int', numCols: 'int', bandList: 'PyObject *', downSampler: 'nitf_DownSampler', error: 'nrt_Error') -> "nitf_SubWindow *":
+def py_SubWindow_construct(startRow: "int", startCol: "int", numRows: "int", numCols: "int", bandList: "PyObject *", downSampler: "nitf_DownSampler", error: "nrt_Error") -> "nitf_SubWindow *":
     return _nitropy.py_SubWindow_construct(startRow, startCol, numRows, numCols, bandList, downSampler, error)
-py_SubWindow_construct = _nitropy.py_SubWindow_construct
 
-def py_ImageReader_read(reader: 'nitf_ImageReader', window: 'nitf_SubWindow', nbpp: 'int', error: 'nrt_Error') -> "PyObject *":
+def py_ImageReader_read(reader: "nitf_ImageReader", window: "nitf_SubWindow", nbpp: "int", error: "nrt_Error") -> "PyObject *":
     return _nitropy.py_ImageReader_read(reader, window, nbpp, error)
-py_ImageReader_read = _nitropy.py_ImageReader_read
 
-def py_Pair_getFieldData(pair: 'nrt_Pair') -> "nitf_Field *":
+def py_Pair_getFieldData(pair: "nrt_Pair") -> "nitf_Field *":
     return _nitropy.py_Pair_getFieldData(pair)
-py_Pair_getFieldData = _nitropy.py_Pair_getFieldData
 
-def py_TREEnumerator_hasNext(it: 'nitf_TREEnumerator **') -> "PyObject *":
+def py_TREEnumerator_hasNext(it: "nitf_TREEnumerator **") -> "PyObject *":
     return _nitropy.py_TREEnumerator_hasNext(it)
-py_TREEnumerator_hasNext = _nitropy.py_TREEnumerator_hasNext
 
-def py_TREEnumerator_next(it: 'nitf_TREEnumerator', error: 'nrt_Error') -> "nitf_Pair *":
+def py_TREEnumerator_next(it: "nitf_TREEnumerator", error: "nrt_Error") -> "nitf_Pair *":
     return _nitropy.py_TREEnumerator_next(it, error)
-py_TREEnumerator_next = _nitropy.py_TREEnumerator_next
 
-def py_DataSource_read(source: 'nitf_DataSource', size: 'size_t', error: 'nrt_Error') -> "PyObject *":
+def py_DataSource_read(source: "nitf_DataSource", size: "size_t", error: "nrt_Error") -> "PyObject *":
     return _nitropy.py_DataSource_read(source, size, error)
-py_DataSource_read = _nitropy.py_DataSource_read
 
-def py_SegmentReader_read(reader: 'nitf_SegmentReader', size: 'size_t', error: 'nrt_Error') -> "PyObject *":
+def py_SegmentReader_read(reader: "nitf_SegmentReader", size: "size_t", error: "nrt_Error") -> "PyObject *":
     return _nitropy.py_SegmentReader_read(reader, size, error)
-py_SegmentReader_read = _nitropy.py_SegmentReader_read
 
-def py_IOHandle_read(handle: 'nitf_IOHandle', size: 'size_t', error: 'nrt_Error') -> "PyObject *":
+def py_IOHandle_read(handle: "nitf_IOHandle", size: "size_t", error: "nrt_Error") -> "PyObject *":
     return _nitropy.py_IOHandle_read(handle, size, error)
-py_IOHandle_read = _nitropy.py_IOHandle_read
-# This file is compatible with both classic and new-style classes.
 
 

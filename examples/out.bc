; ModuleID = './examples/test.bc'
source_filename = "./examples/test.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx11.0.0"

%struct.Node = type { %struct.Node*, i32 }

@.str = private unnamed_addr constant [11 x i8] c"./test.txt\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@head = global %struct.Node* null, align 8, !dbg !0
@curr = global %struct.Node* null, align 8, !dbg !14

; Function Attrs: noinline nounwind ssp uwtable
define i32 @baz(i32 %0) #0 !dbg !27 {
  %2 = alloca i32, align 4
  %3 = alloca [10 x i8], align 1
  %4 = alloca i32, align 4
  %5 = call i8* @gigafunction_get_thread_state()
  call void @gigafunction_enter_block(i8* %5, i64 1)
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !30, metadata !DIExpression()), !dbg !31
  call void @llvm.dbg.declare(metadata [10 x i8]* %3, metadata !32, metadata !DIExpression()), !dbg !37
  call void @llvm.dbg.declare(metadata i32* %4, metadata !38, metadata !DIExpression()), !dbg !39
  %6 = load i32, i32* %2, align 4, !dbg !40
  %7 = bitcast [10 x i8]* %3 to i8*, !dbg !41
  %8 = call i64 @"\01_read"(i32 %6, i8* %7, i64 10), !dbg !42
  %9 = trunc i64 %8 to i32, !dbg !42
  store i32 %9, i32* %4, align 4, !dbg !39
  %10 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 0, !dbg !43
  %11 = load i8, i8* %10, align 1, !dbg !43
  %12 = sext i8 %11 to i32, !dbg !43
  %13 = sub nsw i32 %12, 48, !dbg !44
  ret i32 %13, !dbg !45
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i64 @"\01_read"(i32, i8*, i64) #2

; Function Attrs: noinline nounwind ssp uwtable
define i32 @bar(i8* %0) #0 !dbg !46 {
  %2 = alloca i8*, align 8
  %3 = call i8* @gigafunction_get_thread_state()
  call void @gigafunction_enter_block(i8* %3, i64 2)
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !50, metadata !DIExpression()), !dbg !51
  %4 = load i8*, i8** %2, align 8, !dbg !52
  %5 = call i32 (i8*, i32, ...) @"\01_open"(i8* %4, i32 0), !dbg !53
  ret i32 %5, !dbg !54
}

declare i32 @"\01_open"(i8*, i32, ...) #2

; Function Attrs: noinline nounwind ssp uwtable
define i32 @foo(i32 %0) #0 !dbg !55 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.Node*, align 8
  %7 = call i8* @gigafunction_get_thread_state()
  call void @gigafunction_enter_block(i8* %7, i64 3)
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !56, metadata !DIExpression()), !dbg !57
  call void @llvm.dbg.declare(metadata i32* %3, metadata !58, metadata !DIExpression()), !dbg !59
  %8 = call i32 @bar(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)), !dbg !60
  store i32 %8, i32* %3, align 4, !dbg !59
  call void @llvm.dbg.declare(metadata i32* %4, metadata !61, metadata !DIExpression()), !dbg !62
  %9 = load i32, i32* %3, align 4, !dbg !63
  %10 = call i32 @baz(i32 %9), !dbg !64
  store i32 %10, i32* %4, align 4, !dbg !62
  %11 = load i32, i32* %4, align 4, !dbg !65
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %11), !dbg !66
  call void @llvm.dbg.declare(metadata i32* %5, metadata !67, metadata !DIExpression()), !dbg !68
  store i32 0, i32* %5, align 4, !dbg !68
  br label %13, !dbg !69

13:                                               ; preds = %35, %1
  call void @gigafunction_enter_block(i8* %7, i64 4), !dbg !70
  %14 = load i32, i32* %5, align 4, !dbg !70
  %15 = load i32, i32* %4, align 4, !dbg !71
  %16 = icmp slt i32 %14, %15, !dbg !72
  br i1 %16, label %17, label %38, !dbg !69

17:                                               ; preds = %13
  call void @gigafunction_enter_block(i8* %7, i64 5), !dbg !73
  call void @llvm.dbg.declare(metadata %struct.Node** %6, metadata !75, metadata !DIExpression()), !dbg !73
  %18 = call align 16 i8* @malloc(i64 16) #4, !dbg !76
  %19 = bitcast i8* %18 to %struct.Node*, !dbg !77
  store %struct.Node* %19, %struct.Node** %6, align 8, !dbg !73
  %20 = load i32, i32* %4, align 4, !dbg !78
  %21 = load i32, i32* %5, align 4, !dbg !79
  %22 = sub nsw i32 %20, %21, !dbg !80
  %23 = load %struct.Node*, %struct.Node** %6, align 8, !dbg !81
  %24 = getelementptr inbounds %struct.Node, %struct.Node* %23, i32 0, i32 1, !dbg !82
  store i32 %22, i32* %24, align 8, !dbg !83
  %25 = load i32, i32* %5, align 4, !dbg !84
  %26 = icmp eq i32 %25, 0, !dbg !86
  br i1 %26, label %27, label %30, !dbg !87

27:                                               ; preds = %17
  call void @gigafunction_enter_block(i8* %7, i64 6), !dbg !88
  %28 = load %struct.Node*, %struct.Node** %6, align 8, !dbg !88
  store %struct.Node* %28, %struct.Node** @head, align 8, !dbg !90
  %29 = load %struct.Node*, %struct.Node** %6, align 8, !dbg !91
  store %struct.Node* %29, %struct.Node** @curr, align 8, !dbg !92
  br label %35, !dbg !93

30:                                               ; preds = %17
  call void @gigafunction_enter_block(i8* %7, i64 7), !dbg !94
  %31 = load %struct.Node*, %struct.Node** %6, align 8, !dbg !94
  %32 = load %struct.Node*, %struct.Node** @curr, align 8, !dbg !96
  %33 = getelementptr inbounds %struct.Node, %struct.Node* %32, i32 0, i32 0, !dbg !97
  store %struct.Node* %31, %struct.Node** %33, align 8, !dbg !98
  %34 = load %struct.Node*, %struct.Node** %6, align 8, !dbg !99
  store %struct.Node* %34, %struct.Node** @curr, align 8, !dbg !100
  br label %35

35:                                               ; preds = %30, %27
  call void @gigafunction_enter_block(i8* %7, i64 8), !dbg !101
  %36 = load i32, i32* %5, align 4, !dbg !101
  %37 = add nsw i32 %36, 1, !dbg !101
  store i32 %37, i32* %5, align 4, !dbg !101
  br label %13, !dbg !69, !llvm.loop !102

38:                                               ; preds = %13
  call void @gigafunction_enter_block(i8* %7, i64 9), !dbg !105
  %39 = load i32, i32* %4, align 4, !dbg !105
  ret i32 %39, !dbg !106
}

declare i32 @printf(i8*, ...) #2

; Function Attrs: allocsize(0)
declare align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind ssp uwtable
define i32 @main(i32 %0, i8** %1) #0 !dbg !107 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = call i8* @gigafunction_get_thread_state()
  call void @gigafunction_enter_block(i8* %7, i64 10)
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !111, metadata !DIExpression()), !dbg !112
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !113, metadata !DIExpression()), !dbg !114
  call void @llvm.dbg.declare(metadata i32* %6, metadata !115, metadata !DIExpression()), !dbg !116
  %8 = load i32, i32* %4, align 4, !dbg !117
  %9 = call i32 @foo(i32 %8), !dbg !118
  store i32 %9, i32* %6, align 4, !dbg !116
  %10 = load i32, i32* %6, align 4, !dbg !119
  ret i32 %10, !dbg !120
}

declare i8* @gigafunction_get_thread_state()

declare void @gigafunction_enter_block(i8*, i64)

attributes #0 = { noinline nounwind ssp uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+v8.5a,+zcm,+zcz" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+v8.5a,+zcm,+zcz" }
attributes #3 = { allocsize(0) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+crypto,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+v8.5a,+zcm,+zcz" }
attributes #4 = { allocsize(0) }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!llvm.ident = !{!26}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "head", scope: !2, file: !8, line: 15, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "Homebrew clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !13, splitDebugInlining: false, nameTableKind: None, sysroot: "/Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk", sdk: "MacOSX11.sdk")
!3 = !DIFile(filename: "examples/test.c", directory: "/Users/hbrodin/projects/polytracker")
!4 = !{}
!5 = !{!6}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Node", file: !8, line: 8, size: 128, elements: !9)
!8 = !DIFile(filename: "./examples/test.c", directory: "/Users/hbrodin/projects/polytracker")
!9 = !{!10, !11}
!10 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7, file: !8, line: 9, baseType: !6, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !7, file: !8, line: 10, baseType: !12, size: 32, offset: 64)
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !{!0, !14}
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "curr", scope: !2, file: !8, line: 16, type: !6, isLocal: false, isDefinition: true)
!16 = !{i32 7, !"Dwarf Version", i32 4}
!17 = !{i32 2, !"Debug Info Version", i32 3}
!18 = !{i32 1, !"wchar_size", i32 4}
!19 = !{i32 1, !"branch-target-enforcement", i32 0}
!20 = !{i32 1, !"sign-return-address", i32 0}
!21 = !{i32 1, !"sign-return-address-all", i32 0}
!22 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!23 = !{i32 7, !"PIC Level", i32 2}
!24 = !{i32 7, !"uwtable", i32 1}
!25 = !{i32 7, !"frame-pointer", i32 1}
!26 = !{!"Homebrew clang version 13.0.0"}
!27 = distinct !DISubprogram(name: "baz", scope: !8, file: !8, line: 18, type: !28, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!28 = !DISubroutineType(types: !29)
!29 = !{!12, !12}
!30 = !DILocalVariable(name: "fd", arg: 1, scope: !27, file: !8, line: 18, type: !12)
!31 = !DILocation(line: 18, column: 13, scope: !27)
!32 = !DILocalVariable(name: "buff", scope: !27, file: !8, line: 19, type: !33)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !34, size: 80, elements: !35)
!34 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!35 = !{!36}
!36 = !DISubrange(count: 10)
!37 = !DILocation(line: 19, column: 8, scope: !27)
!38 = !DILocalVariable(name: "size", scope: !27, file: !8, line: 20, type: !12)
!39 = !DILocation(line: 20, column: 7, scope: !27)
!40 = !DILocation(line: 20, column: 19, scope: !27)
!41 = !DILocation(line: 20, column: 23, scope: !27)
!42 = !DILocation(line: 20, column: 14, scope: !27)
!43 = !DILocation(line: 21, column: 10, scope: !27)
!44 = !DILocation(line: 21, column: 18, scope: !27)
!45 = !DILocation(line: 21, column: 3, scope: !27)
!46 = distinct !DISubprogram(name: "bar", scope: !8, file: !8, line: 24, type: !47, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!47 = !DISubroutineType(types: !48)
!48 = !{!12, !49}
!49 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !34, size: 64)
!50 = !DILocalVariable(name: "path", arg: 1, scope: !46, file: !8, line: 24, type: !49)
!51 = !DILocation(line: 24, column: 15, scope: !46)
!52 = !DILocation(line: 25, column: 15, scope: !46)
!53 = !DILocation(line: 25, column: 10, scope: !46)
!54 = !DILocation(line: 25, column: 3, scope: !46)
!55 = distinct !DISubprogram(name: "foo", scope: !8, file: !8, line: 28, type: !28, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!56 = !DILocalVariable(name: "num_nodes", arg: 1, scope: !55, file: !8, line: 28, type: !12)
!57 = !DILocation(line: 28, column: 13, scope: !55)
!58 = !DILocalVariable(name: "fd", scope: !55, file: !8, line: 30, type: !12)
!59 = !DILocation(line: 30, column: 7, scope: !55)
!60 = !DILocation(line: 30, column: 12, scope: !55)
!61 = !DILocalVariable(name: "some_number", scope: !55, file: !8, line: 32, type: !12)
!62 = !DILocation(line: 32, column: 7, scope: !55)
!63 = !DILocation(line: 32, column: 25, scope: !55)
!64 = !DILocation(line: 32, column: 21, scope: !55)
!65 = !DILocation(line: 34, column: 18, scope: !55)
!66 = !DILocation(line: 34, column: 3, scope: !55)
!67 = !DILocalVariable(name: "i", scope: !55, file: !8, line: 36, type: !12)
!68 = !DILocation(line: 36, column: 7, scope: !55)
!69 = !DILocation(line: 38, column: 3, scope: !55)
!70 = !DILocation(line: 38, column: 10, scope: !55)
!71 = !DILocation(line: 38, column: 14, scope: !55)
!72 = !DILocation(line: 38, column: 12, scope: !55)
!73 = !DILocation(line: 39, column: 19, scope: !74)
!74 = distinct !DILexicalBlock(scope: !55, file: !8, line: 38, column: 27)
!75 = !DILocalVariable(name: "new_node", scope: !74, file: !8, line: 39, type: !6)
!76 = !DILocation(line: 39, column: 44, scope: !74)
!77 = !DILocation(line: 39, column: 30, scope: !74)
!78 = !DILocation(line: 41, column: 21, scope: !74)
!79 = !DILocation(line: 41, column: 35, scope: !74)
!80 = !DILocation(line: 41, column: 33, scope: !74)
!81 = !DILocation(line: 41, column: 5, scope: !74)
!82 = !DILocation(line: 41, column: 15, scope: !74)
!83 = !DILocation(line: 41, column: 19, scope: !74)
!84 = !DILocation(line: 44, column: 9, scope: !85)
!85 = distinct !DILexicalBlock(scope: !74, file: !8, line: 44, column: 9)
!86 = !DILocation(line: 44, column: 11, scope: !85)
!87 = !DILocation(line: 44, column: 9, scope: !74)
!88 = !DILocation(line: 45, column: 14, scope: !89)
!89 = distinct !DILexicalBlock(scope: !85, file: !8, line: 44, column: 17)
!90 = !DILocation(line: 45, column: 12, scope: !89)
!91 = !DILocation(line: 46, column: 14, scope: !89)
!92 = !DILocation(line: 46, column: 12, scope: !89)
!93 = !DILocation(line: 47, column: 5, scope: !89)
!94 = !DILocation(line: 49, column: 20, scope: !95)
!95 = distinct !DILexicalBlock(scope: !85, file: !8, line: 48, column: 10)
!96 = !DILocation(line: 49, column: 7, scope: !95)
!97 = !DILocation(line: 49, column: 13, scope: !95)
!98 = !DILocation(line: 49, column: 18, scope: !95)
!99 = !DILocation(line: 50, column: 14, scope: !95)
!100 = !DILocation(line: 50, column: 12, scope: !95)
!101 = !DILocation(line: 52, column: 7, scope: !74)
!102 = distinct !{!102, !69, !103, !104}
!103 = !DILocation(line: 53, column: 3, scope: !55)
!104 = !{!"llvm.loop.mustprogress"}
!105 = !DILocation(line: 55, column: 10, scope: !55)
!106 = !DILocation(line: 55, column: 3, scope: !55)
!107 = distinct !DISubprogram(name: "main", scope: !8, file: !8, line: 59, type: !108, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!108 = !DISubroutineType(types: !109)
!109 = !{!12, !12, !110}
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !49, size: 64)
!111 = !DILocalVariable(name: "argc", arg: 1, scope: !107, file: !8, line: 59, type: !12)
!112 = !DILocation(line: 59, column: 14, scope: !107)
!113 = !DILocalVariable(name: "argv", arg: 2, scope: !107, file: !8, line: 59, type: !110)
!114 = !DILocation(line: 59, column: 27, scope: !107)
!115 = !DILocalVariable(name: "ret_val", scope: !107, file: !8, line: 61, type: !12)
!116 = !DILocation(line: 61, column: 7, scope: !107)
!117 = !DILocation(line: 61, column: 21, scope: !107)
!118 = !DILocation(line: 61, column: 17, scope: !107)
!119 = !DILocation(line: 62, column: 10, scope: !107)
!120 = !DILocation(line: 62, column: 3, scope: !107)
